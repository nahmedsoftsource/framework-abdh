#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Superior.MobileMedics.DataMappers.LinqDataMapper
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SMM-Trunk")]
	public partial class EntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountPayable(AccountPayable instance);
    partial void UpdateAccountPayable(AccountPayable instance);
    partial void DeleteAccountPayable(AccountPayable instance);
    partial void InsertAccountPayableDetail(AccountPayableDetail instance);
    partial void UpdateAccountPayableDetail(AccountPayableDetail instance);
    partial void DeleteAccountPayableDetail(AccountPayableDetail instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertAgency(Agency instance);
    partial void UpdateAgency(Agency instance);
    partial void DeleteAgency(Agency instance);
    partial void InsertAgencyFavouriteList(AgencyFavouriteList instance);
    partial void UpdateAgencyFavouriteList(AgencyFavouriteList instance);
    partial void DeleteAgencyFavouriteList(AgencyFavouriteList instance);
    partial void InsertAgencyInsurance(AgencyInsurance instance);
    partial void UpdateAgencyInsurance(AgencyInsurance instance);
    partial void DeleteAgencyInsurance(AgencyInsurance instance);
    partial void InsertAgent(Agent instance);
    partial void UpdateAgent(Agent instance);
    partial void DeleteAgent(Agent instance);
    partial void InsertAgentFavouriteList(AgentFavouriteList instance);
    partial void UpdateAgentFavouriteList(AgentFavouriteList instance);
    partial void DeleteAgentFavouriteList(AgentFavouriteList instance);
    partial void InsertAgentInsurance(AgentInsurance instance);
    partial void UpdateAgentInsurance(AgentInsurance instance);
    partial void DeleteAgentInsurance(AgentInsurance instance);
    partial void InsertApplicant(Applicant instance);
    partial void UpdateApplicant(Applicant instance);
    partial void DeleteApplicant(Applicant instance);
    partial void InsertApplicantAddress(ApplicantAddress instance);
    partial void UpdateApplicantAddress(ApplicantAddress instance);
    partial void DeleteApplicantAddress(ApplicantAddress instance);
    partial void InsertApplicantEmailAddress(ApplicantEmailAddress instance);
    partial void UpdateApplicantEmailAddress(ApplicantEmailAddress instance);
    partial void DeleteApplicantEmailAddress(ApplicantEmailAddress instance);
    partial void InsertApplicantPhone(ApplicantPhone instance);
    partial void UpdateApplicantPhone(ApplicantPhone instance);
    partial void DeleteApplicantPhone(ApplicantPhone instance);
    partial void InsertApprovalStatus(ApprovalStatus instance);
    partial void UpdateApprovalStatus(ApprovalStatus instance);
    partial void DeleteApprovalStatus(ApprovalStatus instance);
    partial void InsertBillingCompany(BillingCompany instance);
    partial void UpdateBillingCompany(BillingCompany instance);
    partial void DeleteBillingCompany(BillingCompany instance);
    partial void InsertBillingInformation(BillingInformation instance);
    partial void UpdateBillingInformation(BillingInformation instance);
    partial void DeleteBillingInformation(BillingInformation instance);
    partial void InsertConfiguration(Configuration instance);
    partial void UpdateConfiguration(Configuration instance);
    partial void DeleteConfiguration(Configuration instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCredentialing(Credentialing instance);
    partial void UpdateCredentialing(Credentialing instance);
    partial void DeleteCredentialing(Credentialing instance);
    partial void InsertCredentialingStatus(CredentialingStatus instance);
    partial void UpdateCredentialingStatus(CredentialingStatus instance);
    partial void DeleteCredentialingStatus(CredentialingStatus instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertDocumentClassifier(DocumentClassifier instance);
    partial void UpdateDocumentClassifier(DocumentClassifier instance);
    partial void DeleteDocumentClassifier(DocumentClassifier instance);
    partial void InsertDocumentFormat(DocumentFormat instance);
    partial void UpdateDocumentFormat(DocumentFormat instance);
    partial void DeleteDocumentFormat(DocumentFormat instance);
    partial void InsertDocumentType(DocumentType instance);
    partial void UpdateDocumentType(DocumentType instance);
    partial void DeleteDocumentType(DocumentType instance);
    partial void InsertEmailFormat(EmailFormat instance);
    partial void UpdateEmailFormat(EmailFormat instance);
    partial void DeleteEmailFormat(EmailFormat instance);
    partial void InsertEmailType(EmailType instance);
    partial void UpdateEmailType(EmailType instance);
    partial void DeleteEmailType(EmailType instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeStatus(EmployeeStatus instance);
    partial void UpdateEmployeeStatus(EmployeeStatus instance);
    partial void DeleteEmployeeStatus(EmployeeStatus instance);
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertFeeLevel(FeeLevel instance);
    partial void UpdateFeeLevel(FeeLevel instance);
    partial void DeleteFeeLevel(FeeLevel instance);
    partial void InsertFeeLevelItem(FeeLevelItem instance);
    partial void UpdateFeeLevelItem(FeeLevelItem instance);
    partial void DeleteFeeLevelItem(FeeLevelItem instance);
    partial void InsertFeeLevelItemReq(FeeLevelItemReq instance);
    partial void UpdateFeeLevelItemReq(FeeLevelItemReq instance);
    partial void DeleteFeeLevelItemReq(FeeLevelItemReq instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertGeoSurcharge(GeoSurcharge instance);
    partial void UpdateGeoSurcharge(GeoSurcharge instance);
    partial void DeleteGeoSurcharge(GeoSurcharge instance);
    partial void InsertGovIDType(GovIDType instance);
    partial void UpdateGovIDType(GovIDType instance);
    partial void DeleteGovIDType(GovIDType instance);
    partial void InsertIncompleteOrder(IncompleteOrder instance);
    partial void UpdateIncompleteOrder(IncompleteOrder instance);
    partial void DeleteIncompleteOrder(IncompleteOrder instance);
    partial void InsertIncompleteOrderDocument(IncompleteOrderDocument instance);
    partial void UpdateIncompleteOrderDocument(IncompleteOrderDocument instance);
    partial void DeleteIncompleteOrderDocument(IncompleteOrderDocument instance);
    partial void InsertIncompleteOrderDocumentItem(IncompleteOrderDocumentItem instance);
    partial void UpdateIncompleteOrderDocumentItem(IncompleteOrderDocumentItem instance);
    partial void DeleteIncompleteOrderDocumentItem(IncompleteOrderDocumentItem instance);
    partial void InsertIncompleteOrderRequirement(IncompleteOrderRequirement instance);
    partial void UpdateIncompleteOrderRequirement(IncompleteOrderRequirement instance);
    partial void DeleteIncompleteOrderRequirement(IncompleteOrderRequirement instance);
    partial void InsertIncompleteOrderSchedule(IncompleteOrderSchedule instance);
    partial void UpdateIncompleteOrderSchedule(IncompleteOrderSchedule instance);
    partial void DeleteIncompleteOrderSchedule(IncompleteOrderSchedule instance);
    partial void InsertInsurance(Insurance instance);
    partial void UpdateInsurance(Insurance instance);
    partial void DeleteInsurance(Insurance instance);
    partial void InsertInsuranceForm(InsuranceForm instance);
    partial void UpdateInsuranceForm(InsuranceForm instance);
    partial void DeleteInsuranceForm(InsuranceForm instance);
    partial void InsertInsuranceLab(InsuranceLab instance);
    partial void UpdateInsuranceLab(InsuranceLab instance);
    partial void DeleteInsuranceLab(InsuranceLab instance);
    partial void InsertInsuranceLocation(InsuranceLocation instance);
    partial void UpdateInsuranceLocation(InsuranceLocation instance);
    partial void DeleteInsuranceLocation(InsuranceLocation instance);
    partial void InsertInsurancePartner(InsurancePartner instance);
    partial void UpdateInsurancePartner(InsurancePartner instance);
    partial void DeleteInsurancePartner(InsurancePartner instance);
    partial void InsertInsuranceProductType(InsuranceProductType instance);
    partial void UpdateInsuranceProductType(InsuranceProductType instance);
    partial void DeleteInsuranceProductType(InsuranceProductType instance);
    partial void InsertInsuranceProductTypeRequirement(InsuranceProductTypeRequirement instance);
    partial void UpdateInsuranceProductTypeRequirement(InsuranceProductTypeRequirement instance);
    partial void DeleteInsuranceProductTypeRequirement(InsuranceProductTypeRequirement instance);
    partial void InsertInsuranceProductTypeRequirementColumn(InsuranceProductTypeRequirementColumn instance);
    partial void UpdateInsuranceProductTypeRequirementColumn(InsuranceProductTypeRequirementColumn instance);
    partial void DeleteInsuranceProductTypeRequirementColumn(InsuranceProductTypeRequirementColumn instance);
    partial void InsertInsuranceProductTypeRequirementCommand(InsuranceProductTypeRequirementCommand instance);
    partial void UpdateInsuranceProductTypeRequirementCommand(InsuranceProductTypeRequirementCommand instance);
    partial void DeleteInsuranceProductTypeRequirementCommand(InsuranceProductTypeRequirementCommand instance);
    partial void InsertInsuranceProductTypeRequirementRow(InsuranceProductTypeRequirementRow instance);
    partial void UpdateInsuranceProductTypeRequirementRow(InsuranceProductTypeRequirementRow instance);
    partial void DeleteInsuranceProductTypeRequirementRow(InsuranceProductTypeRequirementRow instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertInvoicePayment(InvoicePayment instance);
    partial void UpdateInvoicePayment(InvoicePayment instance);
    partial void DeleteInvoicePayment(InvoicePayment instance);
    partial void InsertLab(Lab instance);
    partial void UpdateLab(Lab instance);
    partial void DeleteLab(Lab instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertOfficeNote(OfficeNote instance);
    partial void UpdateOfficeNote(OfficeNote instance);
    partial void DeleteOfficeNote(OfficeNote instance);
    partial void InsertOfficeNoteCategory(OfficeNoteCategory instance);
    partial void UpdateOfficeNoteCategory(OfficeNoteCategory instance);
    partial void DeleteOfficeNoteCategory(OfficeNoteCategory instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderAssignment(OrderAssignment instance);
    partial void UpdateOrderAssignment(OrderAssignment instance);
    partial void DeleteOrderAssignment(OrderAssignment instance);
    partial void InsertOrderAssignmentFee(OrderAssignmentFee instance);
    partial void UpdateOrderAssignmentFee(OrderAssignmentFee instance);
    partial void DeleteOrderAssignmentFee(OrderAssignmentFee instance);
    partial void InsertOrderAssignmentReq(OrderAssignmentReq instance);
    partial void UpdateOrderAssignmentReq(OrderAssignmentReq instance);
    partial void DeleteOrderAssignmentReq(OrderAssignmentReq instance);
    partial void InsertOrderAssignmentStatus(OrderAssignmentStatus instance);
    partial void UpdateOrderAssignmentStatus(OrderAssignmentStatus instance);
    partial void DeleteOrderAssignmentStatus(OrderAssignmentStatus instance);
    partial void InsertOrderAssignmentStatusHistory(OrderAssignmentStatusHistory instance);
    partial void UpdateOrderAssignmentStatusHistory(OrderAssignmentStatusHistory instance);
    partial void DeleteOrderAssignmentStatusHistory(OrderAssignmentStatusHistory instance);
    partial void InsertOrderDocument(OrderDocument instance);
    partial void UpdateOrderDocument(OrderDocument instance);
    partial void DeleteOrderDocument(OrderDocument instance);
    partial void InsertOrderingParty(OrderingParty instance);
    partial void UpdateOrderingParty(OrderingParty instance);
    partial void DeleteOrderingParty(OrderingParty instance);
    partial void InsertOrderingPartyAgency(OrderingPartyAgency instance);
    partial void UpdateOrderingPartyAgency(OrderingPartyAgency instance);
    partial void DeleteOrderingPartyAgency(OrderingPartyAgency instance);
    partial void InsertOrderingPartyAgent(OrderingPartyAgent instance);
    partial void UpdateOrderingPartyAgent(OrderingPartyAgent instance);
    partial void DeleteOrderingPartyAgent(OrderingPartyAgent instance);
    partial void InsertOrderingPartyInsurance(OrderingPartyInsurance instance);
    partial void UpdateOrderingPartyInsurance(OrderingPartyInsurance instance);
    partial void DeleteOrderingPartyInsurance(OrderingPartyInsurance instance);
    partial void InsertOrderingPartyUser(OrderingPartyUser instance);
    partial void UpdateOrderingPartyUser(OrderingPartyUser instance);
    partial void DeleteOrderingPartyUser(OrderingPartyUser instance);
    partial void InsertOrderPaperworkStatus(OrderPaperworkStatus instance);
    partial void UpdateOrderPaperworkStatus(OrderPaperworkStatus instance);
    partial void DeleteOrderPaperworkStatus(OrderPaperworkStatus instance);
    partial void InsertOrderPaperworkStatusHistory(OrderPaperworkStatusHistory instance);
    partial void UpdateOrderPaperworkStatusHistory(OrderPaperworkStatusHistory instance);
    partial void DeleteOrderPaperworkStatusHistory(OrderPaperworkStatusHistory instance);
    partial void InsertOrderPriority(OrderPriority instance);
    partial void UpdateOrderPriority(OrderPriority instance);
    partial void DeleteOrderPriority(OrderPriority instance);
    partial void InsertOrderRelative(OrderRelative instance);
    partial void UpdateOrderRelative(OrderRelative instance);
    partial void DeleteOrderRelative(OrderRelative instance);
    partial void InsertOrderRequirement(OrderRequirement instance);
    partial void UpdateOrderRequirement(OrderRequirement instance);
    partial void DeleteOrderRequirement(OrderRequirement instance);
    partial void InsertOrderSchedule(OrderSchedule instance);
    partial void UpdateOrderSchedule(OrderSchedule instance);
    partial void DeleteOrderSchedule(OrderSchedule instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertOrderStatusHistory(OrderStatusHistory instance);
    partial void UpdateOrderStatusHistory(OrderStatusHistory instance);
    partial void DeleteOrderStatusHistory(OrderStatusHistory instance);
    partial void InsertOrderSurcharge(OrderSurcharge instance);
    partial void UpdateOrderSurcharge(OrderSurcharge instance);
    partial void DeleteOrderSurcharge(OrderSurcharge instance);
    partial void InsertOrderType(OrderType instance);
    partial void UpdateOrderType(OrderType instance);
    partial void DeleteOrderType(OrderType instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertPartner(Partner instance);
    partial void UpdatePartner(Partner instance);
    partial void DeletePartner(Partner instance);
    partial void InsertParty(Party instance);
    partial void UpdateParty(Party instance);
    partial void DeleteParty(Party instance);
    partial void InsertPartyAddress(PartyAddress instance);
    partial void UpdatePartyAddress(PartyAddress instance);
    partial void DeletePartyAddress(PartyAddress instance);
    partial void InsertPartyContact(PartyContact instance);
    partial void UpdatePartyContact(PartyContact instance);
    partial void DeletePartyContact(PartyContact instance);
    partial void InsertPartyEmailAddress(PartyEmailAddress instance);
    partial void UpdatePartyEmailAddress(PartyEmailAddress instance);
    partial void DeletePartyEmailAddress(PartyEmailAddress instance);
    partial void InsertPartyPhone(PartyPhone instance);
    partial void UpdatePartyPhone(PartyPhone instance);
    partial void DeletePartyPhone(PartyPhone instance);
    partial void InsertPartyRating(PartyRating instance);
    partial void UpdatePartyRating(PartyRating instance);
    partial void DeletePartyRating(PartyRating instance);
    partial void InsertPartyRatingThread(PartyRatingThread instance);
    partial void UpdatePartyRatingThread(PartyRatingThread instance);
    partial void DeletePartyRatingThread(PartyRatingThread instance);
    partial void InsertPartyType(PartyType instance);
    partial void UpdatePartyType(PartyType instance);
    partial void DeletePartyType(PartyType instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPermissionType(PermissionType instance);
    partial void UpdatePermissionType(PermissionType instance);
    partial void DeletePermissionType(PermissionType instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertPriceChart(PriceChart instance);
    partial void UpdatePriceChart(PriceChart instance);
    partial void DeletePriceChart(PriceChart instance);
    partial void InsertPriceChartItem(PriceChartItem instance);
    partial void UpdatePriceChartItem(PriceChartItem instance);
    partial void DeletePriceChartItem(PriceChartItem instance);
    partial void InsertPriceChartItemReq(PriceChartItemReq instance);
    partial void UpdatePriceChartItemReq(PriceChartItemReq instance);
    partial void DeletePriceChartItemReq(PriceChartItemReq instance);
    partial void InsertPriceReq(PriceReq instance);
    partial void UpdatePriceReq(PriceReq instance);
    partial void DeletePriceReq(PriceReq instance);
    partial void InsertPricingUnit(PricingUnit instance);
    partial void UpdatePricingUnit(PricingUnit instance);
    partial void DeletePricingUnit(PricingUnit instance);
    partial void InsertRequirement(Requirement instance);
    partial void UpdateRequirement(Requirement instance);
    partial void DeleteRequirement(Requirement instance);
    partial void InsertRequirementType(RequirementType instance);
    partial void UpdateRequirementType(RequirementType instance);
    partial void DeleteRequirementType(RequirementType instance);
    partial void InsertServiceProvider(ServiceProvider instance);
    partial void UpdateServiceProvider(ServiceProvider instance);
    partial void DeleteServiceProvider(ServiceProvider instance);
    partial void InsertServiceProviderApproval(ServiceProviderApproval instance);
    partial void UpdateServiceProviderApproval(ServiceProviderApproval instance);
    partial void DeleteServiceProviderApproval(ServiceProviderApproval instance);
    partial void InsertServiceProviderBlacklist(ServiceProviderBlacklist instance);
    partial void UpdateServiceProviderBlacklist(ServiceProviderBlacklist instance);
    partial void DeleteServiceProviderBlacklist(ServiceProviderBlacklist instance);
    partial void InsertServiceProviderCoverArea(ServiceProviderCoverArea instance);
    partial void UpdateServiceProviderCoverArea(ServiceProviderCoverArea instance);
    partial void DeleteServiceProviderCoverArea(ServiceProviderCoverArea instance);
    partial void InsertServiceProviderFee(ServiceProviderFee instance);
    partial void UpdateServiceProviderFee(ServiceProviderFee instance);
    partial void DeleteServiceProviderFee(ServiceProviderFee instance);
    partial void InsertServiceProviderFeeReq(ServiceProviderFeeReq instance);
    partial void UpdateServiceProviderFeeReq(ServiceProviderFeeReq instance);
    partial void DeleteServiceProviderFeeReq(ServiceProviderFeeReq instance);
    partial void InsertServiceProviderSchedule(ServiceProviderSchedule instance);
    partial void UpdateServiceProviderSchedule(ServiceProviderSchedule instance);
    partial void DeleteServiceProviderSchedule(ServiceProviderSchedule instance);
    partial void InsertSmokeStatus(SmokeStatus instance);
    partial void UpdateSmokeStatus(SmokeStatus instance);
    partial void DeleteSmokeStatus(SmokeStatus instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertSubmissionType(SubmissionType instance);
    partial void UpdateSubmissionType(SubmissionType instance);
    partial void DeleteSubmissionType(SubmissionType instance);
    partial void InsertSurchargeType(SurchargeType instance);
    partial void UpdateSurchargeType(SurchargeType instance);
    partial void DeleteSurchargeType(SurchargeType instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    partial void InsertVersion(Version instance);
    partial void UpdateVersion(Version instance);
    partial void DeleteVersion(Version instance);
    partial void InsertZipCode(ZipCode instance);
    partial void UpdateZipCode(ZipCode instance);
    partial void DeleteZipCode(ZipCode instance);
    #endregion
		
		public EntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountPayable> AccountPayables
		{
			get
			{
				return this.GetTable<AccountPayable>();
			}
		}
		
		public System.Data.Linq.Table<AccountPayableDetail> AccountPayableDetails
		{
			get
			{
				return this.GetTable<AccountPayableDetail>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<Agency> Agencies
		{
			get
			{
				return this.GetTable<Agency>();
			}
		}
		
		public System.Data.Linq.Table<AgencyFavouriteList> AgencyFavouriteLists
		{
			get
			{
				return this.GetTable<AgencyFavouriteList>();
			}
		}
		
		public System.Data.Linq.Table<AgencyInsurance> AgencyInsurances
		{
			get
			{
				return this.GetTable<AgencyInsurance>();
			}
		}
		
		public System.Data.Linq.Table<Agent> Agents
		{
			get
			{
				return this.GetTable<Agent>();
			}
		}
		
		public System.Data.Linq.Table<AgentFavouriteList> AgentFavouriteLists
		{
			get
			{
				return this.GetTable<AgentFavouriteList>();
			}
		}
		
		public System.Data.Linq.Table<AgentInsurance> AgentInsurances
		{
			get
			{
				return this.GetTable<AgentInsurance>();
			}
		}
		
		public System.Data.Linq.Table<Applicant> Applicants
		{
			get
			{
				return this.GetTable<Applicant>();
			}
		}
		
		public System.Data.Linq.Table<ApplicantAddress> ApplicantAddresses
		{
			get
			{
				return this.GetTable<ApplicantAddress>();
			}
		}
		
		public System.Data.Linq.Table<ApplicantEmailAddress> ApplicantEmailAddresses
		{
			get
			{
				return this.GetTable<ApplicantEmailAddress>();
			}
		}
		
		public System.Data.Linq.Table<ApplicantPhone> ApplicantPhones
		{
			get
			{
				return this.GetTable<ApplicantPhone>();
			}
		}
		
		public System.Data.Linq.Table<ApprovalStatus> ApprovalStatus
		{
			get
			{
				return this.GetTable<ApprovalStatus>();
			}
		}
		
		public System.Data.Linq.Table<BillingCompany> BillingCompanies
		{
			get
			{
				return this.GetTable<BillingCompany>();
			}
		}
		
		public System.Data.Linq.Table<BillingInformation> BillingInformations
		{
			get
			{
				return this.GetTable<BillingInformation>();
			}
		}
		
		public System.Data.Linq.Table<Configuration> Configurations
		{
			get
			{
				return this.GetTable<Configuration>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Credentialing> Credentialings
		{
			get
			{
				return this.GetTable<Credentialing>();
			}
		}
		
		public System.Data.Linq.Table<CredentialingStatus> CredentialingStatus
		{
			get
			{
				return this.GetTable<CredentialingStatus>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<DocumentClassifier> DocumentClassifiers
		{
			get
			{
				return this.GetTable<DocumentClassifier>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFormat> DocumentFormats
		{
			get
			{
				return this.GetTable<DocumentFormat>();
			}
		}
		
		public System.Data.Linq.Table<DocumentType> DocumentTypes
		{
			get
			{
				return this.GetTable<DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<EmailFormat> EmailFormats
		{
			get
			{
				return this.GetTable<EmailFormat>();
			}
		}
		
		public System.Data.Linq.Table<EmailType> EmailTypes
		{
			get
			{
				return this.GetTable<EmailType>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeStatus> EmployeeStatus
		{
			get
			{
				return this.GetTable<EmployeeStatus>();
			}
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<FeeLevel> FeeLevels
		{
			get
			{
				return this.GetTable<FeeLevel>();
			}
		}
		
		public System.Data.Linq.Table<FeeLevelItem> FeeLevelItems
		{
			get
			{
				return this.GetTable<FeeLevelItem>();
			}
		}
		
		public System.Data.Linq.Table<FeeLevelItemReq> FeeLevelItemReqs
		{
			get
			{
				return this.GetTable<FeeLevelItemReq>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<GeoSurcharge> GeoSurcharges
		{
			get
			{
				return this.GetTable<GeoSurcharge>();
			}
		}
		
		public System.Data.Linq.Table<GovIDType> GovIDTypes
		{
			get
			{
				return this.GetTable<GovIDType>();
			}
		}
		
		public System.Data.Linq.Table<IncompleteOrder> IncompleteOrders
		{
			get
			{
				return this.GetTable<IncompleteOrder>();
			}
		}
		
		public System.Data.Linq.Table<IncompleteOrderDocument> IncompleteOrderDocuments
		{
			get
			{
				return this.GetTable<IncompleteOrderDocument>();
			}
		}
		
		public System.Data.Linq.Table<IncompleteOrderDocumentItem> IncompleteOrderDocumentItems
		{
			get
			{
				return this.GetTable<IncompleteOrderDocumentItem>();
			}
		}
		
		public System.Data.Linq.Table<IncompleteOrderRequirement> IncompleteOrderRequirements
		{
			get
			{
				return this.GetTable<IncompleteOrderRequirement>();
			}
		}
		
		public System.Data.Linq.Table<IncompleteOrderSchedule> IncompleteOrderSchedules
		{
			get
			{
				return this.GetTable<IncompleteOrderSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Insurance> Insurances
		{
			get
			{
				return this.GetTable<Insurance>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceForm> InsuranceForms
		{
			get
			{
				return this.GetTable<InsuranceForm>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceLab> InsuranceLabs
		{
			get
			{
				return this.GetTable<InsuranceLab>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceLocation> InsuranceLocations
		{
			get
			{
				return this.GetTable<InsuranceLocation>();
			}
		}
		
		public System.Data.Linq.Table<InsurancePartner> InsurancePartners
		{
			get
			{
				return this.GetTable<InsurancePartner>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceProductType> InsuranceProductTypes
		{
			get
			{
				return this.GetTable<InsuranceProductType>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceProductTypeRequirement> InsuranceProductTypeRequirements
		{
			get
			{
				return this.GetTable<InsuranceProductTypeRequirement>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceProductTypeRequirementColumn> InsuranceProductTypeRequirementColumns
		{
			get
			{
				return this.GetTable<InsuranceProductTypeRequirementColumn>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceProductTypeRequirementCommand> InsuranceProductTypeRequirementCommands
		{
			get
			{
				return this.GetTable<InsuranceProductTypeRequirementCommand>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceProductTypeRequirementRow> InsuranceProductTypeRequirementRows
		{
			get
			{
				return this.GetTable<InsuranceProductTypeRequirementRow>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<InvoicePayment> InvoicePayments
		{
			get
			{
				return this.GetTable<InvoicePayment>();
			}
		}
		
		public System.Data.Linq.Table<Lab> Labs
		{
			get
			{
				return this.GetTable<Lab>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<OfficeNote> OfficeNotes
		{
			get
			{
				return this.GetTable<OfficeNote>();
			}
		}
		
		public System.Data.Linq.Table<OfficeNoteCategory> OfficeNoteCategories
		{
			get
			{
				return this.GetTable<OfficeNoteCategory>();
			}
		}
		
		public System.Data.Linq.Table<OfficeNoteGroupNotified> OfficeNoteGroupNotifieds
		{
			get
			{
				return this.GetTable<OfficeNoteGroupNotified>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderAssignment> OrderAssignments
		{
			get
			{
				return this.GetTable<OrderAssignment>();
			}
		}
		
		public System.Data.Linq.Table<OrderAssignmentFee> OrderAssignmentFees
		{
			get
			{
				return this.GetTable<OrderAssignmentFee>();
			}
		}
		
		public System.Data.Linq.Table<OrderAssignmentReq> OrderAssignmentReqs
		{
			get
			{
				return this.GetTable<OrderAssignmentReq>();
			}
		}
		
		public System.Data.Linq.Table<OrderAssignmentStatus> OrderAssignmentStatus
		{
			get
			{
				return this.GetTable<OrderAssignmentStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrderAssignmentStatusHistory> OrderAssignmentStatusHistories
		{
			get
			{
				return this.GetTable<OrderAssignmentStatusHistory>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocument> OrderDocuments
		{
			get
			{
				return this.GetTable<OrderDocument>();
			}
		}
		
		public System.Data.Linq.Table<OrderingParty> OrderingParties
		{
			get
			{
				return this.GetTable<OrderingParty>();
			}
		}
		
		public System.Data.Linq.Table<OrderingPartyAgency> OrderingPartyAgencies
		{
			get
			{
				return this.GetTable<OrderingPartyAgency>();
			}
		}
		
		public System.Data.Linq.Table<OrderingPartyAgent> OrderingPartyAgents
		{
			get
			{
				return this.GetTable<OrderingPartyAgent>();
			}
		}
		
		public System.Data.Linq.Table<OrderingPartyInsurance> OrderingPartyInsurances
		{
			get
			{
				return this.GetTable<OrderingPartyInsurance>();
			}
		}
		
		public System.Data.Linq.Table<OrderingPartyUser> OrderingPartyUsers
		{
			get
			{
				return this.GetTable<OrderingPartyUser>();
			}
		}
		
		public System.Data.Linq.Table<OrderPaperworkStatus> OrderPaperworkStatus
		{
			get
			{
				return this.GetTable<OrderPaperworkStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrderPaperworkStatusHistory> OrderPaperworkStatusHistories
		{
			get
			{
				return this.GetTable<OrderPaperworkStatusHistory>();
			}
		}
		
		public System.Data.Linq.Table<OrderPriority> OrderPriorities
		{
			get
			{
				return this.GetTable<OrderPriority>();
			}
		}
		
		public System.Data.Linq.Table<OrderRelative> OrderRelatives
		{
			get
			{
				return this.GetTable<OrderRelative>();
			}
		}
		
		public System.Data.Linq.Table<OrderRequirement> OrderRequirements
		{
			get
			{
				return this.GetTable<OrderRequirement>();
			}
		}
		
		public System.Data.Linq.Table<OrderSchedule> OrderSchedules
		{
			get
			{
				return this.GetTable<OrderSchedule>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatusHistory> OrderStatusHistories
		{
			get
			{
				return this.GetTable<OrderStatusHistory>();
			}
		}
		
		public System.Data.Linq.Table<OrderSurcharge> OrderSurcharges
		{
			get
			{
				return this.GetTable<OrderSurcharge>();
			}
		}
		
		public System.Data.Linq.Table<OrderType> OrderTypes
		{
			get
			{
				return this.GetTable<OrderType>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<Partner> Partners
		{
			get
			{
				return this.GetTable<Partner>();
			}
		}
		
		public System.Data.Linq.Table<Party> Parties
		{
			get
			{
				return this.GetTable<Party>();
			}
		}
		
		public System.Data.Linq.Table<PartyAddress> PartyAddresses
		{
			get
			{
				return this.GetTable<PartyAddress>();
			}
		}
		
		public System.Data.Linq.Table<PartyContact> PartyContacts
		{
			get
			{
				return this.GetTable<PartyContact>();
			}
		}
		
		public System.Data.Linq.Table<PartyEmailAddress> PartyEmailAddresses
		{
			get
			{
				return this.GetTable<PartyEmailAddress>();
			}
		}
		
		public System.Data.Linq.Table<PartyPhone> PartyPhones
		{
			get
			{
				return this.GetTable<PartyPhone>();
			}
		}
		
		public System.Data.Linq.Table<PartyRating> PartyRatings
		{
			get
			{
				return this.GetTable<PartyRating>();
			}
		}
		
		public System.Data.Linq.Table<PartyRatingThread> PartyRatingThreads
		{
			get
			{
				return this.GetTable<PartyRatingThread>();
			}
		}
		
		public System.Data.Linq.Table<PartyType> PartyTypes
		{
			get
			{
				return this.GetTable<PartyType>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PermissionType> PermissionTypes
		{
			get
			{
				return this.GetTable<PermissionType>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<PriceChart> PriceCharts
		{
			get
			{
				return this.GetTable<PriceChart>();
			}
		}
		
		public System.Data.Linq.Table<PriceChartItem> PriceChartItems
		{
			get
			{
				return this.GetTable<PriceChartItem>();
			}
		}
		
		public System.Data.Linq.Table<PriceChartItemReq> PriceChartItemReqs
		{
			get
			{
				return this.GetTable<PriceChartItemReq>();
			}
		}
		
		public System.Data.Linq.Table<PriceReq> PriceReqs
		{
			get
			{
				return this.GetTable<PriceReq>();
			}
		}
		
		public System.Data.Linq.Table<PricingUnit> PricingUnits
		{
			get
			{
				return this.GetTable<PricingUnit>();
			}
		}
		
		public System.Data.Linq.Table<Requirement> Requirements
		{
			get
			{
				return this.GetTable<Requirement>();
			}
		}
		
		public System.Data.Linq.Table<RequirementType> RequirementTypes
		{
			get
			{
				return this.GetTable<RequirementType>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProvider> ServiceProviders
		{
			get
			{
				return this.GetTable<ServiceProvider>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProviderApproval> ServiceProviderApprovals
		{
			get
			{
				return this.GetTable<ServiceProviderApproval>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProviderBlacklist> ServiceProviderBlacklists
		{
			get
			{
				return this.GetTable<ServiceProviderBlacklist>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProviderCoverArea> ServiceProviderCoverAreas
		{
			get
			{
				return this.GetTable<ServiceProviderCoverArea>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProviderFee> ServiceProviderFees
		{
			get
			{
				return this.GetTable<ServiceProviderFee>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProviderFeeReq> ServiceProviderFeeReqs
		{
			get
			{
				return this.GetTable<ServiceProviderFeeReq>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProviderSchedule> ServiceProviderSchedules
		{
			get
			{
				return this.GetTable<ServiceProviderSchedule>();
			}
		}
		
		public System.Data.Linq.Table<SmokeStatus> SmokeStatus
		{
			get
			{
				return this.GetTable<SmokeStatus>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<SubmissionType> SubmissionTypes
		{
			get
			{
				return this.GetTable<SubmissionType>();
			}
		}
		
		public System.Data.Linq.Table<SurchargeType> SurchargeTypes
		{
			get
			{
				return this.GetTable<SurchargeType>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		public System.Data.Linq.Table<Version> Versions
		{
			get
			{
				return this.GetTable<Version>();
			}
		}
		
		public System.Data.Linq.Table<ZipCode> ZipCodes
		{
			get
			{
				return this.GetTable<ZipCode>();
			}
		}
		
		[Function(Name="dbo.fn_diagramobjects", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.SMM_CheckExists", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> SMM_CheckExists([Parameter(DbType="Int")] System.Nullable<int> objType, [Parameter(DbType="VarChar(80)")] string objName, [Parameter(DbType="VarChar(80)")] string tableName)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objType, objName, tableName).ReturnValue));
		}
		
		[Function(Name="dbo.sp_alterdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_alterdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_creatediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_creatediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_dropdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_dropdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramdefinitionResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_renamediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_renamediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="NVarChar(128)")] string new_diagramname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.AccountPayable")]
	public partial class AccountPayable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _OrderAssignmentID;
		
		private string _CheckNumber;
		
		private System.DateTime _CheckDate;
		
		private decimal _AmountPaid;
		
		private decimal _KitPaid;
		
		private System.Nullable<decimal> _DiscountAmount;
		
		private System.Nullable<double> _DiscountPercent;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<OrderAssignment> _OrderAssignment;
		
		private EntitySet<AccountPayableDetail> _AccountPayableDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderAssignmentIDChanging(System.Guid value);
    partial void OnOrderAssignmentIDChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnCheckDateChanging(System.DateTime value);
    partial void OnCheckDateChanged();
    partial void OnAmountPaidChanging(decimal value);
    partial void OnAmountPaidChanged();
    partial void OnKitPaidChanging(decimal value);
    partial void OnKitPaidChanged();
    partial void OnDiscountAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountPercentChanging(System.Nullable<double> value);
    partial void OnDiscountPercentChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public AccountPayable()
		{
			this._OrderAssignment = default(EntityRef<OrderAssignment>);
			this._AccountPayableDetails = new EntitySet<AccountPayableDetail>(new Action<AccountPayableDetail>(this.attach_AccountPayableDetails), new Action<AccountPayableDetail>(this.detach_AccountPayableDetails));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderAssignmentID
		{
			get
			{
				return this._OrderAssignmentID;
			}
			set
			{
				if ((this._OrderAssignmentID != value))
				{
					if (this._OrderAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentID = value;
					this.SendPropertyChanged("OrderAssignmentID");
					this.OnOrderAssignmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CheckNumber", DbType="NVarChar(10)")]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CheckDate", DbType="DateTime NOT NULL")]
		public System.DateTime CheckDate
		{
			get
			{
				return this._CheckDate;
			}
			set
			{
				if ((this._CheckDate != value))
				{
					this.OnCheckDateChanging(value);
					this.SendPropertyChanging();
					this._CheckDate = value;
					this.SendPropertyChanged("CheckDate");
					this.OnCheckDateChanged();
				}
			}
		}
		
		[Column(Storage="_AmountPaid", DbType="Money NOT NULL")]
		public decimal AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[Column(Storage="_KitPaid", DbType="Money NOT NULL")]
		public decimal KitPaid
		{
			get
			{
				return this._KitPaid;
			}
			set
			{
				if ((this._KitPaid != value))
				{
					this.OnKitPaidChanging(value);
					this.SendPropertyChanging();
					this._KitPaid = value;
					this.SendPropertyChanged("KitPaid");
					this.OnKitPaidChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Money")]
		public System.Nullable<decimal> DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountPercent", DbType="Float")]
		public System.Nullable<double> DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_AccountPayable_OrderAssignment", Storage="_OrderAssignment", ThisKey="OrderAssignmentID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignment OrderAssignment
		{
			get
			{
				return this._OrderAssignment.Entity;
			}
			set
			{
				OrderAssignment previousValue = this._OrderAssignment.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignment.Entity = null;
						previousValue.AccountPayables.Remove(this);
					}
					this._OrderAssignment.Entity = value;
					if ((value != null))
					{
						value.AccountPayables.Add(this);
						this._OrderAssignmentID = value.ID;
					}
					else
					{
						this._OrderAssignmentID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderAssignment");
				}
			}
		}
		
		[Association(Name="FK_AccountPayableDetails_AccountPayable", Storage="_AccountPayableDetails", ThisKey="ID", OtherKey="AccountPayableID", DeleteRule="NO ACTION")]
		public EntitySet<AccountPayableDetail> AccountPayableDetails
		{
			get
			{
				return this._AccountPayableDetails;
			}
			set
			{
				this._AccountPayableDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPayableDetails(AccountPayableDetail entity)
		{
			this.SendPropertyChanging();
			entity.AccountPayable = this;
		}
		
		private void detach_AccountPayableDetails(AccountPayableDetail entity)
		{
			this.SendPropertyChanging();
			entity.AccountPayable = null;
		}
	}
	
	[Table(Name="dbo.AccountPayableDetails")]
	public partial class AccountPayableDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountPayableID;
		
		private System.Guid _OrderAssignmentFeeID;
		
		private decimal _AmountPaid;
		
		private EntityRef<AccountPayable> _AccountPayable;
		
		private EntityRef<OrderAssignmentFee> _OrderAssignmentFee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountPayableIDChanging(int value);
    partial void OnAccountPayableIDChanged();
    partial void OnOrderAssignmentFeeIDChanging(System.Guid value);
    partial void OnOrderAssignmentFeeIDChanged();
    partial void OnAmountPaidChanging(decimal value);
    partial void OnAmountPaidChanged();
    #endregion
		
		public AccountPayableDetail()
		{
			this._AccountPayable = default(EntityRef<AccountPayable>);
			this._OrderAssignmentFee = default(EntityRef<OrderAssignmentFee>);
			OnCreated();
		}
		
		[Column(Storage="_AccountPayableID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccountPayableID
		{
			get
			{
				return this._AccountPayableID;
			}
			set
			{
				if ((this._AccountPayableID != value))
				{
					if (this._AccountPayable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountPayableIDChanging(value);
					this.SendPropertyChanging();
					this._AccountPayableID = value;
					this.SendPropertyChanged("AccountPayableID");
					this.OnAccountPayableIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentFeeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderAssignmentFeeID
		{
			get
			{
				return this._OrderAssignmentFeeID;
			}
			set
			{
				if ((this._OrderAssignmentFeeID != value))
				{
					if (this._OrderAssignmentFee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentFeeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentFeeID = value;
					this.SendPropertyChanged("OrderAssignmentFeeID");
					this.OnOrderAssignmentFeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AmountPaid", DbType="Money NOT NULL")]
		public decimal AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[Association(Name="FK_AccountPayableDetails_AccountPayable", Storage="_AccountPayable", ThisKey="AccountPayableID", OtherKey="ID", IsForeignKey=true)]
		public AccountPayable AccountPayable
		{
			get
			{
				return this._AccountPayable.Entity;
			}
			set
			{
				AccountPayable previousValue = this._AccountPayable.Entity;
				if (((previousValue != value) 
							|| (this._AccountPayable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountPayable.Entity = null;
						previousValue.AccountPayableDetails.Remove(this);
					}
					this._AccountPayable.Entity = value;
					if ((value != null))
					{
						value.AccountPayableDetails.Add(this);
						this._AccountPayableID = value.ID;
					}
					else
					{
						this._AccountPayableID = default(int);
					}
					this.SendPropertyChanged("AccountPayable");
				}
			}
		}
		
		[Association(Name="FK_AccountPayableDetails_OrderAssignmentFee", Storage="_OrderAssignmentFee", ThisKey="OrderAssignmentFeeID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignmentFee OrderAssignmentFee
		{
			get
			{
				return this._OrderAssignmentFee.Entity;
			}
			set
			{
				OrderAssignmentFee previousValue = this._OrderAssignmentFee.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignmentFee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignmentFee.Entity = null;
						previousValue.AccountPayableDetails.Remove(this);
					}
					this._OrderAssignmentFee.Entity = value;
					if ((value != null))
					{
						value.AccountPayableDetails.Add(this);
						this._OrderAssignmentFeeID = value.ID;
					}
					else
					{
						this._OrderAssignmentFeeID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderAssignmentFee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ApplicantAddress> _ApplicantAddresses;
		
		private EntitySet<PartyAddress> _PartyAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AddressType()
		{
			this._ApplicantAddresses = new EntitySet<ApplicantAddress>(new Action<ApplicantAddress>(this.attach_ApplicantAddresses), new Action<ApplicantAddress>(this.detach_ApplicantAddresses));
			this._PartyAddresses = new EntitySet<PartyAddress>(new Action<PartyAddress>(this.attach_PartyAddresses), new Action<PartyAddress>(this.detach_PartyAddresses));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_AddressType", Storage="_ApplicantAddresses", ThisKey="ID", OtherKey="AddressTypeID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantAddress> ApplicantAddresses
		{
			get
			{
				return this._ApplicantAddresses;
			}
			set
			{
				this._ApplicantAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyAddress_AddressType", Storage="_PartyAddresses", ThisKey="ID", OtherKey="AddressTypeID", DeleteRule="NO ACTION")]
		public EntitySet<PartyAddress> PartyAddresses
		{
			get
			{
				return this._PartyAddresses;
			}
			set
			{
				this._PartyAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
		
		private void attach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[Table(Name="dbo.Agency")]
	public partial class Agency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _FullName;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Guid _CreatedBy;
		
		private bool _Inactive;
		
		private bool _IsShared;
		
		private bool _ApprovedBySMM;
		
		private EntitySet<AgencyFavouriteList> _AgencyFavouriteLists;
		
		private EntitySet<AgencyInsurance> _AgencyInsurances;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<OrderingPartyAgency> _OrderingPartyAgencies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnIsSharedChanging(bool value);
    partial void OnIsSharedChanged();
    partial void OnApprovedBySMMChanging(bool value);
    partial void OnApprovedBySMMChanged();
    #endregion
		
		public Agency()
		{
			this._AgencyFavouriteLists = new EntitySet<AgencyFavouriteList>(new Action<AgencyFavouriteList>(this.attach_AgencyFavouriteLists), new Action<AgencyFavouriteList>(this.detach_AgencyFavouriteLists));
			this._AgencyInsurances = new EntitySet<AgencyInsurance>(new Action<AgencyInsurance>(this.attach_AgencyInsurances), new Action<AgencyInsurance>(this.detach_AgencyInsurances));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._OrderingPartyAgencies = new EntitySet<OrderingPartyAgency>(new Action<OrderingPartyAgency>(this.attach_OrderingPartyAgencies), new Action<OrderingPartyAgency>(this.detach_OrderingPartyAgencies));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(400)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(400)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsShared", DbType="Bit NOT NULL")]
		public bool IsShared
		{
			get
			{
				return this._IsShared;
			}
			set
			{
				if ((this._IsShared != value))
				{
					this.OnIsSharedChanging(value);
					this.SendPropertyChanging();
					this._IsShared = value;
					this.SendPropertyChanged("IsShared");
					this.OnIsSharedChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedBySMM", DbType="Bit NOT NULL")]
		public bool ApprovedBySMM
		{
			get
			{
				return this._ApprovedBySMM;
			}
			set
			{
				if ((this._ApprovedBySMM != value))
				{
					this.OnApprovedBySMMChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBySMM = value;
					this.SendPropertyChanged("ApprovedBySMM");
					this.OnApprovedBySMMChanged();
				}
			}
		}
		
		[Association(Name="FK_AgencyFavouriteList_Agency", Storage="_AgencyFavouriteLists", ThisKey="ID", OtherKey="AgencyID", DeleteRule="NO ACTION")]
		public EntitySet<AgencyFavouriteList> AgencyFavouriteLists
		{
			get
			{
				return this._AgencyFavouriteLists;
			}
			set
			{
				this._AgencyFavouriteLists.Assign(value);
			}
		}
		
		[Association(Name="FK_AgencyInsurance_Agency", Storage="_AgencyInsurances", ThisKey="ID", OtherKey="AgencyID", DeleteRule="NO ACTION")]
		public EntitySet<AgencyInsurance> AgencyInsurances
		{
			get
			{
				return this._AgencyInsurances;
			}
			set
			{
				this._AgencyInsurances.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_Agency", Storage="_Orders", ThisKey="ID", OtherKey="AgencyID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyAgency_Agency", Storage="_OrderingPartyAgencies", ThisKey="ID", OtherKey="AgencyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyAgency> OrderingPartyAgencies
		{
			get
			{
				return this._OrderingPartyAgencies;
			}
			set
			{
				this._OrderingPartyAgencies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgencyFavouriteLists(AgencyFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.Agency = this;
		}
		
		private void detach_AgencyFavouriteLists(AgencyFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.Agency = null;
		}
		
		private void attach_AgencyInsurances(AgencyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Agency = this;
		}
		
		private void detach_AgencyInsurances(AgencyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Agency = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Agency = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Agency = null;
		}
		
		private void attach_OrderingPartyAgencies(OrderingPartyAgency entity)
		{
			this.SendPropertyChanging();
			entity.Agency = this;
		}
		
		private void detach_OrderingPartyAgencies(OrderingPartyAgency entity)
		{
			this.SendPropertyChanging();
			entity.Agency = null;
		}
	}
	
	[Table(Name="dbo.AgencyFavouriteList")]
	public partial class AgencyFavouriteList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AgencyID;
		
		private System.Guid _OrderingPartyUserID;
		
		private EntityRef<Agency> _Agency;
		
		private EntityRef<OrderingPartyUser> _OrderingPartyUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgencyIDChanging(System.Guid value);
    partial void OnAgencyIDChanged();
    partial void OnOrderingPartyUserIDChanging(System.Guid value);
    partial void OnOrderingPartyUserIDChanged();
    #endregion
		
		public AgencyFavouriteList()
		{
			this._Agency = default(EntityRef<Agency>);
			this._OrderingPartyUser = default(EntityRef<OrderingPartyUser>);
			OnCreated();
		}
		
		[Column(Storage="_AgencyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					if (this._Agency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderingPartyUserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderingPartyUserID
		{
			get
			{
				return this._OrderingPartyUserID;
			}
			set
			{
				if ((this._OrderingPartyUserID != value))
				{
					if (this._OrderingPartyUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyUserID = value;
					this.SendPropertyChanged("OrderingPartyUserID");
					this.OnOrderingPartyUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_AgencyFavouriteList_Agency", Storage="_Agency", ThisKey="AgencyID", OtherKey="ID", IsForeignKey=true)]
		public Agency Agency
		{
			get
			{
				return this._Agency.Entity;
			}
			set
			{
				Agency previousValue = this._Agency.Entity;
				if (((previousValue != value) 
							|| (this._Agency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agency.Entity = null;
						previousValue.AgencyFavouriteLists.Remove(this);
					}
					this._Agency.Entity = value;
					if ((value != null))
					{
						value.AgencyFavouriteLists.Add(this);
						this._AgencyID = value.ID;
					}
					else
					{
						this._AgencyID = default(System.Guid);
					}
					this.SendPropertyChanged("Agency");
				}
			}
		}
		
		[Association(Name="FK_AgencyFavouriteList_OrderingPartyUser", Storage="_OrderingPartyUser", ThisKey="OrderingPartyUserID", OtherKey="ID", IsForeignKey=true)]
		public OrderingPartyUser OrderingPartyUser
		{
			get
			{
				return this._OrderingPartyUser.Entity;
			}
			set
			{
				OrderingPartyUser previousValue = this._OrderingPartyUser.Entity;
				if (((previousValue != value) 
							|| (this._OrderingPartyUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingPartyUser.Entity = null;
						previousValue.AgencyFavouriteLists.Remove(this);
					}
					this._OrderingPartyUser.Entity = value;
					if ((value != null))
					{
						value.AgencyFavouriteLists.Add(this);
						this._OrderingPartyUserID = value.ID;
					}
					else
					{
						this._OrderingPartyUserID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderingPartyUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AgencyInsurance")]
	public partial class AgencyInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AgencyID;
		
		private System.Guid _InsuranceID;
		
		private string _AgencyCode;
		
		private bool _AllowMailingOverwrite;
		
		private EntityRef<Agency> _Agency;
		
		private EntityRef<Insurance> _Insurance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgencyIDChanging(System.Guid value);
    partial void OnAgencyIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnAgencyCodeChanging(string value);
    partial void OnAgencyCodeChanged();
    partial void OnAllowMailingOverwriteChanging(bool value);
    partial void OnAllowMailingOverwriteChanged();
    #endregion
		
		public AgencyInsurance()
		{
			this._Agency = default(EntityRef<Agency>);
			this._Insurance = default(EntityRef<Insurance>);
			OnCreated();
		}
		
		[Column(Storage="_AgencyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					if (this._Agency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyCode", DbType="NVarChar(50)")]
		public string AgencyCode
		{
			get
			{
				return this._AgencyCode;
			}
			set
			{
				if ((this._AgencyCode != value))
				{
					this.OnAgencyCodeChanging(value);
					this.SendPropertyChanging();
					this._AgencyCode = value;
					this.SendPropertyChanged("AgencyCode");
					this.OnAgencyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AllowMailingOverwrite", DbType="Bit NOT NULL")]
		public bool AllowMailingOverwrite
		{
			get
			{
				return this._AllowMailingOverwrite;
			}
			set
			{
				if ((this._AllowMailingOverwrite != value))
				{
					this.OnAllowMailingOverwriteChanging(value);
					this.SendPropertyChanging();
					this._AllowMailingOverwrite = value;
					this.SendPropertyChanged("AllowMailingOverwrite");
					this.OnAllowMailingOverwriteChanged();
				}
			}
		}
		
		[Association(Name="FK_AgencyInsurance_Agency", Storage="_Agency", ThisKey="AgencyID", OtherKey="ID", IsForeignKey=true)]
		public Agency Agency
		{
			get
			{
				return this._Agency.Entity;
			}
			set
			{
				Agency previousValue = this._Agency.Entity;
				if (((previousValue != value) 
							|| (this._Agency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agency.Entity = null;
						previousValue.AgencyInsurances.Remove(this);
					}
					this._Agency.Entity = value;
					if ((value != null))
					{
						value.AgencyInsurances.Add(this);
						this._AgencyID = value.ID;
					}
					else
					{
						this._AgencyID = default(System.Guid);
					}
					this.SendPropertyChanged("Agency");
				}
			}
		}
		
		[Association(Name="FK_AgencyInsurance_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.AgencyInsurances.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.AgencyInsurances.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Agent")]
	public partial class Agent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _FullName;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Guid _CreatedBy;
		
		private bool _IsShared;
		
		private bool _Inactive;
		
		private EntityRef<Person> _Person;
		
		private EntitySet<AgentInsurance> _AgentInsurances;
		
		private EntitySet<AgentFavouriteList> _AgentFavouriteLists;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<OrderingPartyAgent> _OrderingPartyAgents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnIsSharedChanging(bool value);
    partial void OnIsSharedChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public Agent()
		{
			this._Person = default(EntityRef<Person>);
			this._AgentInsurances = new EntitySet<AgentInsurance>(new Action<AgentInsurance>(this.attach_AgentInsurances), new Action<AgentInsurance>(this.detach_AgentInsurances));
			this._AgentFavouriteLists = new EntitySet<AgentFavouriteList>(new Action<AgentFavouriteList>(this.attach_AgentFavouriteLists), new Action<AgentFavouriteList>(this.detach_AgentFavouriteLists));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._OrderingPartyAgents = new EntitySet<OrderingPartyAgent>(new Action<OrderingPartyAgent>(this.attach_OrderingPartyAgents), new Action<OrderingPartyAgent>(this.detach_OrderingPartyAgents));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(400)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(400)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_IsShared", DbType="Bit NOT NULL")]
		public bool IsShared
		{
			get
			{
				return this._IsShared;
			}
			set
			{
				if ((this._IsShared != value))
				{
					this.OnIsSharedChanging(value);
					this.SendPropertyChanging();
					this._IsShared = value;
					this.SendPropertyChanged("IsShared");
					this.OnIsSharedChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_Agent_Person", Storage="_Person", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Agents.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Agents.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_AgentInsurance_Agent", Storage="_AgentInsurances", ThisKey="ID", OtherKey="AgentID", DeleteRule="NO ACTION")]
		public EntitySet<AgentInsurance> AgentInsurances
		{
			get
			{
				return this._AgentInsurances;
			}
			set
			{
				this._AgentInsurances.Assign(value);
			}
		}
		
		[Association(Name="FK_FavouriteList_Agent", Storage="_AgentFavouriteLists", ThisKey="ID", OtherKey="AgentID", DeleteRule="NO ACTION")]
		public EntitySet<AgentFavouriteList> AgentFavouriteLists
		{
			get
			{
				return this._AgentFavouriteLists;
			}
			set
			{
				this._AgentFavouriteLists.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_Agent", Storage="_Orders", ThisKey="ID", OtherKey="AgentID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyAgent_Agent", Storage="_OrderingPartyAgents", ThisKey="ID", OtherKey="AgentID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyAgent> OrderingPartyAgents
		{
			get
			{
				return this._OrderingPartyAgents;
			}
			set
			{
				this._OrderingPartyAgents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgentInsurances(AgentInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Agent = this;
		}
		
		private void detach_AgentInsurances(AgentInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Agent = null;
		}
		
		private void attach_AgentFavouriteLists(AgentFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.Agent = this;
		}
		
		private void detach_AgentFavouriteLists(AgentFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.Agent = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Agent = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Agent = null;
		}
		
		private void attach_OrderingPartyAgents(OrderingPartyAgent entity)
		{
			this.SendPropertyChanging();
			entity.Agent = this;
		}
		
		private void detach_OrderingPartyAgents(OrderingPartyAgent entity)
		{
			this.SendPropertyChanging();
			entity.Agent = null;
		}
	}
	
	[Table(Name="dbo.AgentFavouriteList")]
	public partial class AgentFavouriteList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AgentID;
		
		private System.Guid _OrderingPartyUserID;
		
		private EntityRef<Agent> _Agent;
		
		private EntityRef<OrderingPartyUser> _OrderingPartyUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgentIDChanging(System.Guid value);
    partial void OnAgentIDChanged();
    partial void OnOrderingPartyUserIDChanging(System.Guid value);
    partial void OnOrderingPartyUserIDChanged();
    #endregion
		
		public AgentFavouriteList()
		{
			this._Agent = default(EntityRef<Agent>);
			this._OrderingPartyUser = default(EntityRef<OrderingPartyUser>);
			OnCreated();
		}
		
		[Column(Storage="_AgentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._Agent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderingPartyUserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderingPartyUserID
		{
			get
			{
				return this._OrderingPartyUserID;
			}
			set
			{
				if ((this._OrderingPartyUserID != value))
				{
					if (this._OrderingPartyUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyUserIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyUserID = value;
					this.SendPropertyChanged("OrderingPartyUserID");
					this.OnOrderingPartyUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_FavouriteList_Agent", Storage="_Agent", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public Agent Agent
		{
			get
			{
				return this._Agent.Entity;
			}
			set
			{
				Agent previousValue = this._Agent.Entity;
				if (((previousValue != value) 
							|| (this._Agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agent.Entity = null;
						previousValue.AgentFavouriteLists.Remove(this);
					}
					this._Agent.Entity = value;
					if ((value != null))
					{
						value.AgentFavouriteLists.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(System.Guid);
					}
					this.SendPropertyChanged("Agent");
				}
			}
		}
		
		[Association(Name="FK_FavouriteList_OrderingPartyUser", Storage="_OrderingPartyUser", ThisKey="OrderingPartyUserID", OtherKey="ID", IsForeignKey=true)]
		public OrderingPartyUser OrderingPartyUser
		{
			get
			{
				return this._OrderingPartyUser.Entity;
			}
			set
			{
				OrderingPartyUser previousValue = this._OrderingPartyUser.Entity;
				if (((previousValue != value) 
							|| (this._OrderingPartyUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingPartyUser.Entity = null;
						previousValue.AgentFavouriteLists.Remove(this);
					}
					this._OrderingPartyUser.Entity = value;
					if ((value != null))
					{
						value.AgentFavouriteLists.Add(this);
						this._OrderingPartyUserID = value.ID;
					}
					else
					{
						this._OrderingPartyUserID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderingPartyUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AgentInsurance")]
	public partial class AgentInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AgentID;
		
		private System.Guid _InsuranceID;
		
		private string _AgentCode;
		
		private EntityRef<Agent> _Agent;
		
		private EntityRef<Insurance> _Insurance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgentIDChanging(System.Guid value);
    partial void OnAgentIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnAgentCodeChanging(string value);
    partial void OnAgentCodeChanged();
    #endregion
		
		public AgentInsurance()
		{
			this._Agent = default(EntityRef<Agent>);
			this._Insurance = default(EntityRef<Insurance>);
			OnCreated();
		}
		
		[Column(Storage="_AgentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._Agent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentCode", DbType="NVarChar(50)")]
		public string AgentCode
		{
			get
			{
				return this._AgentCode;
			}
			set
			{
				if ((this._AgentCode != value))
				{
					this.OnAgentCodeChanging(value);
					this.SendPropertyChanging();
					this._AgentCode = value;
					this.SendPropertyChanged("AgentCode");
					this.OnAgentCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_AgentInsurance_Agent", Storage="_Agent", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public Agent Agent
		{
			get
			{
				return this._Agent.Entity;
			}
			set
			{
				Agent previousValue = this._Agent.Entity;
				if (((previousValue != value) 
							|| (this._Agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agent.Entity = null;
						previousValue.AgentInsurances.Remove(this);
					}
					this._Agent.Entity = value;
					if ((value != null))
					{
						value.AgentInsurances.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(System.Guid);
					}
					this.SendPropertyChanged("Agent");
				}
			}
		}
		
		[Association(Name="FK_AgentInsurance_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.AgentInsurances.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.AgentInsurances.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Applicant")]
	public partial class Applicant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _GovID;
		
		private System.Nullable<int> _GovIDTypeID;
		
		private string _Prefix;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Suffix;
		
		private string _NickName;
		
		private string _Title;
		
		private System.Nullable<int> _GenderID;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<bool> _DOBEstimated;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<bool> _FaceToFace;
		
		private System.Nullable<bool> _FemaleExaminer;
		
		private System.Nullable<int> _SmokeStatusID;
		
		private EntityRef<SmokeStatus> _SmokeStatus;
		
		private EntitySet<ApplicantAddress> _ApplicantAddresses;
		
		private EntitySet<ApplicantEmailAddress> _ApplicantEmailAddresses;
		
		private EntitySet<ApplicantPhone> _ApplicantPhones;
		
		private EntitySet<IncompleteOrder> _IncompleteOrders;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGovIDChanging(string value);
    partial void OnGovIDChanged();
    partial void OnGovIDTypeIDChanging(System.Nullable<int> value);
    partial void OnGovIDTypeIDChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGenderIDChanging(System.Nullable<int> value);
    partial void OnGenderIDChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnDOBEstimatedChanging(System.Nullable<bool> value);
    partial void OnDOBEstimatedChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnFaceToFaceChanging(System.Nullable<bool> value);
    partial void OnFaceToFaceChanged();
    partial void OnFemaleExaminerChanging(System.Nullable<bool> value);
    partial void OnFemaleExaminerChanged();
    partial void OnSmokeStatusIDChanging(System.Nullable<int> value);
    partial void OnSmokeStatusIDChanged();
    #endregion
		
		public Applicant()
		{
			this._SmokeStatus = default(EntityRef<SmokeStatus>);
			this._ApplicantAddresses = new EntitySet<ApplicantAddress>(new Action<ApplicantAddress>(this.attach_ApplicantAddresses), new Action<ApplicantAddress>(this.detach_ApplicantAddresses));
			this._ApplicantEmailAddresses = new EntitySet<ApplicantEmailAddress>(new Action<ApplicantEmailAddress>(this.attach_ApplicantEmailAddresses), new Action<ApplicantEmailAddress>(this.detach_ApplicantEmailAddresses));
			this._ApplicantPhones = new EntitySet<ApplicantPhone>(new Action<ApplicantPhone>(this.attach_ApplicantPhones), new Action<ApplicantPhone>(this.detach_ApplicantPhones));
			this._IncompleteOrders = new EntitySet<IncompleteOrder>(new Action<IncompleteOrder>(this.attach_IncompleteOrders), new Action<IncompleteOrder>(this.detach_IncompleteOrders));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_GovID", DbType="NVarChar(15)")]
		public string GovID
		{
			get
			{
				return this._GovID;
			}
			set
			{
				if ((this._GovID != value))
				{
					this.OnGovIDChanging(value);
					this.SendPropertyChanging();
					this._GovID = value;
					this.SendPropertyChanged("GovID");
					this.OnGovIDChanged();
				}
			}
		}
		
		[Column(Storage="_GovIDTypeID", DbType="Int")]
		public System.Nullable<int> GovIDTypeID
		{
			get
			{
				return this._GovIDTypeID;
			}
			set
			{
				if ((this._GovIDTypeID != value))
				{
					this.OnGovIDTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GovIDTypeID = value;
					this.SendPropertyChanged("GovIDTypeID");
					this.OnGovIDTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Prefix", DbType="NVarChar(5)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(25)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NVarChar(15)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(25)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Suffix", DbType="NVarChar(15)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="NVarChar(50)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GenderID", DbType="Int")]
		public System.Nullable<int> GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_DOBEstimated", DbType="Bit")]
		public System.Nullable<bool> DOBEstimated
		{
			get
			{
				return this._DOBEstimated;
			}
			set
			{
				if ((this._DOBEstimated != value))
				{
					this.OnDOBEstimatedChanging(value);
					this.SendPropertyChanging();
					this._DOBEstimated = value;
					this.SendPropertyChanged("DOBEstimated");
					this.OnDOBEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FaceToFace", DbType="Bit")]
		public System.Nullable<bool> FaceToFace
		{
			get
			{
				return this._FaceToFace;
			}
			set
			{
				if ((this._FaceToFace != value))
				{
					this.OnFaceToFaceChanging(value);
					this.SendPropertyChanging();
					this._FaceToFace = value;
					this.SendPropertyChanged("FaceToFace");
					this.OnFaceToFaceChanged();
				}
			}
		}
		
		[Column(Storage="_FemaleExaminer", DbType="Bit")]
		public System.Nullable<bool> FemaleExaminer
		{
			get
			{
				return this._FemaleExaminer;
			}
			set
			{
				if ((this._FemaleExaminer != value))
				{
					this.OnFemaleExaminerChanging(value);
					this.SendPropertyChanging();
					this._FemaleExaminer = value;
					this.SendPropertyChanged("FemaleExaminer");
					this.OnFemaleExaminerChanged();
				}
			}
		}
		
		[Column(Storage="_SmokeStatusID", DbType="Int")]
		public System.Nullable<int> SmokeStatusID
		{
			get
			{
				return this._SmokeStatusID;
			}
			set
			{
				if ((this._SmokeStatusID != value))
				{
					if (this._SmokeStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmokeStatusIDChanging(value);
					this.SendPropertyChanging();
					this._SmokeStatusID = value;
					this.SendPropertyChanged("SmokeStatusID");
					this.OnSmokeStatusIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Applicant_SmokeStatus", Storage="_SmokeStatus", ThisKey="SmokeStatusID", OtherKey="ID", IsForeignKey=true)]
		public SmokeStatus SmokeStatus
		{
			get
			{
				return this._SmokeStatus.Entity;
			}
			set
			{
				SmokeStatus previousValue = this._SmokeStatus.Entity;
				if (((previousValue != value) 
							|| (this._SmokeStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SmokeStatus.Entity = null;
						previousValue.Applicants.Remove(this);
					}
					this._SmokeStatus.Entity = value;
					if ((value != null))
					{
						value.Applicants.Add(this);
						this._SmokeStatusID = value.ID;
					}
					else
					{
						this._SmokeStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SmokeStatus");
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_Applicant", Storage="_ApplicantAddresses", ThisKey="ID", OtherKey="ApplicantID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantAddress> ApplicantAddresses
		{
			get
			{
				return this._ApplicantAddresses;
			}
			set
			{
				this._ApplicantAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_ApplicantEmailAddress_Applicant", Storage="_ApplicantEmailAddresses", ThisKey="ID", OtherKey="ApplicantID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantEmailAddress> ApplicantEmailAddresses
		{
			get
			{
				return this._ApplicantEmailAddresses;
			}
			set
			{
				this._ApplicantEmailAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_ApplicantPhone_Applicant", Storage="_ApplicantPhones", ThisKey="ID", OtherKey="ApplicantID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantPhone> ApplicantPhones
		{
			get
			{
				return this._ApplicantPhones;
			}
			set
			{
				this._ApplicantPhones.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrder_Applicant", Storage="_IncompleteOrders", ThisKey="ID", OtherKey="ApplicantID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrder> IncompleteOrders
		{
			get
			{
				return this._IncompleteOrders;
			}
			set
			{
				this._IncompleteOrders.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_Applicant", Storage="_Orders", ThisKey="ID", OtherKey="ApplicantID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_ApplicantEmailAddresses(ApplicantEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_ApplicantEmailAddresses(ApplicantEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_ApplicantPhones(ApplicantPhone entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_ApplicantPhones(ApplicantPhone entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_IncompleteOrders(IncompleteOrder entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_IncompleteOrders(IncompleteOrder entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
	}
	
	[Table(Name="dbo.ApplicantAddress")]
	public partial class ApplicantAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _AddressTypeID;
		
		private string _RefByName;
		
		private string _AttentionLine;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _City;
		
		private string _StateOther;
		
		private System.Nullable<int> _StateID;
		
		private string _Zip;
		
		private string _PostalDropCode;
		
		private System.Nullable<int> _CountryID;
		
		private bool _IsPreferred;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _IsValidated;
		
		private bool _PreventOverride;
		
		private bool _Inactive;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Guid _ApplicantID;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAddressTypeIDChanging(System.Nullable<int> value);
    partial void OnAddressTypeIDChanged();
    partial void OnRefByNameChanging(string value);
    partial void OnRefByNameChanged();
    partial void OnAttentionLineChanging(string value);
    partial void OnAttentionLineChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateOtherChanging(string value);
    partial void OnStateOtherChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPostalDropCodeChanging(string value);
    partial void OnPostalDropCodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnIsValidatedChanging(bool value);
    partial void OnIsValidatedChanged();
    partial void OnPreventOverrideChanging(bool value);
    partial void OnPreventOverrideChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnApplicantIDChanging(System.Guid value);
    partial void OnApplicantIDChanged();
    #endregion
		
		public ApplicantAddress()
		{
			this._AddressType = default(EntityRef<AddressType>);
			this._Applicant = default(EntityRef<Applicant>);
			this._Country = default(EntityRef<Country>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeID", DbType="Int")]
		public System.Nullable<int> AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RefByName", DbType="NVarChar(50)")]
		public string RefByName
		{
			get
			{
				return this._RefByName;
			}
			set
			{
				if ((this._RefByName != value))
				{
					this.OnRefByNameChanging(value);
					this.SendPropertyChanging();
					this._RefByName = value;
					this.SendPropertyChanged("RefByName");
					this.OnRefByNameChanged();
				}
			}
		}
		
		[Column(Storage="_AttentionLine", DbType="NVarChar(50)")]
		public string AttentionLine
		{
			get
			{
				return this._AttentionLine;
			}
			set
			{
				if ((this._AttentionLine != value))
				{
					this.OnAttentionLineChanging(value);
					this.SendPropertyChanging();
					this._AttentionLine = value;
					this.SendPropertyChanged("AttentionLine");
					this.OnAttentionLineChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="NVarChar(50)")]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="NVarChar(50)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(35)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_StateOther", DbType="NVarChar(15)")]
		public string StateOther
		{
			get
			{
				return this._StateOther;
			}
			set
			{
				if ((this._StateOther != value))
				{
					this.OnStateOtherChanging(value);
					this.SendPropertyChanging();
					this._StateOther = value;
					this.SendPropertyChanged("StateOther");
					this.OnStateOtherChanged();
				}
			}
		}
		
		[Column(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(5)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_PostalDropCode", DbType="NVarChar(25)")]
		public string PostalDropCode
		{
			get
			{
				return this._PostalDropCode;
			}
			set
			{
				if ((this._PostalDropCode != value))
				{
					this.OnPostalDropCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalDropCode = value;
					this.SendPropertyChanged("PostalDropCode");
					this.OnPostalDropCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsValidated", DbType="Bit NOT NULL")]
		public bool IsValidated
		{
			get
			{
				return this._IsValidated;
			}
			set
			{
				if ((this._IsValidated != value))
				{
					this.OnIsValidatedChanging(value);
					this.SendPropertyChanging();
					this._IsValidated = value;
					this.SendPropertyChanged("IsValidated");
					this.OnIsValidatedChanged();
				}
			}
		}
		
		[Column(Storage="_PreventOverride", DbType="Bit NOT NULL")]
		public bool PreventOverride
		{
			get
			{
				return this._PreventOverride;
			}
			set
			{
				if ((this._PreventOverride != value))
				{
					this.OnPreventOverrideChanging(value);
					this.SendPropertyChanging();
					this._PreventOverride = value;
					this.SendPropertyChanged("PreventOverride");
					this.OnPreventOverrideChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_AddressType", Storage="_AddressType", ThisKey="AddressTypeID", OtherKey="ID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.ApplicantAddresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.ApplicantAddresses.Add(this);
						this._AddressTypeID = value.ID;
					}
					else
					{
						this._AddressTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_Applicant", Storage="_Applicant", ThisKey="ApplicantID", OtherKey="ID", IsForeignKey=true)]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.ApplicantAddresses.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.ApplicantAddresses.Add(this);
						this._ApplicantID = value.ID;
					}
					else
					{
						this._ApplicantID = default(System.Guid);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_Country", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ApplicantAddresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ApplicantAddresses.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_State", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.ApplicantAddresses.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.ApplicantAddresses.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ApplicantEmailAddress")]
	public partial class ApplicantEmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ApplicantID;
		
		private int _EmailTypeID;
		
		private string _AddrLine;
		
		private string _CCAddrLine;
		
		private bool _IsPreferred;
		
		private bool _CatchAll;
		
		private bool _NoAttachment;
		
		private bool _NoJunkMail;
		
		private int _EmailFormatID;
		
		private bool _Inactive;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<EmailFormat> _EmailFormat;
		
		private EntityRef<EmailType> _EmailType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnApplicantIDChanging(System.Guid value);
    partial void OnApplicantIDChanged();
    partial void OnEmailTypeIDChanging(int value);
    partial void OnEmailTypeIDChanged();
    partial void OnAddrLineChanging(string value);
    partial void OnAddrLineChanged();
    partial void OnCCAddrLineChanging(string value);
    partial void OnCCAddrLineChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnCatchAllChanging(bool value);
    partial void OnCatchAllChanged();
    partial void OnNoAttachmentChanging(bool value);
    partial void OnNoAttachmentChanged();
    partial void OnNoJunkMailChanging(bool value);
    partial void OnNoJunkMailChanged();
    partial void OnEmailFormatIDChanging(int value);
    partial void OnEmailFormatIDChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public ApplicantEmailAddress()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._EmailFormat = default(EntityRef<EmailFormat>);
			this._EmailType = default(EntityRef<EmailType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailTypeID", DbType="Int NOT NULL")]
		public int EmailTypeID
		{
			get
			{
				return this._EmailTypeID;
			}
			set
			{
				if ((this._EmailTypeID != value))
				{
					if (this._EmailType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmailTypeID = value;
					this.SendPropertyChanged("EmailTypeID");
					this.OnEmailTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddrLine", DbType="NVarChar(75)")]
		public string AddrLine
		{
			get
			{
				return this._AddrLine;
			}
			set
			{
				if ((this._AddrLine != value))
				{
					this.OnAddrLineChanging(value);
					this.SendPropertyChanging();
					this._AddrLine = value;
					this.SendPropertyChanged("AddrLine");
					this.OnAddrLineChanged();
				}
			}
		}
		
		[Column(Storage="_CCAddrLine", DbType="NVarChar(75)")]
		public string CCAddrLine
		{
			get
			{
				return this._CCAddrLine;
			}
			set
			{
				if ((this._CCAddrLine != value))
				{
					this.OnCCAddrLineChanging(value);
					this.SendPropertyChanging();
					this._CCAddrLine = value;
					this.SendPropertyChanged("CCAddrLine");
					this.OnCCAddrLineChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_CatchAll", DbType="Bit NOT NULL")]
		public bool CatchAll
		{
			get
			{
				return this._CatchAll;
			}
			set
			{
				if ((this._CatchAll != value))
				{
					this.OnCatchAllChanging(value);
					this.SendPropertyChanging();
					this._CatchAll = value;
					this.SendPropertyChanged("CatchAll");
					this.OnCatchAllChanged();
				}
			}
		}
		
		[Column(Storage="_NoAttachment", DbType="Bit NOT NULL")]
		public bool NoAttachment
		{
			get
			{
				return this._NoAttachment;
			}
			set
			{
				if ((this._NoAttachment != value))
				{
					this.OnNoAttachmentChanging(value);
					this.SendPropertyChanging();
					this._NoAttachment = value;
					this.SendPropertyChanged("NoAttachment");
					this.OnNoAttachmentChanged();
				}
			}
		}
		
		[Column(Storage="_NoJunkMail", DbType="Bit NOT NULL")]
		public bool NoJunkMail
		{
			get
			{
				return this._NoJunkMail;
			}
			set
			{
				if ((this._NoJunkMail != value))
				{
					this.OnNoJunkMailChanging(value);
					this.SendPropertyChanging();
					this._NoJunkMail = value;
					this.SendPropertyChanged("NoJunkMail");
					this.OnNoJunkMailChanged();
				}
			}
		}
		
		[Column(Storage="_EmailFormatID", DbType="Int NOT NULL")]
		public int EmailFormatID
		{
			get
			{
				return this._EmailFormatID;
			}
			set
			{
				if ((this._EmailFormatID != value))
				{
					if (this._EmailFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailFormatIDChanging(value);
					this.SendPropertyChanging();
					this._EmailFormatID = value;
					this.SendPropertyChanged("EmailFormatID");
					this.OnEmailFormatIDChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantEmailAddress_Applicant", Storage="_Applicant", ThisKey="ApplicantID", OtherKey="ID", IsForeignKey=true)]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.ApplicantEmailAddresses.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.ApplicantEmailAddresses.Add(this);
						this._ApplicantID = value.ID;
					}
					else
					{
						this._ApplicantID = default(System.Guid);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[Association(Name="FK_ApplicantEmailAddress_EmailFormat", Storage="_EmailFormat", ThisKey="EmailFormatID", OtherKey="ID", IsForeignKey=true)]
		public EmailFormat EmailFormat
		{
			get
			{
				return this._EmailFormat.Entity;
			}
			set
			{
				EmailFormat previousValue = this._EmailFormat.Entity;
				if (((previousValue != value) 
							|| (this._EmailFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailFormat.Entity = null;
						previousValue.ApplicantEmailAddresses.Remove(this);
					}
					this._EmailFormat.Entity = value;
					if ((value != null))
					{
						value.ApplicantEmailAddresses.Add(this);
						this._EmailFormatID = value.ID;
					}
					else
					{
						this._EmailFormatID = default(int);
					}
					this.SendPropertyChanged("EmailFormat");
				}
			}
		}
		
		[Association(Name="FK_ApplicantEmailAddress_EmailType", Storage="_EmailType", ThisKey="EmailTypeID", OtherKey="ID", IsForeignKey=true)]
		public EmailType EmailType
		{
			get
			{
				return this._EmailType.Entity;
			}
			set
			{
				EmailType previousValue = this._EmailType.Entity;
				if (((previousValue != value) 
							|| (this._EmailType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailType.Entity = null;
						previousValue.ApplicantEmailAddresses.Remove(this);
					}
					this._EmailType.Entity = value;
					if ((value != null))
					{
						value.ApplicantEmailAddresses.Add(this);
						this._EmailTypeID = value.ID;
					}
					else
					{
						this._EmailTypeID = default(int);
					}
					this.SendPropertyChanged("EmailType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ApplicantPhone")]
	public partial class ApplicantPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ApplicantID;
		
		private int _PhoneTypeID;
		
		private string _ContactName;
		
		private System.Nullable<int> _CountryID;
		
		private string _AreaCode;
		
		private string _DialNumber;
		
		private string _Ext;
		
		private bool _IsPreferred;
		
		private System.Nullable<System.DateTime> _BestTimeToCallFrom;
		
		private System.Nullable<System.DateTime> _BestTimeToCallTo;
		
		private bool _IsValidated;
		
		private bool _PreventOverride;
		
		private bool _Inactive;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<PhoneType> _PhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnApplicantIDChanging(System.Guid value);
    partial void OnApplicantIDChanged();
    partial void OnPhoneTypeIDChanging(int value);
    partial void OnPhoneTypeIDChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnDialNumberChanging(string value);
    partial void OnDialNumberChanged();
    partial void OnExtChanging(string value);
    partial void OnExtChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnBestTimeToCallFromChanging(System.Nullable<System.DateTime> value);
    partial void OnBestTimeToCallFromChanged();
    partial void OnBestTimeToCallToChanging(System.Nullable<System.DateTime> value);
    partial void OnBestTimeToCallToChanged();
    partial void OnIsValidatedChanging(bool value);
    partial void OnIsValidatedChanged();
    partial void OnPreventOverrideChanging(bool value);
    partial void OnPreventOverrideChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public ApplicantPhone()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._Country = default(EntityRef<Country>);
			this._PhoneType = default(EntityRef<PhoneType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneTypeID", DbType="Int NOT NULL")]
		public int PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="NVarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="VarChar(50)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DialNumber", DbType="VarChar(7)")]
		public string DialNumber
		{
			get
			{
				return this._DialNumber;
			}
			set
			{
				if ((this._DialNumber != value))
				{
					this.OnDialNumberChanging(value);
					this.SendPropertyChanging();
					this._DialNumber = value;
					this.SendPropertyChanged("DialNumber");
					this.OnDialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Ext", DbType="VarChar(5)")]
		public string Ext
		{
			get
			{
				return this._Ext;
			}
			set
			{
				if ((this._Ext != value))
				{
					this.OnExtChanging(value);
					this.SendPropertyChanging();
					this._Ext = value;
					this.SendPropertyChanged("Ext");
					this.OnExtChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_BestTimeToCallFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> BestTimeToCallFrom
		{
			get
			{
				return this._BestTimeToCallFrom;
			}
			set
			{
				if ((this._BestTimeToCallFrom != value))
				{
					this.OnBestTimeToCallFromChanging(value);
					this.SendPropertyChanging();
					this._BestTimeToCallFrom = value;
					this.SendPropertyChanged("BestTimeToCallFrom");
					this.OnBestTimeToCallFromChanged();
				}
			}
		}
		
		[Column(Storage="_BestTimeToCallTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> BestTimeToCallTo
		{
			get
			{
				return this._BestTimeToCallTo;
			}
			set
			{
				if ((this._BestTimeToCallTo != value))
				{
					this.OnBestTimeToCallToChanging(value);
					this.SendPropertyChanging();
					this._BestTimeToCallTo = value;
					this.SendPropertyChanged("BestTimeToCallTo");
					this.OnBestTimeToCallToChanged();
				}
			}
		}
		
		[Column(Storage="_IsValidated", DbType="Bit NOT NULL")]
		public bool IsValidated
		{
			get
			{
				return this._IsValidated;
			}
			set
			{
				if ((this._IsValidated != value))
				{
					this.OnIsValidatedChanging(value);
					this.SendPropertyChanging();
					this._IsValidated = value;
					this.SendPropertyChanged("IsValidated");
					this.OnIsValidatedChanged();
				}
			}
		}
		
		[Column(Storage="_PreventOverride", DbType="Bit NOT NULL")]
		public bool PreventOverride
		{
			get
			{
				return this._PreventOverride;
			}
			set
			{
				if ((this._PreventOverride != value))
				{
					this.OnPreventOverrideChanging(value);
					this.SendPropertyChanging();
					this._PreventOverride = value;
					this.SendPropertyChanged("PreventOverride");
					this.OnPreventOverrideChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantPhone_Applicant", Storage="_Applicant", ThisKey="ApplicantID", OtherKey="ID", IsForeignKey=true)]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.ApplicantPhones.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.ApplicantPhones.Add(this);
						this._ApplicantID = value.ID;
					}
					else
					{
						this._ApplicantID = default(System.Guid);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[Association(Name="FK_ApplicantPhone_Country", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ApplicantPhones.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ApplicantPhones.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_ApplicantPhone_PhoneType", Storage="_PhoneType", ThisKey="PhoneTypeID", OtherKey="ID", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.ApplicantPhones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.ApplicantPhones.Add(this);
						this._PhoneTypeID = value.ID;
					}
					else
					{
						this._PhoneTypeID = default(int);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.ApprovalStatus")]
	public partial class ApprovalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ServiceProviderApproval> _ServiceProviderApprovals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ApprovalStatus()
		{
			this._ServiceProviderApprovals = new EntitySet<ServiceProviderApproval>(new Action<ServiceProviderApproval>(this.attach_ServiceProviderApprovals), new Action<ServiceProviderApproval>(this.detach_ServiceProviderApprovals));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderApproval_ApprovalStatus", Storage="_ServiceProviderApprovals", ThisKey="ID", OtherKey="ApprovalStatusID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderApproval> ServiceProviderApprovals
		{
			get
			{
				return this._ServiceProviderApprovals;
			}
			set
			{
				this._ServiceProviderApprovals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceProviderApprovals(ServiceProviderApproval entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = this;
		}
		
		private void detach_ServiceProviderApprovals(ServiceProviderApproval entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = null;
		}
	}
	
	[Table(Name="dbo.BillingCompany")]
	public partial class BillingCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _OrgID;
		
		private string _QuickBookID;
		
		private bool _NeedSPApproval;
		
		private EntityRef<Organization> _Organization;
		
		private EntitySet<BillingInformation> _BillingInformations;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<ServiceProviderApproval> _ServiceProviderApprovals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrgIDChanging(System.Guid value);
    partial void OnOrgIDChanged();
    partial void OnQuickBookIDChanging(string value);
    partial void OnQuickBookIDChanged();
    partial void OnNeedSPApprovalChanging(bool value);
    partial void OnNeedSPApprovalChanged();
    #endregion
		
		public BillingCompany()
		{
			this._Organization = default(EntityRef<Organization>);
			this._BillingInformations = new EntitySet<BillingInformation>(new Action<BillingInformation>(this.attach_BillingInformations), new Action<BillingInformation>(this.detach_BillingInformations));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._ServiceProviderApprovals = new EntitySet<ServiceProviderApproval>(new Action<ServiceProviderApproval>(this.attach_ServiceProviderApprovals), new Action<ServiceProviderApproval>(this.detach_ServiceProviderApprovals));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrgID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuickBookID", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string QuickBookID
		{
			get
			{
				return this._QuickBookID;
			}
			set
			{
				if ((this._QuickBookID != value))
				{
					this.OnQuickBookIDChanging(value);
					this.SendPropertyChanging();
					this._QuickBookID = value;
					this.SendPropertyChanged("QuickBookID");
					this.OnQuickBookIDChanged();
				}
			}
		}
		
		[Column(Storage="_NeedSPApproval", DbType="Bit NOT NULL")]
		public bool NeedSPApproval
		{
			get
			{
				return this._NeedSPApproval;
			}
			set
			{
				if ((this._NeedSPApproval != value))
				{
					this.OnNeedSPApprovalChanging(value);
					this.SendPropertyChanging();
					this._NeedSPApproval = value;
					this.SendPropertyChanged("NeedSPApproval");
					this.OnNeedSPApprovalChanged();
				}
			}
		}
		
		[Association(Name="FK_BillingCompany_Organization1", Storage="_Organization", ThisKey="OrgID", OtherKey="ID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.BillingCompanies.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.BillingCompanies.Add(this);
						this._OrgID = value.ID;
					}
					else
					{
						this._OrgID = default(System.Guid);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[Association(Name="FK_BillingInformation_BillingCompany", Storage="_BillingInformations", ThisKey="ID", OtherKey="BillingCompanyID", DeleteRule="NO ACTION")]
		public EntitySet<BillingInformation> BillingInformations
		{
			get
			{
				return this._BillingInformations;
			}
			set
			{
				this._BillingInformations.Assign(value);
			}
		}
		
		[Association(Name="FK_Invoice_BillingCompany", Storage="_Invoices", ThisKey="ID", OtherKey="BillingCompanyID", DeleteRule="NO ACTION")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="FK_Payment_BillingCompany", Storage="_Payments", ThisKey="ID", OtherKey="PaidBy", DeleteRule="NO ACTION")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderApproval_BillingCompany", Storage="_ServiceProviderApprovals", ThisKey="ID", OtherKey="BillingCompanyID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderApproval> ServiceProviderApprovals
		{
			get
			{
				return this._ServiceProviderApprovals;
			}
			set
			{
				this._ServiceProviderApprovals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillingInformations(BillingInformation entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = this;
		}
		
		private void detach_BillingInformations(BillingInformation entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = null;
		}
		
		private void attach_ServiceProviderApprovals(ServiceProviderApproval entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = this;
		}
		
		private void detach_ServiceProviderApprovals(ServiceProviderApproval entity)
		{
			this.SendPropertyChanging();
			entity.BillingCompany = null;
		}
	}
	
	[Table(Name="dbo.BillingInformation")]
	public partial class BillingInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _InsuranceID;
		
		private System.Nullable<System.Guid> _BillingCompanyID;
		
		private bool _IsPreferred;
		
		private string _ReferenceCode;
		
		private System.Nullable<System.Guid> _PriceChartID;
		
		private bool _Inactive;
		
		private System.Nullable<decimal> _GasSurcharge;
		
		private System.Nullable<decimal> _AdminFee;
		
		private System.Nullable<decimal> _DocumentFee;
		
		private System.Nullable<decimal> _MaxExtraFee;
		
		private System.DateTime _BillingDate;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<BillingCompany> _BillingCompany;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<PriceChart> _PriceChart;
		
		private EntitySet<GeoSurcharge> _GeoSurcharges;
		
		private EntitySet<Price> _Prices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnBillingCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnBillingCompanyIDChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnReferenceCodeChanging(string value);
    partial void OnReferenceCodeChanged();
    partial void OnPriceChartIDChanging(System.Nullable<System.Guid> value);
    partial void OnPriceChartIDChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnGasSurchargeChanging(System.Nullable<decimal> value);
    partial void OnGasSurchargeChanged();
    partial void OnAdminFeeChanging(System.Nullable<decimal> value);
    partial void OnAdminFeeChanged();
    partial void OnDocumentFeeChanging(System.Nullable<decimal> value);
    partial void OnDocumentFeeChanged();
    partial void OnMaxExtraFeeChanging(System.Nullable<decimal> value);
    partial void OnMaxExtraFeeChanged();
    partial void OnBillingDateChanging(System.DateTime value);
    partial void OnBillingDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public BillingInformation()
		{
			this._BillingCompany = default(EntityRef<BillingCompany>);
			this._Insurance = default(EntityRef<Insurance>);
			this._PriceChart = default(EntityRef<PriceChart>);
			this._GeoSurcharges = new EntitySet<GeoSurcharge>(new Action<GeoSurcharge>(this.attach_GeoSurcharges), new Action<GeoSurcharge>(this.detach_GeoSurcharges));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillingCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BillingCompanyID
		{
			get
			{
				return this._BillingCompanyID;
			}
			set
			{
				if ((this._BillingCompanyID != value))
				{
					if (this._BillingCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCompanyID = value;
					this.SendPropertyChanged("BillingCompanyID");
					this.OnBillingCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceCode", DbType="NVarChar(36)")]
		public string ReferenceCode
		{
			get
			{
				return this._ReferenceCode;
			}
			set
			{
				if ((this._ReferenceCode != value))
				{
					this.OnReferenceCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferenceCode = value;
					this.SendPropertyChanged("ReferenceCode");
					this.OnReferenceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PriceChartID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PriceChartID
		{
			get
			{
				return this._PriceChartID;
			}
			set
			{
				if ((this._PriceChartID != value))
				{
					if (this._PriceChart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceChartIDChanging(value);
					this.SendPropertyChanging();
					this._PriceChartID = value;
					this.SendPropertyChanged("PriceChartID");
					this.OnPriceChartIDChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_GasSurcharge", DbType="Money")]
		public System.Nullable<decimal> GasSurcharge
		{
			get
			{
				return this._GasSurcharge;
			}
			set
			{
				if ((this._GasSurcharge != value))
				{
					this.OnGasSurchargeChanging(value);
					this.SendPropertyChanging();
					this._GasSurcharge = value;
					this.SendPropertyChanged("GasSurcharge");
					this.OnGasSurchargeChanged();
				}
			}
		}
		
		[Column(Storage="_AdminFee", DbType="Money")]
		public System.Nullable<decimal> AdminFee
		{
			get
			{
				return this._AdminFee;
			}
			set
			{
				if ((this._AdminFee != value))
				{
					this.OnAdminFeeChanging(value);
					this.SendPropertyChanging();
					this._AdminFee = value;
					this.SendPropertyChanged("AdminFee");
					this.OnAdminFeeChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentFee", DbType="Money")]
		public System.Nullable<decimal> DocumentFee
		{
			get
			{
				return this._DocumentFee;
			}
			set
			{
				if ((this._DocumentFee != value))
				{
					this.OnDocumentFeeChanging(value);
					this.SendPropertyChanging();
					this._DocumentFee = value;
					this.SendPropertyChanged("DocumentFee");
					this.OnDocumentFeeChanged();
				}
			}
		}
		
		[Column(Storage="_MaxExtraFee", DbType="Money")]
		public System.Nullable<decimal> MaxExtraFee
		{
			get
			{
				return this._MaxExtraFee;
			}
			set
			{
				if ((this._MaxExtraFee != value))
				{
					this.OnMaxExtraFeeChanging(value);
					this.SendPropertyChanging();
					this._MaxExtraFee = value;
					this.SendPropertyChanged("MaxExtraFee");
					this.OnMaxExtraFeeChanged();
				}
			}
		}
		
		[Column(Storage="_BillingDate", DbType="DateTime NOT NULL")]
		public System.DateTime BillingDate
		{
			get
			{
				return this._BillingDate;
			}
			set
			{
				if ((this._BillingDate != value))
				{
					this.OnBillingDateChanging(value);
					this.SendPropertyChanging();
					this._BillingDate = value;
					this.SendPropertyChanged("BillingDate");
					this.OnBillingDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_BillingInformation_BillingCompany", Storage="_BillingCompany", ThisKey="BillingCompanyID", OtherKey="ID", IsForeignKey=true)]
		public BillingCompany BillingCompany
		{
			get
			{
				return this._BillingCompany.Entity;
			}
			set
			{
				BillingCompany previousValue = this._BillingCompany.Entity;
				if (((previousValue != value) 
							|| (this._BillingCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingCompany.Entity = null;
						previousValue.BillingInformations.Remove(this);
					}
					this._BillingCompany.Entity = value;
					if ((value != null))
					{
						value.BillingInformations.Add(this);
						this._BillingCompanyID = value.ID;
					}
					else
					{
						this._BillingCompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("BillingCompany");
				}
			}
		}
		
		[Association(Name="FK_BillingInformation_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.BillingInformations.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.BillingInformations.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[Association(Name="FK_BillingInformation_PriceChart", Storage="_PriceChart", ThisKey="PriceChartID", OtherKey="ID", IsForeignKey=true)]
		public PriceChart PriceChart
		{
			get
			{
				return this._PriceChart.Entity;
			}
			set
			{
				PriceChart previousValue = this._PriceChart.Entity;
				if (((previousValue != value) 
							|| (this._PriceChart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceChart.Entity = null;
						previousValue.BillingInformations.Remove(this);
					}
					this._PriceChart.Entity = value;
					if ((value != null))
					{
						value.BillingInformations.Add(this);
						this._PriceChartID = value.ID;
					}
					else
					{
						this._PriceChartID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PriceChart");
				}
			}
		}
		
		[Association(Name="FK_GeoSurcharge_BillingInformation", Storage="_GeoSurcharges", ThisKey="ID", OtherKey="BillingInfoID", DeleteRule="NO ACTION")]
		public EntitySet<GeoSurcharge> GeoSurcharges
		{
			get
			{
				return this._GeoSurcharges;
			}
			set
			{
				this._GeoSurcharges.Assign(value);
			}
		}
		
		[Association(Name="FK_Price_BillingInformation", Storage="_Prices", ThisKey="ID", OtherKey="BillingInformationID", DeleteRule="NO ACTION")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeoSurcharges(GeoSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.BillingInformation = this;
		}
		
		private void detach_GeoSurcharges(GeoSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.BillingInformation = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.BillingInformation = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.BillingInformation = null;
		}
	}
	
	[Table(Name="dbo.Configuration")]
	public partial class Configuration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Configuration()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(255)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _CallingCode;
		
		private EntitySet<ApplicantAddress> _ApplicantAddresses;
		
		private EntitySet<ApplicantPhone> _ApplicantPhones;
		
		private EntitySet<PartyAddress> _PartyAddresses;
		
		private EntitySet<PartyPhone> _PartyPhones;
		
		private EntitySet<State> _States;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCallingCodeChanging(string value);
    partial void OnCallingCodeChanged();
    #endregion
		
		public Country()
		{
			this._ApplicantAddresses = new EntitySet<ApplicantAddress>(new Action<ApplicantAddress>(this.attach_ApplicantAddresses), new Action<ApplicantAddress>(this.detach_ApplicantAddresses));
			this._ApplicantPhones = new EntitySet<ApplicantPhone>(new Action<ApplicantPhone>(this.attach_ApplicantPhones), new Action<ApplicantPhone>(this.detach_ApplicantPhones));
			this._PartyAddresses = new EntitySet<PartyAddress>(new Action<PartyAddress>(this.attach_PartyAddresses), new Action<PartyAddress>(this.detach_PartyAddresses));
			this._PartyPhones = new EntitySet<PartyPhone>(new Action<PartyPhone>(this.attach_PartyPhones), new Action<PartyPhone>(this.detach_PartyPhones));
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CallingCode", DbType="VarChar(3)")]
		public string CallingCode
		{
			get
			{
				return this._CallingCode;
			}
			set
			{
				if ((this._CallingCode != value))
				{
					this.OnCallingCodeChanging(value);
					this.SendPropertyChanging();
					this._CallingCode = value;
					this.SendPropertyChanged("CallingCode");
					this.OnCallingCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_Country", Storage="_ApplicantAddresses", ThisKey="ID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantAddress> ApplicantAddresses
		{
			get
			{
				return this._ApplicantAddresses;
			}
			set
			{
				this._ApplicantAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_ApplicantPhone_Country", Storage="_ApplicantPhones", ThisKey="ID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantPhone> ApplicantPhones
		{
			get
			{
				return this._ApplicantPhones;
			}
			set
			{
				this._ApplicantPhones.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyAddress_Country", Storage="_PartyAddresses", ThisKey="ID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<PartyAddress> PartyAddresses
		{
			get
			{
				return this._PartyAddresses;
			}
			set
			{
				this._PartyAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_Phone_Country", Storage="_PartyPhones", ThisKey="ID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<PartyPhone> PartyPhones
		{
			get
			{
				return this._PartyPhones;
			}
			set
			{
				this._PartyPhones.Assign(value);
			}
		}
		
		[Association(Name="FK_State_Country", Storage="_States", ThisKey="ID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_ApplicantPhones(ApplicantPhone entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ApplicantPhones(ApplicantPhone entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_PartyPhones(PartyPhone entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_PartyPhones(PartyPhone entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Credentialing")]
	public partial class Credentialing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ServiceProviderID;
		
		private System.Guid _DocumentID;
		
		private int _CredentialingStatusID;
		
		private System.DateTime _RequestDate;
		
		private bool _Inactive;
		
		private EntityRef<CredentialingStatus> _CredentialingStatus;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnServiceProviderIDChanging(System.Guid value);
    partial void OnServiceProviderIDChanged();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnCredentialingStatusIDChanging(int value);
    partial void OnCredentialingStatusIDChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public Credentialing()
		{
			this._CredentialingStatus = default(EntityRef<CredentialingStatus>);
			this._Document = default(EntityRef<Document>);
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CredentialingStatusID", DbType="Int NOT NULL")]
		public int CredentialingStatusID
		{
			get
			{
				return this._CredentialingStatusID;
			}
			set
			{
				if ((this._CredentialingStatusID != value))
				{
					if (this._CredentialingStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCredentialingStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CredentialingStatusID = value;
					this.SendPropertyChanged("CredentialingStatusID");
					this.OnCredentialingStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_Credentialing_CredentialingStatus", Storage="_CredentialingStatus", ThisKey="CredentialingStatusID", OtherKey="ID", IsForeignKey=true)]
		public CredentialingStatus CredentialingStatus
		{
			get
			{
				return this._CredentialingStatus.Entity;
			}
			set
			{
				CredentialingStatus previousValue = this._CredentialingStatus.Entity;
				if (((previousValue != value) 
							|| (this._CredentialingStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CredentialingStatus.Entity = null;
						previousValue.Credentialings.Remove(this);
					}
					this._CredentialingStatus.Entity = value;
					if ((value != null))
					{
						value.Credentialings.Add(this);
						this._CredentialingStatusID = value.ID;
					}
					else
					{
						this._CredentialingStatusID = default(int);
					}
					this.SendPropertyChanged("CredentialingStatus");
				}
			}
		}
		
		[Association(Name="FK_Credentialing_Document", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Credentialings.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Credentialings.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(System.Guid);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[Association(Name="FK_Credentialing_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.Credentialings.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.Credentialings.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.CredentialingStatus")]
	public partial class CredentialingStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Credentialing> _Credentialings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CredentialingStatus()
		{
			this._Credentialings = new EntitySet<Credentialing>(new Action<Credentialing>(this.attach_Credentialings), new Action<Credentialing>(this.detach_Credentialings));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Credentialing_CredentialingStatus", Storage="_Credentialings", ThisKey="ID", OtherKey="CredentialingStatusID", DeleteRule="NO ACTION")]
		public EntitySet<Credentialing> Credentialings
		{
			get
			{
				return this._Credentialings;
			}
			set
			{
				this._Credentialings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credentialings(Credentialing entity)
		{
			this.SendPropertyChanging();
			entity.CredentialingStatus = this;
		}
		
		private void detach_Credentialings(Credentialing entity)
		{
			this.SendPropertyChanging();
			entity.CredentialingStatus = null;
		}
	}
	
	[Table(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _DocumentFormatID;
		
		private int _SubmissionTypeID;
		
		private int _DocumentTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private string _FileName;
		
		private System.Nullable<System.DateTime> _ReceivedDate;
		
		private System.Nullable<System.DateTime> _RevisionDate;
		
		private System.Nullable<System.DateTime> _ExpiredDate;
		
		private string _VersionReference;
		
		private bool _DownloadDisabled;
		
		private System.Nullable<System.DateTime> _ArchivedDate;
		
		private string _ArchivedReference;
		
		private bool _Inactive;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Credentialing> _Credentialings;
		
		private EntityRef<DocumentFormat> _DocumentFormat;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<SubmissionType> _SubmissionType;
		
		private EntitySet<InsuranceForm> _InsuranceForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDocumentFormatIDChanging(int value);
    partial void OnDocumentFormatIDChanged();
    partial void OnSubmissionTypeIDChanging(int value);
    partial void OnSubmissionTypeIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedDateChanged();
    partial void OnRevisionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRevisionDateChanged();
    partial void OnExpiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredDateChanged();
    partial void OnVersionReferenceChanging(string value);
    partial void OnVersionReferenceChanged();
    partial void OnDownloadDisabledChanging(bool value);
    partial void OnDownloadDisabledChanged();
    partial void OnArchivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnArchivedDateChanged();
    partial void OnArchivedReferenceChanging(string value);
    partial void OnArchivedReferenceChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Document()
		{
			this._Credentialings = new EntitySet<Credentialing>(new Action<Credentialing>(this.attach_Credentialings), new Action<Credentialing>(this.detach_Credentialings));
			this._DocumentFormat = default(EntityRef<DocumentFormat>);
			this._DocumentType = default(EntityRef<DocumentType>);
			this._SubmissionType = default(EntityRef<SubmissionType>);
			this._InsuranceForms = new EntitySet<InsuranceForm>(new Action<InsuranceForm>(this.attach_InsuranceForms), new Action<InsuranceForm>(this.detach_InsuranceForms));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentFormatID", DbType="Int NOT NULL")]
		public int DocumentFormatID
		{
			get
			{
				return this._DocumentFormatID;
			}
			set
			{
				if ((this._DocumentFormatID != value))
				{
					if (this._DocumentFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFormatIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFormatID = value;
					this.SendPropertyChanged("DocumentFormatID");
					this.OnDocumentFormatIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubmissionTypeID", DbType="Int NOT NULL")]
		public int SubmissionTypeID
		{
			get
			{
				return this._SubmissionTypeID;
			}
			set
			{
				if ((this._SubmissionTypeID != value))
				{
					if (this._SubmissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionTypeID = value;
					this.SendPropertyChanged("SubmissionTypeID");
					this.OnSubmissionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTypeID", DbType="Int NOT NULL")]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_RevisionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RevisionDate
		{
			get
			{
				return this._RevisionDate;
			}
			set
			{
				if ((this._RevisionDate != value))
				{
					this.OnRevisionDateChanging(value);
					this.SendPropertyChanging();
					this._RevisionDate = value;
					this.SendPropertyChanged("RevisionDate");
					this.OnRevisionDateChanged();
				}
			}
		}
		
		[Column(Storage="_ExpiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this.OnExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDate = value;
					this.SendPropertyChanged("ExpiredDate");
					this.OnExpiredDateChanged();
				}
			}
		}
		
		[Column(Storage="_VersionReference", DbType="NVarChar(15)")]
		public string VersionReference
		{
			get
			{
				return this._VersionReference;
			}
			set
			{
				if ((this._VersionReference != value))
				{
					this.OnVersionReferenceChanging(value);
					this.SendPropertyChanging();
					this._VersionReference = value;
					this.SendPropertyChanged("VersionReference");
					this.OnVersionReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_DownloadDisabled", DbType="Bit NOT NULL")]
		public bool DownloadDisabled
		{
			get
			{
				return this._DownloadDisabled;
			}
			set
			{
				if ((this._DownloadDisabled != value))
				{
					this.OnDownloadDisabledChanging(value);
					this.SendPropertyChanging();
					this._DownloadDisabled = value;
					this.SendPropertyChanged("DownloadDisabled");
					this.OnDownloadDisabledChanged();
				}
			}
		}
		
		[Column(Storage="_ArchivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArchivedDate
		{
			get
			{
				return this._ArchivedDate;
			}
			set
			{
				if ((this._ArchivedDate != value))
				{
					this.OnArchivedDateChanging(value);
					this.SendPropertyChanging();
					this._ArchivedDate = value;
					this.SendPropertyChanged("ArchivedDate");
					this.OnArchivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ArchivedReference", DbType="NVarChar(36)")]
		public string ArchivedReference
		{
			get
			{
				return this._ArchivedReference;
			}
			set
			{
				if ((this._ArchivedReference != value))
				{
					this.OnArchivedReferenceChanging(value);
					this.SendPropertyChanging();
					this._ArchivedReference = value;
					this.SendPropertyChanged("ArchivedReference");
					this.OnArchivedReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_Credentialing_Document", Storage="_Credentialings", ThisKey="ID", OtherKey="DocumentID", DeleteRule="NO ACTION")]
		public EntitySet<Credentialing> Credentialings
		{
			get
			{
				return this._Credentialings;
			}
			set
			{
				this._Credentialings.Assign(value);
			}
		}
		
		[Association(Name="FK_Document_DocumentFormat", Storage="_DocumentFormat", ThisKey="DocumentFormatID", OtherKey="ID", IsForeignKey=true)]
		public DocumentFormat DocumentFormat
		{
			get
			{
				return this._DocumentFormat.Entity;
			}
			set
			{
				DocumentFormat previousValue = this._DocumentFormat.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFormat.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentFormat.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocumentFormatID = value.ID;
					}
					else
					{
						this._DocumentFormatID = default(int);
					}
					this.SendPropertyChanged("DocumentFormat");
				}
			}
		}
		
		[Association(Name="FK_Document_DocumentType", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocumentTypeID = value.ID;
					}
					else
					{
						this._DocumentTypeID = default(int);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[Association(Name="FK_Document_SubmissionType", Storage="_SubmissionType", ThisKey="SubmissionTypeID", OtherKey="ID", IsForeignKey=true)]
		public SubmissionType SubmissionType
		{
			get
			{
				return this._SubmissionType.Entity;
			}
			set
			{
				SubmissionType previousValue = this._SubmissionType.Entity;
				if (((previousValue != value) 
							|| (this._SubmissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubmissionType.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._SubmissionType.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._SubmissionTypeID = value.ID;
					}
					else
					{
						this._SubmissionTypeID = default(int);
					}
					this.SendPropertyChanged("SubmissionType");
				}
			}
		}
		
		[Association(Name="FK_InsuranceForm_Document", Storage="_InsuranceForms", ThisKey="ID", OtherKey="DocumentID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceForm> InsuranceForms
		{
			get
			{
				return this._InsuranceForms;
			}
			set
			{
				this._InsuranceForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credentialings(Credentialing entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Credentialings(Credentialing entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_InsuranceForms(InsuranceForm entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_InsuranceForms(InsuranceForm entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[Table(Name="metadata.DocumentClassifier")]
	public partial class DocumentClassifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DocumentType> _DocumentTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DocumentClassifier()
		{
			this._DocumentTypes = new EntitySet<DocumentType>(new Action<DocumentType>(this.attach_DocumentTypes), new Action<DocumentType>(this.detach_DocumentTypes));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_DocumentType_DocumentSubType", Storage="_DocumentTypes", ThisKey="ID", OtherKey="DocumentClassifierID", DeleteRule="NO ACTION")]
		public EntitySet<DocumentType> DocumentTypes
		{
			get
			{
				return this._DocumentTypes;
			}
			set
			{
				this._DocumentTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentTypes(DocumentType entity)
		{
			this.SendPropertyChanging();
			entity.DocumentClassifier = this;
		}
		
		private void detach_DocumentTypes(DocumentType entity)
		{
			this.SendPropertyChanging();
			entity.DocumentClassifier = null;
		}
	}
	
	[Table(Name="metadata.DocumentFormat")]
	public partial class DocumentFormat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _FileExtension;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<IncompleteOrderDocumentItem> _IncompleteOrderDocumentItems;
		
		private EntitySet<OrderDocument> _OrderDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileExtensionChanging(string value);
    partial void OnFileExtensionChanged();
    #endregion
		
		public DocumentFormat()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._IncompleteOrderDocumentItems = new EntitySet<IncompleteOrderDocumentItem>(new Action<IncompleteOrderDocumentItem>(this.attach_IncompleteOrderDocumentItems), new Action<IncompleteOrderDocumentItem>(this.detach_IncompleteOrderDocumentItems));
			this._OrderDocuments = new EntitySet<OrderDocument>(new Action<OrderDocument>(this.attach_OrderDocuments), new Action<OrderDocument>(this.detach_OrderDocuments));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileExtension", DbType="NVarChar(50)")]
		public string FileExtension
		{
			get
			{
				return this._FileExtension;
			}
			set
			{
				if ((this._FileExtension != value))
				{
					this.OnFileExtensionChanging(value);
					this.SendPropertyChanging();
					this._FileExtension = value;
					this.SendPropertyChanged("FileExtension");
					this.OnFileExtensionChanged();
				}
			}
		}
		
		[Association(Name="FK_Document_DocumentFormat", Storage="_Documents", ThisKey="ID", OtherKey="DocumentFormatID", DeleteRule="NO ACTION")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_DocumentFormat", Storage="_IncompleteOrderDocumentItems", ThisKey="ID", OtherKey="DocumentFormatID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderDocumentItem> IncompleteOrderDocumentItems
		{
			get
			{
				return this._IncompleteOrderDocumentItems;
			}
			set
			{
				this._IncompleteOrderDocumentItems.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocument_DocumentFormat", Storage="_OrderDocuments", ThisKey="ID", OtherKey="DocumentFormatID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocument> OrderDocuments
		{
			get
			{
				return this._OrderDocuments;
			}
			set
			{
				this._OrderDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFormat = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFormat = null;
		}
		
		private void attach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFormat = this;
		}
		
		private void detach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFormat = null;
		}
		
		private void attach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFormat = this;
		}
		
		private void detach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFormat = null;
		}
	}
	
	[Table(Name="metadata.DocumentType")]
	public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _DocumentClassifierID;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<IncompleteOrderDocumentItem> _IncompleteOrderDocumentItems;
		
		private EntitySet<OrderDocument> _OrderDocuments;
		
		private EntityRef<DocumentClassifier> _DocumentClassifier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDocumentClassifierIDChanging(System.Nullable<int> value);
    partial void OnDocumentClassifierIDChanged();
    #endregion
		
		public DocumentType()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._IncompleteOrderDocumentItems = new EntitySet<IncompleteOrderDocumentItem>(new Action<IncompleteOrderDocumentItem>(this.attach_IncompleteOrderDocumentItems), new Action<IncompleteOrderDocumentItem>(this.detach_IncompleteOrderDocumentItems));
			this._OrderDocuments = new EntitySet<OrderDocument>(new Action<OrderDocument>(this.attach_OrderDocuments), new Action<OrderDocument>(this.detach_OrderDocuments));
			this._DocumentClassifier = default(EntityRef<DocumentClassifier>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentClassifierID", DbType="Int")]
		public System.Nullable<int> DocumentClassifierID
		{
			get
			{
				return this._DocumentClassifierID;
			}
			set
			{
				if ((this._DocumentClassifierID != value))
				{
					if (this._DocumentClassifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentClassifierIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentClassifierID = value;
					this.SendPropertyChanged("DocumentClassifierID");
					this.OnDocumentClassifierIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Document_DocumentType", Storage="_Documents", ThisKey="ID", OtherKey="DocumentTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_DocumentType", Storage="_IncompleteOrderDocumentItems", ThisKey="ID", OtherKey="DocumentTypeID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderDocumentItem> IncompleteOrderDocumentItems
		{
			get
			{
				return this._IncompleteOrderDocumentItems;
			}
			set
			{
				this._IncompleteOrderDocumentItems.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocument_DocumentType", Storage="_OrderDocuments", ThisKey="ID", OtherKey="DocumentTypeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocument> OrderDocuments
		{
			get
			{
				return this._OrderDocuments;
			}
			set
			{
				this._OrderDocuments.Assign(value);
			}
		}
		
		[Association(Name="FK_DocumentType_DocumentSubType", Storage="_DocumentClassifier", ThisKey="DocumentClassifierID", OtherKey="ID", IsForeignKey=true)]
		public DocumentClassifier DocumentClassifier
		{
			get
			{
				return this._DocumentClassifier.Entity;
			}
			set
			{
				DocumentClassifier previousValue = this._DocumentClassifier.Entity;
				if (((previousValue != value) 
							|| (this._DocumentClassifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentClassifier.Entity = null;
						previousValue.DocumentTypes.Remove(this);
					}
					this._DocumentClassifier.Entity = value;
					if ((value != null))
					{
						value.DocumentTypes.Add(this);
						this._DocumentClassifierID = value.ID;
					}
					else
					{
						this._DocumentClassifierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentClassifier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
		
		private void attach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
		
		private void attach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}
	
	[Table(Name="metadata.EmailFormat")]
	public partial class EmailFormat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Inactive;
		
		private EntitySet<ApplicantEmailAddress> _ApplicantEmailAddresses;
		
		private EntitySet<PartyEmailAddress> _PartyEmailAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public EmailFormat()
		{
			this._ApplicantEmailAddresses = new EntitySet<ApplicantEmailAddress>(new Action<ApplicantEmailAddress>(this.attach_ApplicantEmailAddresses), new Action<ApplicantEmailAddress>(this.detach_ApplicantEmailAddresses));
			this._PartyEmailAddresses = new EntitySet<PartyEmailAddress>(new Action<PartyEmailAddress>(this.attach_PartyEmailAddresses), new Action<PartyEmailAddress>(this.detach_PartyEmailAddresses));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantEmailAddress_EmailFormat", Storage="_ApplicantEmailAddresses", ThisKey="ID", OtherKey="EmailFormatID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantEmailAddress> ApplicantEmailAddresses
		{
			get
			{
				return this._ApplicantEmailAddresses;
			}
			set
			{
				this._ApplicantEmailAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_EmailAddress_EmailFormat", Storage="_PartyEmailAddresses", ThisKey="ID", OtherKey="EmailFormatID", DeleteRule="NO ACTION")]
		public EntitySet<PartyEmailAddress> PartyEmailAddresses
		{
			get
			{
				return this._PartyEmailAddresses;
			}
			set
			{
				this._PartyEmailAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantEmailAddresses(ApplicantEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailFormat = this;
		}
		
		private void detach_ApplicantEmailAddresses(ApplicantEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailFormat = null;
		}
		
		private void attach_PartyEmailAddresses(PartyEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailFormat = this;
		}
		
		private void detach_PartyEmailAddresses(PartyEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailFormat = null;
		}
	}
	
	[Table(Name="metadata.EmailType")]
	public partial class EmailType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Inactive;
		
		private EntitySet<ApplicantEmailAddress> _ApplicantEmailAddresses;
		
		private EntitySet<PartyEmailAddress> _PartyEmailAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public EmailType()
		{
			this._ApplicantEmailAddresses = new EntitySet<ApplicantEmailAddress>(new Action<ApplicantEmailAddress>(this.attach_ApplicantEmailAddresses), new Action<ApplicantEmailAddress>(this.detach_ApplicantEmailAddresses));
			this._PartyEmailAddresses = new EntitySet<PartyEmailAddress>(new Action<PartyEmailAddress>(this.attach_PartyEmailAddresses), new Action<PartyEmailAddress>(this.detach_PartyEmailAddresses));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantEmailAddress_EmailType", Storage="_ApplicantEmailAddresses", ThisKey="ID", OtherKey="EmailTypeID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantEmailAddress> ApplicantEmailAddresses
		{
			get
			{
				return this._ApplicantEmailAddresses;
			}
			set
			{
				this._ApplicantEmailAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_EmailAddress_EmailType", Storage="_PartyEmailAddresses", ThisKey="ID", OtherKey="EmailTypeID", DeleteRule="NO ACTION")]
		public EntitySet<PartyEmailAddress> PartyEmailAddresses
		{
			get
			{
				return this._PartyEmailAddresses;
			}
			set
			{
				this._PartyEmailAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantEmailAddresses(ApplicantEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailType = this;
		}
		
		private void detach_ApplicantEmailAddresses(ApplicantEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailType = null;
		}
		
		private void attach_PartyEmailAddresses(PartyEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailType = this;
		}
		
		private void detach_PartyEmailAddresses(PartyEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.EmailType = null;
		}
	}
	
	[Table(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PersonID;
		
		private bool _IsSupervisor;
		
		private System.Nullable<System.Guid> _SupervisorID;
		
		private EntityRef<Person> _Person;
		
		private EntitySet<OrderAssignment> _OrderAssignments;
		
		private EntitySet<OrderAssignment> _OrderAssignment_MailBies;
		
		private EntitySet<OrderingParty> _OrderingParties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(System.Guid value);
    partial void OnPersonIDChanged();
    partial void OnIsSupervisorChanging(bool value);
    partial void OnIsSupervisorChanged();
    partial void OnSupervisorIDChanging(System.Nullable<System.Guid> value);
    partial void OnSupervisorIDChanged();
    #endregion
		
		public Employee()
		{
			this._Person = default(EntityRef<Person>);
			this._OrderAssignments = new EntitySet<OrderAssignment>(new Action<OrderAssignment>(this.attach_OrderAssignments), new Action<OrderAssignment>(this.detach_OrderAssignments));
			this._OrderAssignment_MailBies = new EntitySet<OrderAssignment>(new Action<OrderAssignment>(this.attach_OrderAssignment_MailBies), new Action<OrderAssignment>(this.detach_OrderAssignment_MailBies));
			this._OrderingParties = new EntitySet<OrderingParty>(new Action<OrderingParty>(this.attach_OrderingParties), new Action<OrderingParty>(this.detach_OrderingParties));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSupervisor", DbType="Bit NOT NULL")]
		public bool IsSupervisor
		{
			get
			{
				return this._IsSupervisor;
			}
			set
			{
				if ((this._IsSupervisor != value))
				{
					this.OnIsSupervisorChanging(value);
					this.SendPropertyChanging();
					this._IsSupervisor = value;
					this.SendPropertyChanged("IsSupervisor");
					this.OnIsSupervisorChanged();
				}
			}
		}
		
		[Column(Storage="_SupervisorID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SupervisorID
		{
			get
			{
				return this._SupervisorID;
			}
			set
			{
				if ((this._SupervisorID != value))
				{
					this.OnSupervisorIDChanging(value);
					this.SendPropertyChanging();
					this._SupervisorID = value;
					this.SendPropertyChanged("SupervisorID");
					this.OnSupervisorIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Employee_Person", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_Employee", Storage="_OrderAssignments", ThisKey="ID", OtherKey="ReceivedBy", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignment> OrderAssignments
		{
			get
			{
				return this._OrderAssignments;
			}
			set
			{
				this._OrderAssignments.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignment_MailBy", Storage="_OrderAssignment_MailBies", ThisKey="ID", OtherKey="MailBy", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignment> OrderAssignment_MailBies
		{
			get
			{
				return this._OrderAssignment_MailBies;
			}
			set
			{
				this._OrderAssignment_MailBies.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingParty_Employee", Storage="_OrderingParties", ThisKey="ID", OtherKey="CaseManagerID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingParty> OrderingParties
		{
			get
			{
				return this._OrderingParties;
			}
			set
			{
				this._OrderingParties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OrderAssignment_MailBies(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.MailByEmployee = this;
		}
		
		private void detach_OrderAssignment_MailBies(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.MailByEmployee = null;
		}
		
		private void attach_OrderingParties(OrderingParty entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OrderingParties(OrderingParty entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[Table(Name="metadata.EmployeeStatus")]
	public partial class EmployeeStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EmployeeStatus()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private string _Comment;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _CreatedBy;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.DateTime> _DeletedBy;
		
		private EntityRef<Party> _Party;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.DateTime value);
    partial void OnCreatedByChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedByChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedByChanged();
    #endregion
		
		public ErrorLog()
		{
			this._Party = default(EntityRef<Party>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedBy", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[Association(Name="FK_ErrorLog_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.ErrorLogs.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.ErrorLogs.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FeeLevel")]
	public partial class FeeLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<FeeLevelItem> _FeeLevelItems;
		
		private EntitySet<ServiceProvider> _ServiceProviders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FeeLevel()
		{
			this._FeeLevelItems = new EntitySet<FeeLevelItem>(new Action<FeeLevelItem>(this.attach_FeeLevelItems), new Action<FeeLevelItem>(this.detach_FeeLevelItems));
			this._ServiceProviders = new EntitySet<ServiceProvider>(new Action<ServiceProvider>(this.attach_ServiceProviders), new Action<ServiceProvider>(this.detach_ServiceProviders));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItem_FeeLevel", Storage="_FeeLevelItems", ThisKey="ID", OtherKey="FeeLevelID", DeleteRule="NO ACTION")]
		public EntitySet<FeeLevelItem> FeeLevelItems
		{
			get
			{
				return this._FeeLevelItems;
			}
			set
			{
				this._FeeLevelItems.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProvider_FeeLevel", Storage="_ServiceProviders", ThisKey="ID", OtherKey="FeeLevelID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProvider> ServiceProviders
		{
			get
			{
				return this._ServiceProviders;
			}
			set
			{
				this._ServiceProviders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeLevelItems(FeeLevelItem entity)
		{
			this.SendPropertyChanging();
			entity.FeeLevel = this;
		}
		
		private void detach_FeeLevelItems(FeeLevelItem entity)
		{
			this.SendPropertyChanging();
			entity.FeeLevel = null;
		}
		
		private void attach_ServiceProviders(ServiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.FeeLevel = this;
		}
		
		private void detach_ServiceProviders(ServiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.FeeLevel = null;
		}
	}
	
	[Table(Name="dbo.FeeLevelItem")]
	public partial class FeeLevelItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FeeLevelID;
		
		private int _OrderTypeID;
		
		private bool _BillTo3rdParty;
		
		private decimal _Fee;
		
		private double _FeePercent;
		
		private decimal _KitFee;
		
		private EntityRef<FeeLevel> _FeeLevel;
		
		private EntityRef<OrderType> _OrderType;
		
		private EntitySet<FeeLevelItemReq> _FeeLevelItemReqs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFeeLevelIDChanging(System.Guid value);
    partial void OnFeeLevelIDChanged();
    partial void OnOrderTypeIDChanging(int value);
    partial void OnOrderTypeIDChanged();
    partial void OnBillTo3rdPartyChanging(bool value);
    partial void OnBillTo3rdPartyChanged();
    partial void OnFeeChanging(decimal value);
    partial void OnFeeChanged();
    partial void OnFeePercentChanging(double value);
    partial void OnFeePercentChanged();
    partial void OnKitFeeChanging(decimal value);
    partial void OnKitFeeChanged();
    #endregion
		
		public FeeLevelItem()
		{
			this._FeeLevel = default(EntityRef<FeeLevel>);
			this._OrderType = default(EntityRef<OrderType>);
			this._FeeLevelItemReqs = new EntitySet<FeeLevelItemReq>(new Action<FeeLevelItemReq>(this.attach_FeeLevelItemReqs), new Action<FeeLevelItemReq>(this.detach_FeeLevelItemReqs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FeeLevelID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeeLevelID
		{
			get
			{
				return this._FeeLevelID;
			}
			set
			{
				if ((this._FeeLevelID != value))
				{
					if (this._FeeLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeeLevelIDChanging(value);
					this.SendPropertyChanging();
					this._FeeLevelID = value;
					this.SendPropertyChanged("FeeLevelID");
					this.OnFeeLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderTypeID", DbType="Int NOT NULL")]
		public int OrderTypeID
		{
			get
			{
				return this._OrderTypeID;
			}
			set
			{
				if ((this._OrderTypeID != value))
				{
					if (this._OrderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTypeID = value;
					this.SendPropertyChanged("OrderTypeID");
					this.OnOrderTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillTo3rdParty", DbType="Bit NOT NULL")]
		public bool BillTo3rdParty
		{
			get
			{
				return this._BillTo3rdParty;
			}
			set
			{
				if ((this._BillTo3rdParty != value))
				{
					this.OnBillTo3rdPartyChanging(value);
					this.SendPropertyChanging();
					this._BillTo3rdParty = value;
					this.SendPropertyChanged("BillTo3rdParty");
					this.OnBillTo3rdPartyChanged();
				}
			}
		}
		
		[Column(Storage="_Fee", DbType="Money NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[Column(Storage="_FeePercent", DbType="Float NOT NULL")]
		public double FeePercent
		{
			get
			{
				return this._FeePercent;
			}
			set
			{
				if ((this._FeePercent != value))
				{
					this.OnFeePercentChanging(value);
					this.SendPropertyChanging();
					this._FeePercent = value;
					this.SendPropertyChanged("FeePercent");
					this.OnFeePercentChanged();
				}
			}
		}
		
		[Column(Storage="_KitFee", DbType="Money NOT NULL")]
		public decimal KitFee
		{
			get
			{
				return this._KitFee;
			}
			set
			{
				if ((this._KitFee != value))
				{
					this.OnKitFeeChanging(value);
					this.SendPropertyChanging();
					this._KitFee = value;
					this.SendPropertyChanged("KitFee");
					this.OnKitFeeChanged();
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItem_FeeLevel", Storage="_FeeLevel", ThisKey="FeeLevelID", OtherKey="ID", IsForeignKey=true)]
		public FeeLevel FeeLevel
		{
			get
			{
				return this._FeeLevel.Entity;
			}
			set
			{
				FeeLevel previousValue = this._FeeLevel.Entity;
				if (((previousValue != value) 
							|| (this._FeeLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeeLevel.Entity = null;
						previousValue.FeeLevelItems.Remove(this);
					}
					this._FeeLevel.Entity = value;
					if ((value != null))
					{
						value.FeeLevelItems.Add(this);
						this._FeeLevelID = value.ID;
					}
					else
					{
						this._FeeLevelID = default(System.Guid);
					}
					this.SendPropertyChanged("FeeLevel");
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItem_ServiceType", Storage="_OrderType", ThisKey="OrderTypeID", OtherKey="ID", IsForeignKey=true)]
		public OrderType OrderType
		{
			get
			{
				return this._OrderType.Entity;
			}
			set
			{
				OrderType previousValue = this._OrderType.Entity;
				if (((previousValue != value) 
							|| (this._OrderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderType.Entity = null;
						previousValue.FeeLevelItems.Remove(this);
					}
					this._OrderType.Entity = value;
					if ((value != null))
					{
						value.FeeLevelItems.Add(this);
						this._OrderTypeID = value.ID;
					}
					else
					{
						this._OrderTypeID = default(int);
					}
					this.SendPropertyChanged("OrderType");
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItemReq_FeeLevelItem", Storage="_FeeLevelItemReqs", ThisKey="ID", OtherKey="FeeLevelItemID", DeleteRule="NO ACTION")]
		public EntitySet<FeeLevelItemReq> FeeLevelItemReqs
		{
			get
			{
				return this._FeeLevelItemReqs;
			}
			set
			{
				this._FeeLevelItemReqs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeLevelItemReqs(FeeLevelItemReq entity)
		{
			this.SendPropertyChanging();
			entity.FeeLevelItem = this;
		}
		
		private void detach_FeeLevelItemReqs(FeeLevelItemReq entity)
		{
			this.SendPropertyChanging();
			entity.FeeLevelItem = null;
		}
	}
	
	[Table(Name="dbo.FeeLevelItemReq")]
	public partial class FeeLevelItemReq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FeeLevelItemID;
		
		private System.Guid _RequirementTypeID;
		
		private EntityRef<FeeLevelItem> _FeeLevelItem;
		
		private EntityRef<RequirementType> _RequirementType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeeLevelItemIDChanging(System.Guid value);
    partial void OnFeeLevelItemIDChanged();
    partial void OnRequirementTypeIDChanging(System.Guid value);
    partial void OnRequirementTypeIDChanged();
    #endregion
		
		public FeeLevelItemReq()
		{
			this._FeeLevelItem = default(EntityRef<FeeLevelItem>);
			this._RequirementType = default(EntityRef<RequirementType>);
			OnCreated();
		}
		
		[Column(Storage="_FeeLevelItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FeeLevelItemID
		{
			get
			{
				return this._FeeLevelItemID;
			}
			set
			{
				if ((this._FeeLevelItemID != value))
				{
					if (this._FeeLevelItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeeLevelItemIDChanging(value);
					this.SendPropertyChanging();
					this._FeeLevelItemID = value;
					this.SendPropertyChanged("FeeLevelItemID");
					this.OnFeeLevelItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementTypeID
		{
			get
			{
				return this._RequirementTypeID;
			}
			set
			{
				if ((this._RequirementTypeID != value))
				{
					if (this._RequirementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementTypeID = value;
					this.SendPropertyChanged("RequirementTypeID");
					this.OnRequirementTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItemReq_FeeLevelItem", Storage="_FeeLevelItem", ThisKey="FeeLevelItemID", OtherKey="ID", IsForeignKey=true)]
		public FeeLevelItem FeeLevelItem
		{
			get
			{
				return this._FeeLevelItem.Entity;
			}
			set
			{
				FeeLevelItem previousValue = this._FeeLevelItem.Entity;
				if (((previousValue != value) 
							|| (this._FeeLevelItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeeLevelItem.Entity = null;
						previousValue.FeeLevelItemReqs.Remove(this);
					}
					this._FeeLevelItem.Entity = value;
					if ((value != null))
					{
						value.FeeLevelItemReqs.Add(this);
						this._FeeLevelItemID = value.ID;
					}
					else
					{
						this._FeeLevelItemID = default(System.Guid);
					}
					this.SendPropertyChanged("FeeLevelItem");
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItemReq_RequirementType", Storage="_RequirementType", ThisKey="RequirementTypeID", OtherKey="ID", IsForeignKey=true)]
		public RequirementType RequirementType
		{
			get
			{
				return this._RequirementType.Entity;
			}
			set
			{
				RequirementType previousValue = this._RequirementType.Entity;
				if (((previousValue != value) 
							|| (this._RequirementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequirementType.Entity = null;
						previousValue.FeeLevelItemReqs.Remove(this);
					}
					this._RequirementType.Entity = value;
					if ((value != null))
					{
						value.FeeLevelItemReqs.Add(this);
						this._RequirementTypeID = value.ID;
					}
					else
					{
						this._RequirementTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("RequirementType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Inactive;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public Gender()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_Person_Gender", Storage="_Persons", ThisKey="ID", OtherKey="GenderID", DeleteRule="NO ACTION")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[Table(Name="dbo.GeoSurcharge")]
	public partial class GeoSurcharge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private System.Guid _ID;

		private System.Guid _BillingInfoID;
		
		private int _StateID;
		
		private decimal _Price;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<BillingInformation> _BillingInformation;
		
		private EntityRef<GeoSurcharge> _GeoSurcharge_GeoSurcharge;
		
		private EntityRef<GeoSurcharge> _GeoSurcharge_GeoSurcharge1;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnBillingInfoIDChanging(System.Guid value);
    partial void OnBillingInfoIDChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public GeoSurcharge()
		{
			this._BillingInformation = default(EntityRef<BillingInformation>);
			this._GeoSurcharge_GeoSurcharge = default(EntityRef<GeoSurcharge>);
			this._GeoSurcharge_GeoSurcharge1 = default(EntityRef<GeoSurcharge>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}

    [Column(Storage = "_ID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
    public System.Guid ID
    {
      get
      {
        return this._ID;
      }
      set
      {
        if ((this._ID != value))
        {
          if (this._BillingInformation.HasLoadedOrAssignedValue)
          {
            throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
          }
          this.OnIDChanging(value);
          this.SendPropertyChanging();
          this._ID = value;
          this.SendPropertyChanged("ID");
          this.OnIDChanged();
        }
      }
    }

		[Column(Storage="_BillingInfoID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BillingInfoID
		{
			get
			{
				return this._BillingInfoID;
			}
			set
			{
				if ((this._BillingInfoID != value))
				{
					if (this._BillingInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingInfoIDChanging(value);
					this.SendPropertyChanging();
					this._BillingInfoID = value;
					this.SendPropertyChanged("BillingInfoID");
					this.OnBillingInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._GeoSurcharge_GeoSurcharge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_GeoSurcharge_BillingInformation", Storage="_BillingInformation", ThisKey="BillingInfoID", OtherKey="ID", IsForeignKey=true)]
		public BillingInformation BillingInformation
		{
			get
			{
				return this._BillingInformation.Entity;
			}
			set
			{
				BillingInformation previousValue = this._BillingInformation.Entity;
				if (((previousValue != value) 
							|| (this._BillingInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingInformation.Entity = null;
						previousValue.GeoSurcharges.Remove(this);
					}
					this._BillingInformation.Entity = value;
					if ((value != null))
					{
						value.GeoSurcharges.Add(this);
						this._BillingInfoID = value.ID;
					}
					else
					{
						this._BillingInfoID = default(System.Guid);
					}
					this.SendPropertyChanged("BillingInformation");
				}
			}
		}
		
		[Association(Name="FK_GeoSurcharge_GeoSurcharge", Storage="_GeoSurcharge_GeoSurcharge", ThisKey="BillingInfoID,StateID", OtherKey="BillingInfoID,StateID", IsForeignKey=true)]
		public GeoSurcharge GeoSurcharge_GeoSurcharge
		{
			get
			{
				return this._GeoSurcharge_GeoSurcharge.Entity;
			}
			set
			{
				GeoSurcharge previousValue = this._GeoSurcharge_GeoSurcharge.Entity;
				if (((previousValue != value) 
							|| (this._GeoSurcharge_GeoSurcharge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoSurcharge_GeoSurcharge.Entity = null;
						previousValue.GeoSurcharge_GeoSurcharge1 = null;
					}
					this._GeoSurcharge_GeoSurcharge.Entity = value;
					if ((value != null))
					{
						value.GeoSurcharge_GeoSurcharge1 = this;
						this._BillingInfoID = value.BillingInfoID;
						this._StateID = value.StateID;
					}
					else
					{
						this._BillingInfoID = default(System.Guid);
						this._StateID = default(int);
					}
					this.SendPropertyChanged("GeoSurcharge_GeoSurcharge");
				}
			}
		}
		
		[Association(Name="FK_GeoSurcharge_GeoSurcharge", Storage="_GeoSurcharge_GeoSurcharge1", ThisKey="BillingInfoID,StateID", OtherKey="BillingInfoID,StateID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public GeoSurcharge GeoSurcharge_GeoSurcharge1
		{
			get
			{
				return this._GeoSurcharge_GeoSurcharge1.Entity;
			}
			set
			{
				GeoSurcharge previousValue = this._GeoSurcharge_GeoSurcharge1.Entity;
				if (((previousValue != value) 
							|| (this._GeoSurcharge_GeoSurcharge1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoSurcharge_GeoSurcharge1.Entity = null;
						previousValue.GeoSurcharge_GeoSurcharge = null;
					}
					this._GeoSurcharge_GeoSurcharge1.Entity = value;
					if ((value != null))
					{
						value.GeoSurcharge_GeoSurcharge = this;
					}
					this.SendPropertyChanged("GeoSurcharge_GeoSurcharge1");
				}
			}
		}
		
		[Association(Name="FK_GeoSurcharge_State", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.GeoSurcharges.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.GeoSurcharges.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.GovIDType")]
	public partial class GovIDType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _AbbrName;
		
		private EntitySet<Party> _Parties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbrNameChanging(string value);
    partial void OnAbbrNameChanged();
    #endregion
		
		public GovIDType()
		{
			this._Parties = new EntitySet<Party>(new Action<Party>(this.attach_Parties), new Action<Party>(this.detach_Parties));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_AbbrName", DbType="VarChar(50)")]
		public string AbbrName
		{
			get
			{
				return this._AbbrName;
			}
			set
			{
				if ((this._AbbrName != value))
				{
					this.OnAbbrNameChanging(value);
					this.SendPropertyChanging();
					this._AbbrName = value;
					this.SendPropertyChanged("AbbrName");
					this.OnAbbrNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Party_GovIDType", Storage="_Parties", ThisKey="ID", OtherKey="GovIDTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Party> Parties
		{
			get
			{
				return this._Parties;
			}
			set
			{
				this._Parties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.GovIDType = this;
		}
		
		private void detach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.GovIDType = null;
		}
	}
	
	[Table(Name="dbo.IncompleteOrder")]
	public partial class IncompleteOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _InsuranceID;
		
		private System.Nullable<System.Guid> _InsuranceLocationID;
		
		private System.Nullable<System.Guid> _InsuranceProductTypeID;
		
		private System.Nullable<System.Guid> _AgentID;
		
		private string _AgentName;
		
		private string _AgentCode;
		
		private System.Nullable<System.Guid> _AgencyID;
		
		private string _AgencyName;
		
		private string _AgencyCode;
		
		private System.Nullable<System.Guid> _CaseManagerID;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private string _OrderNotes;
		
		private System.Nullable<System.Guid> _OrderTakerID;
		
		private System.Nullable<int> _OrderStatusID;
		
		private System.Nullable<bool> _FemaleRequired;
		
		private string _ReferenceCode;
		
		private System.Nullable<int> _OrderPriortyID;
		
		private string _SmmMailTo;
		
		private string _SmmFaxTo;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<decimal> _DiscountAmount;
		
		private System.Nullable<double> _DiscountPercent;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _KitPrice;
		
		private System.Nullable<int> _OrderTypeID;
		
		private System.Nullable<System.Guid> _OrderingPartyID;
		
		private System.Nullable<bool> _MeetFaceToFace;
		
		private System.Nullable<System.Guid> _ApplicantID;
		
		private System.Nullable<int> _PolicyAmount;
		
		private System.Nullable<int> _PolicyNumber;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<OrderingParty> _OrderingParty;
		
		private EntitySet<IncompleteOrderDocument> _IncompleteOrderDocuments;
		
		private EntitySet<IncompleteOrderDocumentItem> _IncompleteOrderDocumentItems;
		
		private EntitySet<IncompleteOrderRequirement> _IncompleteOrderRequirements;
		
		private EntitySet<IncompleteOrderSchedule> _IncompleteOrderSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnInsuranceLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnInsuranceLocationIDChanged();
    partial void OnInsuranceProductTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnInsuranceProductTypeIDChanged();
    partial void OnAgentIDChanging(System.Nullable<System.Guid> value);
    partial void OnAgentIDChanged();
    partial void OnAgentNameChanging(string value);
    partial void OnAgentNameChanged();
    partial void OnAgentCodeChanging(string value);
    partial void OnAgentCodeChanged();
    partial void OnAgencyIDChanging(System.Nullable<System.Guid> value);
    partial void OnAgencyIDChanged();
    partial void OnAgencyNameChanging(string value);
    partial void OnAgencyNameChanged();
    partial void OnAgencyCodeChanging(string value);
    partial void OnAgencyCodeChanged();
    partial void OnCaseManagerIDChanging(System.Nullable<System.Guid> value);
    partial void OnCaseManagerIDChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    partial void OnOrderNotesChanging(string value);
    partial void OnOrderNotesChanged();
    partial void OnOrderTakerIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderTakerIDChanged();
    partial void OnOrderStatusIDChanging(System.Nullable<int> value);
    partial void OnOrderStatusIDChanged();
    partial void OnFemaleRequiredChanging(System.Nullable<bool> value);
    partial void OnFemaleRequiredChanged();
    partial void OnReferenceCodeChanging(string value);
    partial void OnReferenceCodeChanged();
    partial void OnOrderPriortyIDChanging(System.Nullable<int> value);
    partial void OnOrderPriortyIDChanged();
    partial void OnSmmMailToChanging(string value);
    partial void OnSmmMailToChanged();
    partial void OnSmmFaxToChanging(string value);
    partial void OnSmmFaxToChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnDiscountAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountPercentChanging(System.Nullable<double> value);
    partial void OnDiscountPercentChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnKitPriceChanging(System.Nullable<decimal> value);
    partial void OnKitPriceChanged();
    partial void OnOrderTypeIDChanging(System.Nullable<int> value);
    partial void OnOrderTypeIDChanged();
    partial void OnOrderingPartyIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderingPartyIDChanged();
    partial void OnMeetFaceToFaceChanging(System.Nullable<bool> value);
    partial void OnMeetFaceToFaceChanged();
    partial void OnApplicantIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicantIDChanged();
    partial void OnPolicyAmountChanging(System.Nullable<int> value);
    partial void OnPolicyAmountChanged();
    partial void OnPolicyNumberChanging(System.Nullable<int> value);
    partial void OnPolicyNumberChanged();
    #endregion
		
		public IncompleteOrder()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._OrderingParty = default(EntityRef<OrderingParty>);
			this._IncompleteOrderDocuments = new EntitySet<IncompleteOrderDocument>(new Action<IncompleteOrderDocument>(this.attach_IncompleteOrderDocuments), new Action<IncompleteOrderDocument>(this.detach_IncompleteOrderDocuments));
			this._IncompleteOrderDocumentItems = new EntitySet<IncompleteOrderDocumentItem>(new Action<IncompleteOrderDocumentItem>(this.attach_IncompleteOrderDocumentItems), new Action<IncompleteOrderDocumentItem>(this.detach_IncompleteOrderDocumentItems));
			this._IncompleteOrderRequirements = new EntitySet<IncompleteOrderRequirement>(new Action<IncompleteOrderRequirement>(this.attach_IncompleteOrderRequirements), new Action<IncompleteOrderRequirement>(this.detach_IncompleteOrderRequirements));
			this._IncompleteOrderSchedules = new EntitySet<IncompleteOrderSchedule>(new Action<IncompleteOrderSchedule>(this.attach_IncompleteOrderSchedules), new Action<IncompleteOrderSchedule>(this.detach_IncompleteOrderSchedules));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceLocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> InsuranceLocationID
		{
			get
			{
				return this._InsuranceLocationID;
			}
			set
			{
				if ((this._InsuranceLocationID != value))
				{
					this.OnInsuranceLocationIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceLocationID = value;
					this.SendPropertyChanged("InsuranceLocationID");
					this.OnInsuranceLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceProductTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> InsuranceProductTypeID
		{
			get
			{
				return this._InsuranceProductTypeID;
			}
			set
			{
				if ((this._InsuranceProductTypeID != value))
				{
					this.OnInsuranceProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceProductTypeID = value;
					this.SendPropertyChanged("InsuranceProductTypeID");
					this.OnInsuranceProductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentName", DbType="NVarChar(50)")]
		public string AgentName
		{
			get
			{
				return this._AgentName;
			}
			set
			{
				if ((this._AgentName != value))
				{
					this.OnAgentNameChanging(value);
					this.SendPropertyChanging();
					this._AgentName = value;
					this.SendPropertyChanged("AgentName");
					this.OnAgentNameChanged();
				}
			}
		}
		
		[Column(Storage="_AgentCode", DbType="NVarChar(50)")]
		public string AgentCode
		{
			get
			{
				return this._AgentCode;
			}
			set
			{
				if ((this._AgentCode != value))
				{
					this.OnAgentCodeChanging(value);
					this.SendPropertyChanging();
					this._AgentCode = value;
					this.SendPropertyChanged("AgentCode");
					this.OnAgentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyName", DbType="NVarChar(50)")]
		public string AgencyName
		{
			get
			{
				return this._AgencyName;
			}
			set
			{
				if ((this._AgencyName != value))
				{
					this.OnAgencyNameChanging(value);
					this.SendPropertyChanging();
					this._AgencyName = value;
					this.SendPropertyChanged("AgencyName");
					this.OnAgencyNameChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyCode", DbType="NVarChar(50)")]
		public string AgencyCode
		{
			get
			{
				return this._AgencyCode;
			}
			set
			{
				if ((this._AgencyCode != value))
				{
					this.OnAgencyCodeChanging(value);
					this.SendPropertyChanging();
					this._AgencyCode = value;
					this.SendPropertyChanged("AgencyCode");
					this.OnAgencyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CaseManagerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CaseManagerID
		{
			get
			{
				return this._CaseManagerID;
			}
			set
			{
				if ((this._CaseManagerID != value))
				{
					this.OnCaseManagerIDChanging(value);
					this.SendPropertyChanging();
					this._CaseManagerID = value;
					this.SendPropertyChanged("CaseManagerID");
					this.OnCaseManagerIDChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(200)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(200)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNotes", DbType="NVarChar(1000)")]
		public string OrderNotes
		{
			get
			{
				return this._OrderNotes;
			}
			set
			{
				if ((this._OrderNotes != value))
				{
					this.OnOrderNotesChanging(value);
					this.SendPropertyChanging();
					this._OrderNotes = value;
					this.SendPropertyChanged("OrderNotes");
					this.OnOrderNotesChanged();
				}
			}
		}
		
		[Column(Storage="_OrderTakerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderTakerID
		{
			get
			{
				return this._OrderTakerID;
			}
			set
			{
				if ((this._OrderTakerID != value))
				{
					this.OnOrderTakerIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTakerID = value;
					this.SendPropertyChanged("OrderTakerID");
					this.OnOrderTakerIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusID", DbType="Int")]
		public System.Nullable<int> OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_FemaleRequired", DbType="Bit")]
		public System.Nullable<bool> FemaleRequired
		{
			get
			{
				return this._FemaleRequired;
			}
			set
			{
				if ((this._FemaleRequired != value))
				{
					this.OnFemaleRequiredChanging(value);
					this.SendPropertyChanging();
					this._FemaleRequired = value;
					this.SendPropertyChanged("FemaleRequired");
					this.OnFemaleRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceCode", DbType="NVarChar(36)")]
		public string ReferenceCode
		{
			get
			{
				return this._ReferenceCode;
			}
			set
			{
				if ((this._ReferenceCode != value))
				{
					this.OnReferenceCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferenceCode = value;
					this.SendPropertyChanged("ReferenceCode");
					this.OnReferenceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_OrderPriortyID", DbType="Int")]
		public System.Nullable<int> OrderPriortyID
		{
			get
			{
				return this._OrderPriortyID;
			}
			set
			{
				if ((this._OrderPriortyID != value))
				{
					this.OnOrderPriortyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderPriortyID = value;
					this.SendPropertyChanged("OrderPriortyID");
					this.OnOrderPriortyIDChanged();
				}
			}
		}
		
		[Column(Storage="_SmmMailTo", DbType="NVarChar(200)")]
		public string SmmMailTo
		{
			get
			{
				return this._SmmMailTo;
			}
			set
			{
				if ((this._SmmMailTo != value))
				{
					this.OnSmmMailToChanging(value);
					this.SendPropertyChanging();
					this._SmmMailTo = value;
					this.SendPropertyChanged("SmmMailTo");
					this.OnSmmMailToChanged();
				}
			}
		}
		
		[Column(Storage="_SmmFaxTo", DbType="NVarChar(200)")]
		public string SmmFaxTo
		{
			get
			{
				return this._SmmFaxTo;
			}
			set
			{
				if ((this._SmmFaxTo != value))
				{
					this.OnSmmFaxToChanging(value);
					this.SendPropertyChanging();
					this._SmmFaxTo = value;
					this.SendPropertyChanged("SmmFaxTo");
					this.OnSmmFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Money")]
		public System.Nullable<decimal> DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountPercent", DbType="Float")]
		public System.Nullable<double> DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_KitPrice", DbType="Money")]
		public System.Nullable<decimal> KitPrice
		{
			get
			{
				return this._KitPrice;
			}
			set
			{
				if ((this._KitPrice != value))
				{
					this.OnKitPriceChanging(value);
					this.SendPropertyChanging();
					this._KitPrice = value;
					this.SendPropertyChanged("KitPrice");
					this.OnKitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_OrderTypeID", DbType="Int")]
		public System.Nullable<int> OrderTypeID
		{
			get
			{
				return this._OrderTypeID;
			}
			set
			{
				if ((this._OrderTypeID != value))
				{
					this.OnOrderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTypeID = value;
					this.SendPropertyChanged("OrderTypeID");
					this.OnOrderTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderingPartyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderingPartyID
		{
			get
			{
				return this._OrderingPartyID;
			}
			set
			{
				if ((this._OrderingPartyID != value))
				{
					if (this._OrderingParty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyID = value;
					this.SendPropertyChanged("OrderingPartyID");
					this.OnOrderingPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeetFaceToFace", DbType="Bit")]
		public System.Nullable<bool> MeetFaceToFace
		{
			get
			{
				return this._MeetFaceToFace;
			}
			set
			{
				if ((this._MeetFaceToFace != value))
				{
					this.OnMeetFaceToFaceChanging(value);
					this.SendPropertyChanging();
					this._MeetFaceToFace = value;
					this.SendPropertyChanged("MeetFaceToFace");
					this.OnMeetFaceToFaceChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyAmount", DbType="Int")]
		public System.Nullable<int> PolicyAmount
		{
			get
			{
				return this._PolicyAmount;
			}
			set
			{
				if ((this._PolicyAmount != value))
				{
					this.OnPolicyAmountChanging(value);
					this.SendPropertyChanging();
					this._PolicyAmount = value;
					this.SendPropertyChanged("PolicyAmount");
					this.OnPolicyAmountChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyNumber", DbType="Int")]
		public System.Nullable<int> PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this.OnPolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumber = value;
					this.SendPropertyChanged("PolicyNumber");
					this.OnPolicyNumberChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrder_Applicant", Storage="_Applicant", ThisKey="ApplicantID", OtherKey="ID", IsForeignKey=true)]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.IncompleteOrders.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrders.Add(this);
						this._ApplicantID = value.ID;
					}
					else
					{
						this._ApplicantID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrder_OrderingParty", Storage="_OrderingParty", ThisKey="OrderingPartyID", OtherKey="ID", IsForeignKey=true)]
		public OrderingParty OrderingParty
		{
			get
			{
				return this._OrderingParty.Entity;
			}
			set
			{
				OrderingParty previousValue = this._OrderingParty.Entity;
				if (((previousValue != value) 
							|| (this._OrderingParty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingParty.Entity = null;
						previousValue.IncompleteOrders.Remove(this);
					}
					this._OrderingParty.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrders.Add(this);
						this._OrderingPartyID = value.ID;
					}
					else
					{
						this._OrderingPartyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderingParty");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocument_IncompleteOrder", Storage="_IncompleteOrderDocuments", ThisKey="ID", OtherKey="IncompleteOrderID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderDocument> IncompleteOrderDocuments
		{
			get
			{
				return this._IncompleteOrderDocuments;
			}
			set
			{
				this._IncompleteOrderDocuments.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_IncompleteOrder", Storage="_IncompleteOrderDocumentItems", ThisKey="ID", OtherKey="IncompleteOrderID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderDocumentItem> IncompleteOrderDocumentItems
		{
			get
			{
				return this._IncompleteOrderDocumentItems;
			}
			set
			{
				this._IncompleteOrderDocumentItems.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderRequirement_IncompleteOrder", Storage="_IncompleteOrderRequirements", ThisKey="ID", OtherKey="IncompleteOrderID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderRequirement> IncompleteOrderRequirements
		{
			get
			{
				return this._IncompleteOrderRequirements;
			}
			set
			{
				this._IncompleteOrderRequirements.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderSchedule_IncompleteOrder", Storage="_IncompleteOrderSchedules", ThisKey="ID", OtherKey="IncompleteOrderID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderSchedule> IncompleteOrderSchedules
		{
			get
			{
				return this._IncompleteOrderSchedules;
			}
			set
			{
				this._IncompleteOrderSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncompleteOrderDocuments(IncompleteOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = this;
		}
		
		private void detach_IncompleteOrderDocuments(IncompleteOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = null;
		}
		
		private void attach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = this;
		}
		
		private void detach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = null;
		}
		
		private void attach_IncompleteOrderRequirements(IncompleteOrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = this;
		}
		
		private void detach_IncompleteOrderRequirements(IncompleteOrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = null;
		}
		
		private void attach_IncompleteOrderSchedules(IncompleteOrderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = this;
		}
		
		private void detach_IncompleteOrderSchedules(IncompleteOrderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrder = null;
		}
	}
	
	[Table(Name="dbo.IncompleteOrderDocument")]
	public partial class IncompleteOrderDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _IncompleteOrderID;
		
		private System.Guid _OrderDocumentID;
		
		private EntityRef<IncompleteOrder> _IncompleteOrder;
		
		private EntityRef<IncompleteOrderDocumentItem> _IncompleteOrderDocumentItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIncompleteOrderIDChanging(int value);
    partial void OnIncompleteOrderIDChanged();
    partial void OnOrderDocumentIDChanging(System.Guid value);
    partial void OnOrderDocumentIDChanged();
    #endregion
		
		public IncompleteOrderDocument()
		{
			this._IncompleteOrder = default(EntityRef<IncompleteOrder>);
			this._IncompleteOrderDocumentItem = default(EntityRef<IncompleteOrderDocumentItem>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IncompleteOrderID", DbType="Int NOT NULL")]
		public int IncompleteOrderID
		{
			get
			{
				return this._IncompleteOrderID;
			}
			set
			{
				if ((this._IncompleteOrderID != value))
				{
					if (this._IncompleteOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncompleteOrderIDChanging(value);
					this.SendPropertyChanging();
					this._IncompleteOrderID = value;
					this.SendPropertyChanged("IncompleteOrderID");
					this.OnIncompleteOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderDocumentID
		{
			get
			{
				return this._OrderDocumentID;
			}
			set
			{
				if ((this._OrderDocumentID != value))
				{
					if (this._IncompleteOrderDocumentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocumentID = value;
					this.SendPropertyChanged("OrderDocumentID");
					this.OnOrderDocumentIDChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocument_IncompleteOrder", Storage="_IncompleteOrder", ThisKey="IncompleteOrderID", OtherKey="ID", IsForeignKey=true)]
		public IncompleteOrder IncompleteOrder
		{
			get
			{
				return this._IncompleteOrder.Entity;
			}
			set
			{
				IncompleteOrder previousValue = this._IncompleteOrder.Entity;
				if (((previousValue != value) 
							|| (this._IncompleteOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncompleteOrder.Entity = null;
						previousValue.IncompleteOrderDocuments.Remove(this);
					}
					this._IncompleteOrder.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderDocuments.Add(this);
						this._IncompleteOrderID = value.ID;
					}
					else
					{
						this._IncompleteOrderID = default(int);
					}
					this.SendPropertyChanged("IncompleteOrder");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocument_IncompleteOrderDocumentItem", Storage="_IncompleteOrderDocumentItem", ThisKey="OrderDocumentID", OtherKey="ID", IsForeignKey=true)]
		public IncompleteOrderDocumentItem IncompleteOrderDocumentItem
		{
			get
			{
				return this._IncompleteOrderDocumentItem.Entity;
			}
			set
			{
				IncompleteOrderDocumentItem previousValue = this._IncompleteOrderDocumentItem.Entity;
				if (((previousValue != value) 
							|| (this._IncompleteOrderDocumentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncompleteOrderDocumentItem.Entity = null;
						previousValue.IncompleteOrderDocuments.Remove(this);
					}
					this._IncompleteOrderDocumentItem.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderDocuments.Add(this);
						this._OrderDocumentID = value.ID;
					}
					else
					{
						this._OrderDocumentID = default(System.Guid);
					}
					this.SendPropertyChanged("IncompleteOrderDocumentItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IncompleteOrderDocumentItem")]
	public partial class IncompleteOrderDocumentItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _IncompleteOrderID;
		
		private int _DocumentFormatID;
		
		private System.Nullable<int> _SubmissionTypeID;
		
		private System.Nullable<int> _DocumentTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private string _FileName;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _ArchivedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntitySet<IncompleteOrderDocument> _IncompleteOrderDocuments;
		
		private EntityRef<DocumentFormat> _DocumentFormat;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<IncompleteOrder> _IncompleteOrder;
		
		private EntityRef<SubmissionType> _SubmissionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIncompleteOrderIDChanging(int value);
    partial void OnIncompleteOrderIDChanged();
    partial void OnDocumentFormatIDChanging(int value);
    partial void OnDocumentFormatIDChanged();
    partial void OnSubmissionTypeIDChanging(System.Nullable<int> value);
    partial void OnSubmissionTypeIDChanged();
    partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
    partial void OnDocumentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnArchivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnArchivedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public IncompleteOrderDocumentItem()
		{
			this._IncompleteOrderDocuments = new EntitySet<IncompleteOrderDocument>(new Action<IncompleteOrderDocument>(this.attach_IncompleteOrderDocuments), new Action<IncompleteOrderDocument>(this.detach_IncompleteOrderDocuments));
			this._DocumentFormat = default(EntityRef<DocumentFormat>);
			this._DocumentType = default(EntityRef<DocumentType>);
			this._IncompleteOrder = default(EntityRef<IncompleteOrder>);
			this._SubmissionType = default(EntityRef<SubmissionType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IncompleteOrderID", DbType="Int NOT NULL")]
		public int IncompleteOrderID
		{
			get
			{
				return this._IncompleteOrderID;
			}
			set
			{
				if ((this._IncompleteOrderID != value))
				{
					if (this._IncompleteOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncompleteOrderIDChanging(value);
					this.SendPropertyChanging();
					this._IncompleteOrderID = value;
					this.SendPropertyChanged("IncompleteOrderID");
					this.OnIncompleteOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentFormatID", DbType="Int NOT NULL")]
		public int DocumentFormatID
		{
			get
			{
				return this._DocumentFormatID;
			}
			set
			{
				if ((this._DocumentFormatID != value))
				{
					if (this._DocumentFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFormatIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFormatID = value;
					this.SendPropertyChanged("DocumentFormatID");
					this.OnDocumentFormatIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubmissionTypeID", DbType="Int")]
		public System.Nullable<int> SubmissionTypeID
		{
			get
			{
				return this._SubmissionTypeID;
			}
			set
			{
				if ((this._SubmissionTypeID != value))
				{
					if (this._SubmissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionTypeID = value;
					this.SendPropertyChanged("SubmissionTypeID");
					this.OnSubmissionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTypeID", DbType="Int")]
		public System.Nullable<int> DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ArchivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArchivedDate
		{
			get
			{
				return this._ArchivedDate;
			}
			set
			{
				if ((this._ArchivedDate != value))
				{
					this.OnArchivedDateChanging(value);
					this.SendPropertyChanging();
					this._ArchivedDate = value;
					this.SendPropertyChanged("ArchivedDate");
					this.OnArchivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocument_IncompleteOrderDocumentItem", Storage="_IncompleteOrderDocuments", ThisKey="ID", OtherKey="OrderDocumentID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderDocument> IncompleteOrderDocuments
		{
			get
			{
				return this._IncompleteOrderDocuments;
			}
			set
			{
				this._IncompleteOrderDocuments.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_DocumentFormat", Storage="_DocumentFormat", ThisKey="DocumentFormatID", OtherKey="ID", IsForeignKey=true)]
		public DocumentFormat DocumentFormat
		{
			get
			{
				return this._DocumentFormat.Entity;
			}
			set
			{
				DocumentFormat previousValue = this._DocumentFormat.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFormat.Entity = null;
						previousValue.IncompleteOrderDocumentItems.Remove(this);
					}
					this._DocumentFormat.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderDocumentItems.Add(this);
						this._DocumentFormatID = value.ID;
					}
					else
					{
						this._DocumentFormatID = default(int);
					}
					this.SendPropertyChanged("DocumentFormat");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_DocumentType", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.IncompleteOrderDocumentItems.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderDocumentItems.Add(this);
						this._DocumentTypeID = value.ID;
					}
					else
					{
						this._DocumentTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_IncompleteOrder", Storage="_IncompleteOrder", ThisKey="IncompleteOrderID", OtherKey="ID", IsForeignKey=true)]
		public IncompleteOrder IncompleteOrder
		{
			get
			{
				return this._IncompleteOrder.Entity;
			}
			set
			{
				IncompleteOrder previousValue = this._IncompleteOrder.Entity;
				if (((previousValue != value) 
							|| (this._IncompleteOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncompleteOrder.Entity = null;
						previousValue.IncompleteOrderDocumentItems.Remove(this);
					}
					this._IncompleteOrder.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderDocumentItems.Add(this);
						this._IncompleteOrderID = value.ID;
					}
					else
					{
						this._IncompleteOrderID = default(int);
					}
					this.SendPropertyChanged("IncompleteOrder");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_SubmissionType", Storage="_SubmissionType", ThisKey="SubmissionTypeID", OtherKey="ID", IsForeignKey=true)]
		public SubmissionType SubmissionType
		{
			get
			{
				return this._SubmissionType.Entity;
			}
			set
			{
				SubmissionType previousValue = this._SubmissionType.Entity;
				if (((previousValue != value) 
							|| (this._SubmissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubmissionType.Entity = null;
						previousValue.IncompleteOrderDocumentItems.Remove(this);
					}
					this._SubmissionType.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderDocumentItems.Add(this);
						this._SubmissionTypeID = value.ID;
					}
					else
					{
						this._SubmissionTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubmissionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncompleteOrderDocuments(IncompleteOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrderDocumentItem = this;
		}
		
		private void detach_IncompleteOrderDocuments(IncompleteOrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.IncompleteOrderDocumentItem = null;
		}
	}
	
	[Table(Name="dbo.IncompleteOrderRequirement")]
	public partial class IncompleteOrderRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncompleteOrderID;
		
		private System.Guid _RequirementID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _Modified;
		
		private System.Nullable<bool> _Deleted;
		
		private EntityRef<IncompleteOrder> _IncompleteOrder;
		
		private EntityRef<Requirement> _Requirement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncompleteOrderIDChanging(int value);
    partial void OnIncompleteOrderIDChanged();
    partial void OnRequirementIDChanging(System.Guid value);
    partial void OnRequirementIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedChanging(System.Nullable<bool> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    #endregion
		
		public IncompleteOrderRequirement()
		{
			this._IncompleteOrder = default(EntityRef<IncompleteOrder>);
			this._Requirement = default(EntityRef<Requirement>);
			OnCreated();
		}
		
		[Column(Storage="_IncompleteOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IncompleteOrderID
		{
			get
			{
				return this._IncompleteOrderID;
			}
			set
			{
				if ((this._IncompleteOrderID != value))
				{
					if (this._IncompleteOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncompleteOrderIDChanging(value);
					this.SendPropertyChanging();
					this._IncompleteOrderID = value;
					this.SendPropertyChanged("IncompleteOrderID");
					this.OnIncompleteOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementID
		{
			get
			{
				return this._RequirementID;
			}
			set
			{
				if ((this._RequirementID != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementID = value;
					this.SendPropertyChanged("RequirementID");
					this.OnRequirementIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="Bit")]
		public System.Nullable<bool> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderRequirement_IncompleteOrder", Storage="_IncompleteOrder", ThisKey="IncompleteOrderID", OtherKey="ID", IsForeignKey=true)]
		public IncompleteOrder IncompleteOrder
		{
			get
			{
				return this._IncompleteOrder.Entity;
			}
			set
			{
				IncompleteOrder previousValue = this._IncompleteOrder.Entity;
				if (((previousValue != value) 
							|| (this._IncompleteOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncompleteOrder.Entity = null;
						previousValue.IncompleteOrderRequirements.Remove(this);
					}
					this._IncompleteOrder.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderRequirements.Add(this);
						this._IncompleteOrderID = value.ID;
					}
					else
					{
						this._IncompleteOrderID = default(int);
					}
					this.SendPropertyChanged("IncompleteOrder");
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderRequirement_Requirement", Storage="_Requirement", ThisKey="RequirementID", OtherKey="ID", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.IncompleteOrderRequirements.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderRequirements.Add(this);
						this._RequirementID = value.ID;
					}
					else
					{
						this._RequirementID = default(System.Guid);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IncompleteOrderSchedule")]
	public partial class IncompleteOrderSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _IncompleteOrderID;
		
		private bool _IsAvailable;
		
		private int _Weekday;
		
		private System.Nullable<System.DateTime> _FromDate;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private System.Nullable<System.DateTime> _FromTime;
		
		private System.Nullable<System.DateTime> _ToTime;
		
		private bool _Inactive;
		
		private bool _Preset;
		
		private EntityRef<IncompleteOrder> _IncompleteOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIncompleteOrderIDChanging(int value);
    partial void OnIncompleteOrderIDChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnWeekdayChanging(int value);
    partial void OnWeekdayChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnFromTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFromTimeChanged();
    partial void OnToTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnToTimeChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnPresetChanging(bool value);
    partial void OnPresetChanged();
    #endregion
		
		public IncompleteOrderSchedule()
		{
			this._IncompleteOrder = default(EntityRef<IncompleteOrder>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IncompleteOrderID", DbType="Int NOT NULL")]
		public int IncompleteOrderID
		{
			get
			{
				return this._IncompleteOrderID;
			}
			set
			{
				if ((this._IncompleteOrderID != value))
				{
					if (this._IncompleteOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncompleteOrderIDChanging(value);
					this.SendPropertyChanging();
					this._IncompleteOrderID = value;
					this.SendPropertyChanged("IncompleteOrderID");
					this.OnIncompleteOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_Weekday", DbType="Int NOT NULL")]
		public int Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this.OnWeekdayChanging(value);
					this.SendPropertyChanging();
					this._Weekday = value;
					this.SendPropertyChanged("Weekday");
					this.OnWeekdayChanged();
				}
			}
		}
		
		[Column(Storage="_FromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[Column(Storage="_FromTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromTime
		{
			get
			{
				return this._FromTime;
			}
			set
			{
				if ((this._FromTime != value))
				{
					this.OnFromTimeChanging(value);
					this.SendPropertyChanging();
					this._FromTime = value;
					this.SendPropertyChanged("FromTime");
					this.OnFromTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ToTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToTime
		{
			get
			{
				return this._ToTime;
			}
			set
			{
				if ((this._ToTime != value))
				{
					this.OnToTimeChanging(value);
					this.SendPropertyChanging();
					this._ToTime = value;
					this.SendPropertyChanged("ToTime");
					this.OnToTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_Preset", DbType="Bit NOT NULL")]
		public bool Preset
		{
			get
			{
				return this._Preset;
			}
			set
			{
				if ((this._Preset != value))
				{
					this.OnPresetChanging(value);
					this.SendPropertyChanging();
					this._Preset = value;
					this.SendPropertyChanged("Preset");
					this.OnPresetChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderSchedule_IncompleteOrder", Storage="_IncompleteOrder", ThisKey="IncompleteOrderID", OtherKey="ID", IsForeignKey=true)]
		public IncompleteOrder IncompleteOrder
		{
			get
			{
				return this._IncompleteOrder.Entity;
			}
			set
			{
				IncompleteOrder previousValue = this._IncompleteOrder.Entity;
				if (((previousValue != value) 
							|| (this._IncompleteOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncompleteOrder.Entity = null;
						previousValue.IncompleteOrderSchedules.Remove(this);
					}
					this._IncompleteOrder.Entity = value;
					if ((value != null))
					{
						value.IncompleteOrderSchedules.Add(this);
						this._IncompleteOrderID = value.ID;
					}
					else
					{
						this._IncompleteOrderID = default(int);
					}
					this.SendPropertyChanged("IncompleteOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Insurance")]
	public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _OrgID;
		
		private string _NAICCode;
		
		private bool _OriginInKit;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private bool _PolicyNumberRequired;
		
		private string _OPNote;
		
		private string _ReqNote;
		
		private string _SPNote;
		
		private string _DirectOrderNote;
		
		private string _QuickBookID;
		
		private EntitySet<AgencyInsurance> _AgencyInsurances;
		
		private EntitySet<AgentInsurance> _AgentInsurances;
		
		private EntitySet<BillingInformation> _BillingInformations;
		
		private EntityRef<Organization> _Organization;
		
		private EntitySet<InsuranceForm> _InsuranceForms;
		
		private EntitySet<InsuranceLab> _InsuranceLabs;
		
		private EntitySet<InsuranceLocation> _InsuranceLocations;
		
		private EntitySet<InsuranceProductType> _InsuranceProductTypes;
		
		private EntitySet<OrderingPartyInsurance> _OrderingPartyInsurances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrgIDChanging(System.Guid value);
    partial void OnOrgIDChanged();
    partial void OnNAICCodeChanging(string value);
    partial void OnNAICCodeChanged();
    partial void OnOriginInKitChanging(bool value);
    partial void OnOriginInKitChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    partial void OnPolicyNumberRequiredChanging(bool value);
    partial void OnPolicyNumberRequiredChanged();
    partial void OnOPNoteChanging(string value);
    partial void OnOPNoteChanged();
    partial void OnReqNoteChanging(string value);
    partial void OnReqNoteChanged();
    partial void OnSPNoteChanging(string value);
    partial void OnSPNoteChanged();
    partial void OnDirectOrderNoteChanging(string value);
    partial void OnDirectOrderNoteChanged();
    partial void OnQuickBookIDChanging(string value);
    partial void OnQuickBookIDChanged();
    #endregion
		
		public Insurance()
		{
			this._AgencyInsurances = new EntitySet<AgencyInsurance>(new Action<AgencyInsurance>(this.attach_AgencyInsurances), new Action<AgencyInsurance>(this.detach_AgencyInsurances));
			this._AgentInsurances = new EntitySet<AgentInsurance>(new Action<AgentInsurance>(this.attach_AgentInsurances), new Action<AgentInsurance>(this.detach_AgentInsurances));
			this._BillingInformations = new EntitySet<BillingInformation>(new Action<BillingInformation>(this.attach_BillingInformations), new Action<BillingInformation>(this.detach_BillingInformations));
			this._Organization = default(EntityRef<Organization>);
			this._InsuranceForms = new EntitySet<InsuranceForm>(new Action<InsuranceForm>(this.attach_InsuranceForms), new Action<InsuranceForm>(this.detach_InsuranceForms));
			this._InsuranceLabs = new EntitySet<InsuranceLab>(new Action<InsuranceLab>(this.attach_InsuranceLabs), new Action<InsuranceLab>(this.detach_InsuranceLabs));
			this._InsuranceLocations = new EntitySet<InsuranceLocation>(new Action<InsuranceLocation>(this.attach_InsuranceLocations), new Action<InsuranceLocation>(this.detach_InsuranceLocations));
			this._InsuranceProductTypes = new EntitySet<InsuranceProductType>(new Action<InsuranceProductType>(this.attach_InsuranceProductTypes), new Action<InsuranceProductType>(this.detach_InsuranceProductTypes));
			this._OrderingPartyInsurances = new EntitySet<OrderingPartyInsurance>(new Action<OrderingPartyInsurance>(this.attach_OrderingPartyInsurances), new Action<OrderingPartyInsurance>(this.detach_OrderingPartyInsurances));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrgID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[Column(Storage="_NAICCode", DbType="VarChar(50)")]
		public string NAICCode
		{
			get
			{
				return this._NAICCode;
			}
			set
			{
				if ((this._NAICCode != value))
				{
					this.OnNAICCodeChanging(value);
					this.SendPropertyChanging();
					this._NAICCode = value;
					this.SendPropertyChanged("NAICCode");
					this.OnNAICCodeChanged();
				}
			}
		}
		
		[Column(Storage="_OriginInKit", DbType="Bit NOT NULL")]
		public bool OriginInKit
		{
			get
			{
				return this._OriginInKit;
			}
			set
			{
				if ((this._OriginInKit != value))
				{
					this.OnOriginInKitChanging(value);
					this.SendPropertyChanging();
					this._OriginInKit = value;
					this.SendPropertyChanged("OriginInKit");
					this.OnOriginInKitChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(150)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(150)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyNumberRequired", DbType="Bit NOT NULL")]
		public bool PolicyNumberRequired
		{
			get
			{
				return this._PolicyNumberRequired;
			}
			set
			{
				if ((this._PolicyNumberRequired != value))
				{
					this.OnPolicyNumberRequiredChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumberRequired = value;
					this.SendPropertyChanged("PolicyNumberRequired");
					this.OnPolicyNumberRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_OPNote", DbType="NVarChar(500)")]
		public string OPNote
		{
			get
			{
				return this._OPNote;
			}
			set
			{
				if ((this._OPNote != value))
				{
					this.OnOPNoteChanging(value);
					this.SendPropertyChanging();
					this._OPNote = value;
					this.SendPropertyChanged("OPNote");
					this.OnOPNoteChanged();
				}
			}
		}
		
		[Column(Storage="_ReqNote", DbType="NVarChar(500)")]
		public string ReqNote
		{
			get
			{
				return this._ReqNote;
			}
			set
			{
				if ((this._ReqNote != value))
				{
					this.OnReqNoteChanging(value);
					this.SendPropertyChanging();
					this._ReqNote = value;
					this.SendPropertyChanged("ReqNote");
					this.OnReqNoteChanged();
				}
			}
		}
		
		[Column(Storage="_SPNote", DbType="NVarChar(500)")]
		public string SPNote
		{
			get
			{
				return this._SPNote;
			}
			set
			{
				if ((this._SPNote != value))
				{
					this.OnSPNoteChanging(value);
					this.SendPropertyChanging();
					this._SPNote = value;
					this.SendPropertyChanged("SPNote");
					this.OnSPNoteChanged();
				}
			}
		}
		
		[Column(Storage="_DirectOrderNote", DbType="NVarChar(500)")]
		public string DirectOrderNote
		{
			get
			{
				return this._DirectOrderNote;
			}
			set
			{
				if ((this._DirectOrderNote != value))
				{
					this.OnDirectOrderNoteChanging(value);
					this.SendPropertyChanging();
					this._DirectOrderNote = value;
					this.SendPropertyChanged("DirectOrderNote");
					this.OnDirectOrderNoteChanged();
				}
			}
		}
		
		[Column(Storage="_QuickBookID", DbType="NVarChar(15)")]
		public string QuickBookID
		{
			get
			{
				return this._QuickBookID;
			}
			set
			{
				if ((this._QuickBookID != value))
				{
					this.OnQuickBookIDChanging(value);
					this.SendPropertyChanging();
					this._QuickBookID = value;
					this.SendPropertyChanged("QuickBookID");
					this.OnQuickBookIDChanged();
				}
			}
		}
		
		[Association(Name="FK_AgencyInsurance_Insurance", Storage="_AgencyInsurances", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<AgencyInsurance> AgencyInsurances
		{
			get
			{
				return this._AgencyInsurances;
			}
			set
			{
				this._AgencyInsurances.Assign(value);
			}
		}
		
		[Association(Name="FK_AgentInsurance_Insurance", Storage="_AgentInsurances", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<AgentInsurance> AgentInsurances
		{
			get
			{
				return this._AgentInsurances;
			}
			set
			{
				this._AgentInsurances.Assign(value);
			}
		}
		
		[Association(Name="FK_BillingInformation_Insurance", Storage="_BillingInformations", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<BillingInformation> BillingInformations
		{
			get
			{
				return this._BillingInformations;
			}
			set
			{
				this._BillingInformations.Assign(value);
			}
		}
		
		[Association(Name="FK_Insurance_Organization", Storage="_Organization", ThisKey="OrgID", OtherKey="ID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Insurances.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Insurances.Add(this);
						this._OrgID = value.ID;
					}
					else
					{
						this._OrgID = default(System.Guid);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[Association(Name="FK_InsuranceForm_Insurance", Storage="_InsuranceForms", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceForm> InsuranceForms
		{
			get
			{
				return this._InsuranceForms;
			}
			set
			{
				this._InsuranceForms.Assign(value);
			}
		}
		
		[Association(Name="FK_InsuranceLab_Insurance", Storage="_InsuranceLabs", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceLab> InsuranceLabs
		{
			get
			{
				return this._InsuranceLabs;
			}
			set
			{
				this._InsuranceLabs.Assign(value);
			}
		}
		
		[Association(Name="FK_InsuranceLocation_Insurance", Storage="_InsuranceLocations", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceLocation> InsuranceLocations
		{
			get
			{
				return this._InsuranceLocations;
			}
			set
			{
				this._InsuranceLocations.Assign(value);
			}
		}
		
		[Association(Name="FK_InsuranceProductType_Insurance", Storage="_InsuranceProductTypes", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceProductType> InsuranceProductTypes
		{
			get
			{
				return this._InsuranceProductTypes;
			}
			set
			{
				this._InsuranceProductTypes.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyInsurance_Insurance", Storage="_OrderingPartyInsurances", ThisKey="ID", OtherKey="InsuranceID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyInsurance> OrderingPartyInsurances
		{
			get
			{
				return this._OrderingPartyInsurances;
			}
			set
			{
				this._OrderingPartyInsurances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgencyInsurances(AgencyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_AgencyInsurances(AgencyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_AgentInsurances(AgentInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_AgentInsurances(AgentInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_BillingInformations(BillingInformation entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_BillingInformations(BillingInformation entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_InsuranceForms(InsuranceForm entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_InsuranceForms(InsuranceForm entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_InsuranceLabs(InsuranceLab entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_InsuranceLabs(InsuranceLab entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_InsuranceLocations(InsuranceLocation entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_InsuranceLocations(InsuranceLocation entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_InsuranceProductTypes(InsuranceProductType entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_InsuranceProductTypes(InsuranceProductType entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
		
		private void attach_OrderingPartyInsurances(OrderingPartyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_OrderingPartyInsurances(OrderingPartyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
	}
	
	[Table(Name="dbo.InsuranceForm")]
	public partial class InsuranceForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InsuranceID;
		
		private System.Nullable<int> _StateID;
		
		private System.Guid _DocumentID;
		
		private System.Guid _ID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    #endregion
		
		public InsuranceForm()
		{
			this._Document = default(EntityRef<Document>);
			this._Insurance = default(EntityRef<Insurance>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceForm_Document", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.InsuranceForms.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.InsuranceForms.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(System.Guid);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[Association(Name="FK_InsuranceForm_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.InsuranceForms.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.InsuranceForms.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[Association(Name="FK_InsuranceForm_State", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InsuranceForms.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InsuranceForms.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InsuranceLab")]
	public partial class InsuranceLab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InsuranceID;
		
		private System.Nullable<int> _StateID;
		
		private System.Guid _LabID;
		
		private System.Guid _ID;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<Lab> _Lab;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnLabIDChanging(System.Guid value);
    partial void OnLabIDChanged();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    #endregion
		
		public InsuranceLab()
		{
			this._Insurance = default(EntityRef<Insurance>);
			this._Lab = default(EntityRef<Lab>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_LabID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					if (this._Lab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceLab_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.InsuranceLabs.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.InsuranceLabs.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[Association(Name="FK_InsuranceLab_Lab", Storage="_Lab", ThisKey="LabID", OtherKey="ID", IsForeignKey=true)]
		public Lab Lab
		{
			get
			{
				return this._Lab.Entity;
			}
			set
			{
				Lab previousValue = this._Lab.Entity;
				if (((previousValue != value) 
							|| (this._Lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab.Entity = null;
						previousValue.InsuranceLabs.Remove(this);
					}
					this._Lab.Entity = value;
					if ((value != null))
					{
						value.InsuranceLabs.Add(this);
						this._LabID = value.ID;
					}
					else
					{
						this._LabID = default(System.Guid);
					}
					this.SendPropertyChanged("Lab");
				}
			}
		}
		
		[Association(Name="FK_InsuranceLab_State", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InsuranceLabs.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InsuranceLabs.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InsuranceLocation")]
	public partial class InsuranceLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _InsuranceID;
		
		private string _Name;
		
		private EntityRef<Insurance> _Insurance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public InsuranceLocation()
		{
			this._Insurance = default(EntityRef<Insurance>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceLocation_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.InsuranceLocations.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.InsuranceLocations.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InsurancePartner")]
	public partial class InsurancePartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InsuranceID;
		
		private System.Guid _PartnerID;
		
		private string _ReferenceCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnPartnerIDChanging(System.Guid value);
    partial void OnPartnerIDChanged();
    partial void OnReferenceCodeChanging(string value);
    partial void OnReferenceCodeChanged();
    #endregion
		
		public InsurancePartner()
		{
			OnCreated();
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceCode", DbType="NVarChar(36)")]
		public string ReferenceCode
		{
			get
			{
				return this._ReferenceCode;
			}
			set
			{
				if ((this._ReferenceCode != value))
				{
					this.OnReferenceCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferenceCode = value;
					this.SendPropertyChanged("ReferenceCode");
					this.OnReferenceCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InsuranceProductType")]
	public partial class InsuranceProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _InsuranceID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntitySet<InsuranceProductTypeRequirement> _InsuranceProductTypeRequirements;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public InsuranceProductType()
		{
			this._Insurance = default(EntityRef<Insurance>);
			this._InsuranceProductTypeRequirements = new EntitySet<InsuranceProductTypeRequirement>(new Action<InsuranceProductTypeRequirement>(this.attach_InsuranceProductTypeRequirements), new Action<InsuranceProductTypeRequirement>(this.detach_InsuranceProductTypeRequirements));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductType_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.InsuranceProductTypes.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.InsuranceProductTypes.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductType", Storage="_InsuranceProductTypeRequirements", ThisKey="ID", OtherKey="InsuranceProductTypeID", DeleteRule="CASCADE")]
		public EntitySet<InsuranceProductTypeRequirement> InsuranceProductTypeRequirements
		{
			get
			{
				return this._InsuranceProductTypeRequirements;
			}
			set
			{
				this._InsuranceProductTypeRequirements.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_InsuranceProductType", Storage="_Orders", ThisKey="ID", OtherKey="InsuranceProductTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductType = this;
		}
		
		private void detach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductType = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductType = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductType = null;
		}
	}
	
	[Table(Name="dbo.InsuranceProductTypeRequirement")]
	public partial class InsuranceProductTypeRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _InsuranceProductTypeID;
		
		private System.Guid _RowID;
		
		private System.Guid _ColumnID;
		
		private System.Guid _CommandID;
		
		private EntityRef<InsuranceProductType> _InsuranceProductType;
		
		private EntityRef<InsuranceProductTypeRequirementColumn> _InsuranceProductTypeRequirementColumn;
		
		private EntityRef<InsuranceProductTypeRequirementCommand> _InsuranceProductTypeRequirementCommand;
		
		private EntityRef<InsuranceProductTypeRequirementRow> _InsuranceProductTypeRequirementRow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnInsuranceProductTypeIDChanging(System.Guid value);
    partial void OnInsuranceProductTypeIDChanged();
    partial void OnRowIDChanging(System.Guid value);
    partial void OnRowIDChanged();
    partial void OnColumnIDChanging(System.Guid value);
    partial void OnColumnIDChanged();
    partial void OnCommandIDChanging(System.Guid value);
    partial void OnCommandIDChanged();
    #endregion
		
		public InsuranceProductTypeRequirement()
		{
			this._InsuranceProductType = default(EntityRef<InsuranceProductType>);
			this._InsuranceProductTypeRequirementColumn = default(EntityRef<InsuranceProductTypeRequirementColumn>);
			this._InsuranceProductTypeRequirementCommand = default(EntityRef<InsuranceProductTypeRequirementCommand>);
			this._InsuranceProductTypeRequirementRow = default(EntityRef<InsuranceProductTypeRequirementRow>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceProductTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceProductTypeID
		{
			get
			{
				return this._InsuranceProductTypeID;
			}
			set
			{
				if ((this._InsuranceProductTypeID != value))
				{
					if (this._InsuranceProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceProductTypeID = value;
					this.SendPropertyChanged("InsuranceProductTypeID");
					this.OnInsuranceProductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RowID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					if (this._InsuranceProductTypeRequirementRow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ColumnID
		{
			get
			{
				return this._ColumnID;
			}
			set
			{
				if ((this._ColumnID != value))
				{
					if (this._InsuranceProductTypeRequirementColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ColumnID = value;
					this.SendPropertyChanged("ColumnID");
					this.OnColumnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommandID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					if (this._InsuranceProductTypeRequirementCommand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductType", Storage="_InsuranceProductType", ThisKey="InsuranceProductTypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public InsuranceProductType InsuranceProductType
		{
			get
			{
				return this._InsuranceProductType.Entity;
			}
			set
			{
				InsuranceProductType previousValue = this._InsuranceProductType.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceProductType.Entity = null;
						previousValue.InsuranceProductTypeRequirements.Remove(this);
					}
					this._InsuranceProductType.Entity = value;
					if ((value != null))
					{
						value.InsuranceProductTypeRequirements.Add(this);
						this._InsuranceProductTypeID = value.ID;
					}
					else
					{
						this._InsuranceProductTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("InsuranceProductType");
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductTypeRequirementColumn", Storage="_InsuranceProductTypeRequirementColumn", ThisKey="ColumnID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public InsuranceProductTypeRequirementColumn InsuranceProductTypeRequirementColumn
		{
			get
			{
				return this._InsuranceProductTypeRequirementColumn.Entity;
			}
			set
			{
				InsuranceProductTypeRequirementColumn previousValue = this._InsuranceProductTypeRequirementColumn.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceProductTypeRequirementColumn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceProductTypeRequirementColumn.Entity = null;
						previousValue.InsuranceProductTypeRequirements.Remove(this);
					}
					this._InsuranceProductTypeRequirementColumn.Entity = value;
					if ((value != null))
					{
						value.InsuranceProductTypeRequirements.Add(this);
						this._ColumnID = value.ID;
					}
					else
					{
						this._ColumnID = default(System.Guid);
					}
					this.SendPropertyChanged("InsuranceProductTypeRequirementColumn");
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductTypeRequirementCommand", Storage="_InsuranceProductTypeRequirementCommand", ThisKey="CommandID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public InsuranceProductTypeRequirementCommand InsuranceProductTypeRequirementCommand
		{
			get
			{
				return this._InsuranceProductTypeRequirementCommand.Entity;
			}
			set
			{
				InsuranceProductTypeRequirementCommand previousValue = this._InsuranceProductTypeRequirementCommand.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceProductTypeRequirementCommand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceProductTypeRequirementCommand.Entity = null;
						previousValue.InsuranceProductTypeRequirements.Remove(this);
					}
					this._InsuranceProductTypeRequirementCommand.Entity = value;
					if ((value != null))
					{
						value.InsuranceProductTypeRequirements.Add(this);
						this._CommandID = value.ID;
					}
					else
					{
						this._CommandID = default(System.Guid);
					}
					this.SendPropertyChanged("InsuranceProductTypeRequirementCommand");
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductTypeRequirementRow", Storage="_InsuranceProductTypeRequirementRow", ThisKey="RowID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public InsuranceProductTypeRequirementRow InsuranceProductTypeRequirementRow
		{
			get
			{
				return this._InsuranceProductTypeRequirementRow.Entity;
			}
			set
			{
				InsuranceProductTypeRequirementRow previousValue = this._InsuranceProductTypeRequirementRow.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceProductTypeRequirementRow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceProductTypeRequirementRow.Entity = null;
						previousValue.InsuranceProductTypeRequirements.Remove(this);
					}
					this._InsuranceProductTypeRequirementRow.Entity = value;
					if ((value != null))
					{
						value.InsuranceProductTypeRequirements.Add(this);
						this._RowID = value.ID;
					}
					else
					{
						this._RowID = default(System.Guid);
					}
					this.SendPropertyChanged("InsuranceProductTypeRequirementRow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InsuranceProductTypeRequirementColumn")]
	public partial class InsuranceProductTypeRequirementColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _Position;
		
		private int _AmountFrom;
		
		private int _AmountTo;
		
		private EntitySet<InsuranceProductTypeRequirement> _InsuranceProductTypeRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnAmountFromChanging(int value);
    partial void OnAmountFromChanged();
    partial void OnAmountToChanging(int value);
    partial void OnAmountToChanged();
    #endregion
		
		public InsuranceProductTypeRequirementColumn()
		{
			this._InsuranceProductTypeRequirements = new EntitySet<InsuranceProductTypeRequirement>(new Action<InsuranceProductTypeRequirement>(this.attach_InsuranceProductTypeRequirements), new Action<InsuranceProductTypeRequirement>(this.detach_InsuranceProductTypeRequirements));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_AmountFrom", DbType="Int NOT NULL")]
		public int AmountFrom
		{
			get
			{
				return this._AmountFrom;
			}
			set
			{
				if ((this._AmountFrom != value))
				{
					this.OnAmountFromChanging(value);
					this.SendPropertyChanging();
					this._AmountFrom = value;
					this.SendPropertyChanged("AmountFrom");
					this.OnAmountFromChanged();
				}
			}
		}
		
		[Column(Storage="_AmountTo", DbType="Int NOT NULL")]
		public int AmountTo
		{
			get
			{
				return this._AmountTo;
			}
			set
			{
				if ((this._AmountTo != value))
				{
					this.OnAmountToChanging(value);
					this.SendPropertyChanging();
					this._AmountTo = value;
					this.SendPropertyChanged("AmountTo");
					this.OnAmountToChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductTypeRequirementColumn", Storage="_InsuranceProductTypeRequirements", ThisKey="ID", OtherKey="ColumnID", DeleteRule="CASCADE")]
		public EntitySet<InsuranceProductTypeRequirement> InsuranceProductTypeRequirements
		{
			get
			{
				return this._InsuranceProductTypeRequirements;
			}
			set
			{
				this._InsuranceProductTypeRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductTypeRequirementColumn = this;
		}
		
		private void detach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductTypeRequirementColumn = null;
		}
	}
	
	[Table(Name="dbo.InsuranceProductTypeRequirementCommand")]
	public partial class InsuranceProductTypeRequirementCommand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Command;
		
		private EntitySet<InsuranceProductTypeRequirement> _InsuranceProductTypeRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    #endregion
		
		public InsuranceProductTypeRequirementCommand()
		{
			this._InsuranceProductTypeRequirements = new EntitySet<InsuranceProductTypeRequirement>(new Action<InsuranceProductTypeRequirement>(this.attach_InsuranceProductTypeRequirements), new Action<InsuranceProductTypeRequirement>(this.detach_InsuranceProductTypeRequirements));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Command", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductTypeRequirementCommand", Storage="_InsuranceProductTypeRequirements", ThisKey="ID", OtherKey="CommandID", DeleteRule="CASCADE")]
		public EntitySet<InsuranceProductTypeRequirement> InsuranceProductTypeRequirements
		{
			get
			{
				return this._InsuranceProductTypeRequirements;
			}
			set
			{
				this._InsuranceProductTypeRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductTypeRequirementCommand = this;
		}
		
		private void detach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductTypeRequirementCommand = null;
		}
	}
	
	[Table(Name="dbo.InsuranceProductTypeRequirementRow")]
	public partial class InsuranceProductTypeRequirementRow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _Position;
		
		private int _AgeFrom;
		
		private int _AgeTo;
		
		private EntitySet<InsuranceProductTypeRequirement> _InsuranceProductTypeRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnAgeFromChanging(int value);
    partial void OnAgeFromChanged();
    partial void OnAgeToChanging(int value);
    partial void OnAgeToChanged();
    #endregion
		
		public InsuranceProductTypeRequirementRow()
		{
			this._InsuranceProductTypeRequirements = new EntitySet<InsuranceProductTypeRequirement>(new Action<InsuranceProductTypeRequirement>(this.attach_InsuranceProductTypeRequirements), new Action<InsuranceProductTypeRequirement>(this.detach_InsuranceProductTypeRequirements));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_AgeFrom", DbType="Int NOT NULL")]
		public int AgeFrom
		{
			get
			{
				return this._AgeFrom;
			}
			set
			{
				if ((this._AgeFrom != value))
				{
					this.OnAgeFromChanging(value);
					this.SendPropertyChanging();
					this._AgeFrom = value;
					this.SendPropertyChanged("AgeFrom");
					this.OnAgeFromChanged();
				}
			}
		}
		
		[Column(Storage="_AgeTo", DbType="Int NOT NULL")]
		public int AgeTo
		{
			get
			{
				return this._AgeTo;
			}
			set
			{
				if ((this._AgeTo != value))
				{
					this.OnAgeToChanging(value);
					this.SendPropertyChanging();
					this._AgeTo = value;
					this.SendPropertyChanged("AgeTo");
					this.OnAgeToChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceProductTypeRequirement_InsuranceProductTypeRequirementRow", Storage="_InsuranceProductTypeRequirements", ThisKey="ID", OtherKey="RowID", DeleteRule="CASCADE")]
		public EntitySet<InsuranceProductTypeRequirement> InsuranceProductTypeRequirements
		{
			get
			{
				return this._InsuranceProductTypeRequirements;
			}
			set
			{
				this._InsuranceProductTypeRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductTypeRequirementRow = this;
		}
		
		private void detach_InsuranceProductTypeRequirements(InsuranceProductTypeRequirement entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceProductTypeRequirementRow = null;
		}
	}
	
	[Table(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _BillingCompanyID;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<BillingCompany> _BillingCompany;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBillingCompanyIDChanging(System.Guid value);
    partial void OnBillingCompanyIDChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public Invoice()
		{
			this._BillingCompany = default(EntityRef<BillingCompany>);
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillingCompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BillingCompanyID
		{
			get
			{
				return this._BillingCompanyID;
			}
			set
			{
				if ((this._BillingCompanyID != value))
				{
					if (this._BillingCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCompanyID = value;
					this.SendPropertyChanged("BillingCompanyID");
					this.OnBillingCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_Invoice_BillingCompany", Storage="_BillingCompany", ThisKey="BillingCompanyID", OtherKey="ID", IsForeignKey=true)]
		public BillingCompany BillingCompany
		{
			get
			{
				return this._BillingCompany.Entity;
			}
			set
			{
				BillingCompany previousValue = this._BillingCompany.Entity;
				if (((previousValue != value) 
							|| (this._BillingCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingCompany.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._BillingCompany.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._BillingCompanyID = value.ID;
					}
					else
					{
						this._BillingCompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("BillingCompany");
				}
			}
		}
		
		[Association(Name="FK_InvoiceDetails_Invoice", Storage="_InvoiceDetails", ThisKey="ID", OtherKey="InvoiceID", DeleteRule="NO ACTION")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[Table(Name="dbo.InvoiceDetails")]
	public partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceID;
		
		private int _OrderID;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<Order> _Order;
		
		private EntitySet<InvoicePayment> _InvoicePayments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._Order = default(EntityRef<Order>);
			this._InvoicePayments = new EntitySet<InvoicePayment>(new Action<InvoicePayment>(this.attach_InvoicePayments), new Action<InvoicePayment>(this.detach_InvoicePayments));
			OnCreated();
		}
		
		[Column(Storage="_InvoiceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Association(Name="FK_InvoiceDetails_Invoice", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._InvoiceID = value.ID;
					}
					else
					{
						this._InvoiceID = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[Association(Name="FK_InvoiceDetails_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_InvoicePayment_InvoiceDetails", Storage="_InvoicePayments", ThisKey="InvoiceID,OrderID", OtherKey="InvoiceID,OrderID", DeleteRule="NO ACTION")]
		public EntitySet<InvoicePayment> InvoicePayments
		{
			get
			{
				return this._InvoicePayments;
			}
			set
			{
				this._InvoicePayments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoicePayments(InvoicePayment entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceDetail = this;
		}
		
		private void detach_InvoicePayments(InvoicePayment entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceDetail = null;
		}
	}
	
	[Table(Name="dbo.InvoicePayment")]
	public partial class InvoicePayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceID;
		
		private int _OrderID;
		
		private int _PaymentID;
		
		private decimal _AmountPaid;
		
		private EntityRef<InvoiceDetail> _InvoiceDetail;
		
		private EntityRef<Payment> _Payment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnAmountPaidChanging(decimal value);
    partial void OnAmountPaidChanged();
    #endregion
		
		public InvoicePayment()
		{
			this._InvoiceDetail = default(EntityRef<InvoiceDetail>);
			this._Payment = default(EntityRef<Payment>);
			OnCreated();
		}
		
		[Column(Storage="_InvoiceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._InvoiceDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._InvoiceDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[Column(Storage="_AmountPaid", DbType="Money NOT NULL")]
		public decimal AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[Association(Name="FK_InvoicePayment_InvoiceDetails", Storage="_InvoiceDetail", ThisKey="InvoiceID,OrderID", OtherKey="InvoiceID,OrderID", IsForeignKey=true)]
		public InvoiceDetail InvoiceDetail
		{
			get
			{
				return this._InvoiceDetail.Entity;
			}
			set
			{
				InvoiceDetail previousValue = this._InvoiceDetail.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceDetail.Entity = null;
						previousValue.InvoicePayments.Remove(this);
					}
					this._InvoiceDetail.Entity = value;
					if ((value != null))
					{
						value.InvoicePayments.Add(this);
						this._InvoiceID = value.InvoiceID;
						this._OrderID = value.OrderID;
					}
					else
					{
						this._InvoiceID = default(int);
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("InvoiceDetail");
				}
			}
		}
		
		[Association(Name="FK_InvoicePayment_Payment", Storage="_Payment", ThisKey="PaymentID", OtherKey="ID", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.InvoicePayments.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.InvoicePayments.Add(this);
						this._PaymentID = value.ID;
					}
					else
					{
						this._PaymentID = default(int);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Lab")]
	public partial class Lab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<InsuranceLab> _InsuranceLabs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Lab()
		{
			this._InsuranceLabs = new EntitySet<InsuranceLab>(new Action<InsuranceLab>(this.attach_InsuranceLabs), new Action<InsuranceLab>(this.detach_InsuranceLabs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_InsuranceLab_Lab", Storage="_InsuranceLabs", ThisKey="ID", OtherKey="LabID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceLab> InsuranceLabs
		{
			get
			{
				return this._InsuranceLabs;
			}
			set
			{
				this._InsuranceLabs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceLabs(InsuranceLab entity)
		{
			this.SendPropertyChanging();
			entity.Lab = this;
		}
		
		private void detach_InsuranceLabs(InsuranceLab entity)
		{
			this.SendPropertyChanging();
			entity.Lab = null;
		}
	}
	
	[Table(Name="metadata.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ServiceProvider> _ServiceProviders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Language()
		{
			this._ServiceProviders = new EntitySet<ServiceProvider>(new Action<ServiceProvider>(this.attach_ServiceProviders), new Action<ServiceProvider>(this.detach_ServiceProviders));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProvider_Language", Storage="_ServiceProviders", ThisKey="ID", OtherKey="LanguageID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProvider> ServiceProviders
		{
			get
			{
				return this._ServiceProviders;
			}
			set
			{
				this._ServiceProviders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceProviders(ServiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_ServiceProviders(ServiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[Table(Name="dbo.OfficeNote")]
	public partial class OfficeNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Note;
		
		private System.Guid _ObjectID;
		
		private int _ObjectTypeID;
		
		private System.Guid _OfficeNoteCategoryID;
		
		private EntityRef<OfficeNoteCategory> _OfficeNoteCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnObjectIDChanging(System.Guid value);
    partial void OnObjectIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnOfficeNoteCategoryIDChanging(System.Guid value);
    partial void OnOfficeNoteCategoryIDChanged();
    #endregion
		
		public OfficeNote()
		{
			this._OfficeNoteCategory = default(EntityRef<OfficeNoteCategory>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL")]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_OfficeNoteCategoryID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OfficeNoteCategoryID
		{
			get
			{
				return this._OfficeNoteCategoryID;
			}
			set
			{
				if ((this._OfficeNoteCategoryID != value))
				{
					if (this._OfficeNoteCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfficeNoteCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeNoteCategoryID = value;
					this.SendPropertyChanged("OfficeNoteCategoryID");
					this.OnOfficeNoteCategoryIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OfficeNote_OfficeNoteCategory", Storage="_OfficeNoteCategory", ThisKey="OfficeNoteCategoryID", OtherKey="ID", IsForeignKey=true)]
		public OfficeNoteCategory OfficeNoteCategory
		{
			get
			{
				return this._OfficeNoteCategory.Entity;
			}
			set
			{
				OfficeNoteCategory previousValue = this._OfficeNoteCategory.Entity;
				if (((previousValue != value) 
							|| (this._OfficeNoteCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OfficeNoteCategory.Entity = null;
						previousValue.OfficeNotes.Remove(this);
					}
					this._OfficeNoteCategory.Entity = value;
					if ((value != null))
					{
						value.OfficeNotes.Add(this);
						this._OfficeNoteCategoryID = value.ID;
					}
					else
					{
						this._OfficeNoteCategoryID = default(System.Guid);
					}
					this.SendPropertyChanged("OfficeNoteCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OfficeNoteCategory")]
	public partial class OfficeNoteCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<OfficeNote> _OfficeNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OfficeNoteCategory()
		{
			this._OfficeNotes = new EntitySet<OfficeNote>(new Action<OfficeNote>(this.attach_OfficeNotes), new Action<OfficeNote>(this.detach_OfficeNotes));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_OfficeNote_OfficeNoteCategory", Storage="_OfficeNotes", ThisKey="ID", OtherKey="OfficeNoteCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<OfficeNote> OfficeNotes
		{
			get
			{
				return this._OfficeNotes;
			}
			set
			{
				this._OfficeNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OfficeNotes(OfficeNote entity)
		{
			this.SendPropertyChanging();
			entity.OfficeNoteCategory = this;
		}
		
		private void detach_OfficeNotes(OfficeNote entity)
		{
			this.SendPropertyChanging();
			entity.OfficeNoteCategory = null;
		}
	}
	
	[Table(Name="dbo.OfficeNoteGroupNotified")]
	public partial class OfficeNoteGroupNotified
	{
		
		private System.Guid _OfficeNoteID;
		
		private System.Guid _EmployeeGroupID;
		
		public OfficeNoteGroupNotified()
		{
		}
		
		[Column(Storage="_OfficeNoteID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OfficeNoteID
		{
			get
			{
				return this._OfficeNoteID;
			}
			set
			{
				if ((this._OfficeNoteID != value))
				{
					this._OfficeNoteID = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeGroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmployeeGroupID
		{
			get
			{
				return this._EmployeeGroupID;
			}
			set
			{
				if ((this._EmployeeGroupID != value))
				{
					this._EmployeeGroupID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Order")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _InsuranceID;
		
		private System.Nullable<System.Guid> _AgentID;
		
		private string _AgentName;
		
		private System.Nullable<System.Guid> _AgencyID;
		
		private string _AgencyName;
		
		private System.Nullable<System.Guid> _CaseManagerID;
		
		private System.Guid _ApplicantID;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private string _OrderNotes;
		
		private System.Nullable<System.Guid> _OrderTakerID;
		
		private int _OrderStatusID;
		
		private bool _FemaleRequired;
		
		private string _ReferenceCode;
		
		private int _OrderPriortyID;
		
		private string _SmmMailTo;
		
		private string _SmmFaxTo;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private decimal _DiscountAmount;
		
		private System.Nullable<double> _DiscountPercent;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _KitPrice;
		
		private int _OrderTypeID;
		
		private System.Nullable<System.Guid> _OrderingPartyID;
		
		private string _AgentCode;
		
		private string _AgencyCode;
		
		private System.Nullable<int> _PolicyAmount;
		
		private System.Nullable<int> _PolicyNumber;
		
		private System.Guid _InsuranceProductTypeID;
		
		private string _InsuranceLocation;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Agency> _Agency;
		
		private EntityRef<Agent> _Agent;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<InsuranceProductType> _InsuranceProductType;
		
		private EntityRef<OrderingParty> _OrderingParty;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<OrderType> _OrderType;
		
		private EntitySet<OrderAssignment> _OrderAssignments;
		
		private EntitySet<OrderDocument> _OrderDocuments;
		
		private EntitySet<OrderRelative> _OrderRelatives;
		
		private EntitySet<OrderRelative> _OrderRelative_Order1s;
		
		private EntitySet<OrderRelative> _OrderRelative_Order2s;
		
		private EntitySet<OrderRequirement> _OrderRequirements;
		
		private EntitySet<OrderSchedule> _OrderSchedules;
		
		private EntitySet<OrderStatusHistory> _OrderStatusHistories;
		
		private EntitySet<OrderSurcharge> _OrderSurcharges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnAgentIDChanging(System.Nullable<System.Guid> value);
    partial void OnAgentIDChanged();
    partial void OnAgentNameChanging(string value);
    partial void OnAgentNameChanged();
    partial void OnAgencyIDChanging(System.Nullable<System.Guid> value);
    partial void OnAgencyIDChanged();
    partial void OnAgencyNameChanging(string value);
    partial void OnAgencyNameChanged();
    partial void OnCaseManagerIDChanging(System.Nullable<System.Guid> value);
    partial void OnCaseManagerIDChanged();
    partial void OnApplicantIDChanging(System.Guid value);
    partial void OnApplicantIDChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    partial void OnOrderNotesChanging(string value);
    partial void OnOrderNotesChanged();
    partial void OnOrderTakerIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderTakerIDChanged();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnFemaleRequiredChanging(bool value);
    partial void OnFemaleRequiredChanged();
    partial void OnReferenceCodeChanging(string value);
    partial void OnReferenceCodeChanged();
    partial void OnOrderPriortyIDChanging(int value);
    partial void OnOrderPriortyIDChanged();
    partial void OnSmmMailToChanging(string value);
    partial void OnSmmMailToChanged();
    partial void OnSmmFaxToChanging(string value);
    partial void OnSmmFaxToChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDiscountAmountChanging(decimal value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountPercentChanging(System.Nullable<double> value);
    partial void OnDiscountPercentChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnKitPriceChanging(System.Nullable<decimal> value);
    partial void OnKitPriceChanged();
    partial void OnOrderTypeIDChanging(int value);
    partial void OnOrderTypeIDChanged();
    partial void OnOrderingPartyIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderingPartyIDChanged();
    partial void OnAgentCodeChanging(string value);
    partial void OnAgentCodeChanged();
    partial void OnAgencyCodeChanging(string value);
    partial void OnAgencyCodeChanged();
    partial void OnPolicyAmountChanging(System.Nullable<int> value);
    partial void OnPolicyAmountChanged();
    partial void OnPolicyNumberChanging(System.Nullable<int> value);
    partial void OnPolicyNumberChanged();
    partial void OnInsuranceProductTypeIDChanging(System.Guid value);
    partial void OnInsuranceProductTypeIDChanged();
    partial void OnInsuranceLocationChanging(string value);
    partial void OnInsuranceLocationChanged();
    #endregion
		
		public Order()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Agency = default(EntityRef<Agency>);
			this._Agent = default(EntityRef<Agent>);
			this._Applicant = default(EntityRef<Applicant>);
			this._InsuranceProductType = default(EntityRef<InsuranceProductType>);
			this._OrderingParty = default(EntityRef<OrderingParty>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._OrderType = default(EntityRef<OrderType>);
			this._OrderAssignments = new EntitySet<OrderAssignment>(new Action<OrderAssignment>(this.attach_OrderAssignments), new Action<OrderAssignment>(this.detach_OrderAssignments));
			this._OrderDocuments = new EntitySet<OrderDocument>(new Action<OrderDocument>(this.attach_OrderDocuments), new Action<OrderDocument>(this.detach_OrderDocuments));
			this._OrderRelatives = new EntitySet<OrderRelative>(new Action<OrderRelative>(this.attach_OrderRelatives), new Action<OrderRelative>(this.detach_OrderRelatives));
			this._OrderRelative_Order1s = new EntitySet<OrderRelative>(new Action<OrderRelative>(this.attach_OrderRelative_Order1s), new Action<OrderRelative>(this.detach_OrderRelative_Order1s));
			this._OrderRelative_Order2s = new EntitySet<OrderRelative>(new Action<OrderRelative>(this.attach_OrderRelative_Order2s), new Action<OrderRelative>(this.detach_OrderRelative_Order2s));
			this._OrderRequirements = new EntitySet<OrderRequirement>(new Action<OrderRequirement>(this.attach_OrderRequirements), new Action<OrderRequirement>(this.detach_OrderRequirements));
			this._OrderSchedules = new EntitySet<OrderSchedule>(new Action<OrderSchedule>(this.attach_OrderSchedules), new Action<OrderSchedule>(this.detach_OrderSchedules));
			this._OrderStatusHistories = new EntitySet<OrderStatusHistory>(new Action<OrderStatusHistory>(this.attach_OrderStatusHistories), new Action<OrderStatusHistory>(this.detach_OrderStatusHistories));
			this._OrderSurcharges = new EntitySet<OrderSurcharge>(new Action<OrderSurcharge>(this.attach_OrderSurcharges), new Action<OrderSurcharge>(this.detach_OrderSurcharges));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._Agent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentName", DbType="NVarChar(50)")]
		public string AgentName
		{
			get
			{
				return this._AgentName;
			}
			set
			{
				if ((this._AgentName != value))
				{
					this.OnAgentNameChanging(value);
					this.SendPropertyChanging();
					this._AgentName = value;
					this.SendPropertyChanged("AgentName");
					this.OnAgentNameChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					if (this._Agency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyName", DbType="NVarChar(50)")]
		public string AgencyName
		{
			get
			{
				return this._AgencyName;
			}
			set
			{
				if ((this._AgencyName != value))
				{
					this.OnAgencyNameChanging(value);
					this.SendPropertyChanging();
					this._AgencyName = value;
					this.SendPropertyChanged("AgencyName");
					this.OnAgencyNameChanged();
				}
			}
		}
		
		[Column(Storage="_CaseManagerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CaseManagerID
		{
			get
			{
				return this._CaseManagerID;
			}
			set
			{
				if ((this._CaseManagerID != value))
				{
					this.OnCaseManagerIDChanging(value);
					this.SendPropertyChanging();
					this._CaseManagerID = value;
					this.SendPropertyChanged("CaseManagerID");
					this.OnCaseManagerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(200)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(200)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNotes", DbType="NVarChar(1000)")]
		public string OrderNotes
		{
			get
			{
				return this._OrderNotes;
			}
			set
			{
				if ((this._OrderNotes != value))
				{
					this.OnOrderNotesChanging(value);
					this.SendPropertyChanging();
					this._OrderNotes = value;
					this.SendPropertyChanged("OrderNotes");
					this.OnOrderNotesChanged();
				}
			}
		}
		
		[Column(Storage="_OrderTakerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderTakerID
		{
			get
			{
				return this._OrderTakerID;
			}
			set
			{
				if ((this._OrderTakerID != value))
				{
					this.OnOrderTakerIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTakerID = value;
					this.SendPropertyChanged("OrderTakerID");
					this.OnOrderTakerIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusID", DbType="Int NOT NULL")]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_FemaleRequired", DbType="Bit NOT NULL")]
		public bool FemaleRequired
		{
			get
			{
				return this._FemaleRequired;
			}
			set
			{
				if ((this._FemaleRequired != value))
				{
					this.OnFemaleRequiredChanging(value);
					this.SendPropertyChanging();
					this._FemaleRequired = value;
					this.SendPropertyChanged("FemaleRequired");
					this.OnFemaleRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceCode", DbType="NVarChar(36)")]
		public string ReferenceCode
		{
			get
			{
				return this._ReferenceCode;
			}
			set
			{
				if ((this._ReferenceCode != value))
				{
					this.OnReferenceCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferenceCode = value;
					this.SendPropertyChanged("ReferenceCode");
					this.OnReferenceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_OrderPriortyID", DbType="Int NOT NULL")]
		public int OrderPriortyID
		{
			get
			{
				return this._OrderPriortyID;
			}
			set
			{
				if ((this._OrderPriortyID != value))
				{
					this.OnOrderPriortyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderPriortyID = value;
					this.SendPropertyChanged("OrderPriortyID");
					this.OnOrderPriortyIDChanged();
				}
			}
		}
		
		[Column(Storage="_SmmMailTo", DbType="NVarChar(200)")]
		public string SmmMailTo
		{
			get
			{
				return this._SmmMailTo;
			}
			set
			{
				if ((this._SmmMailTo != value))
				{
					this.OnSmmMailToChanging(value);
					this.SendPropertyChanging();
					this._SmmMailTo = value;
					this.SendPropertyChanged("SmmMailTo");
					this.OnSmmMailToChanged();
				}
			}
		}
		
		[Column(Storage="_SmmFaxTo", DbType="NVarChar(200)")]
		public string SmmFaxTo
		{
			get
			{
				return this._SmmFaxTo;
			}
			set
			{
				if ((this._SmmFaxTo != value))
				{
					this.OnSmmFaxToChanging(value);
					this.SendPropertyChanging();
					this._SmmFaxTo = value;
					this.SendPropertyChanged("SmmFaxTo");
					this.OnSmmFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Money NOT NULL")]
		public decimal DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountPercent", DbType="Float")]
		public System.Nullable<double> DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_KitPrice", DbType="Money")]
		public System.Nullable<decimal> KitPrice
		{
			get
			{
				return this._KitPrice;
			}
			set
			{
				if ((this._KitPrice != value))
				{
					this.OnKitPriceChanging(value);
					this.SendPropertyChanging();
					this._KitPrice = value;
					this.SendPropertyChanged("KitPrice");
					this.OnKitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_OrderTypeID", DbType="Int NOT NULL")]
		public int OrderTypeID
		{
			get
			{
				return this._OrderTypeID;
			}
			set
			{
				if ((this._OrderTypeID != value))
				{
					if (this._OrderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTypeID = value;
					this.SendPropertyChanged("OrderTypeID");
					this.OnOrderTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderingPartyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderingPartyID
		{
			get
			{
				return this._OrderingPartyID;
			}
			set
			{
				if ((this._OrderingPartyID != value))
				{
					if (this._OrderingParty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyID = value;
					this.SendPropertyChanged("OrderingPartyID");
					this.OnOrderingPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentCode", DbType="NVarChar(50)")]
		public string AgentCode
		{
			get
			{
				return this._AgentCode;
			}
			set
			{
				if ((this._AgentCode != value))
				{
					this.OnAgentCodeChanging(value);
					this.SendPropertyChanging();
					this._AgentCode = value;
					this.SendPropertyChanged("AgentCode");
					this.OnAgentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyCode", DbType="NVarChar(50)")]
		public string AgencyCode
		{
			get
			{
				return this._AgencyCode;
			}
			set
			{
				if ((this._AgencyCode != value))
				{
					this.OnAgencyCodeChanging(value);
					this.SendPropertyChanging();
					this._AgencyCode = value;
					this.SendPropertyChanged("AgencyCode");
					this.OnAgencyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyAmount", DbType="Int")]
		public System.Nullable<int> PolicyAmount
		{
			get
			{
				return this._PolicyAmount;
			}
			set
			{
				if ((this._PolicyAmount != value))
				{
					this.OnPolicyAmountChanging(value);
					this.SendPropertyChanging();
					this._PolicyAmount = value;
					this.SendPropertyChanged("PolicyAmount");
					this.OnPolicyAmountChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyNumber", DbType="Int")]
		public System.Nullable<int> PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this.OnPolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumber = value;
					this.SendPropertyChanged("PolicyNumber");
					this.OnPolicyNumberChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceProductTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceProductTypeID
		{
			get
			{
				return this._InsuranceProductTypeID;
			}
			set
			{
				if ((this._InsuranceProductTypeID != value))
				{
					if (this._InsuranceProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceProductTypeID = value;
					this.SendPropertyChanged("InsuranceProductTypeID");
					this.OnInsuranceProductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceLocation", DbType="NVarChar(50)")]
		public string InsuranceLocation
		{
			get
			{
				return this._InsuranceLocation;
			}
			set
			{
				if ((this._InsuranceLocation != value))
				{
					this.OnInsuranceLocationChanging(value);
					this.SendPropertyChanging();
					this._InsuranceLocation = value;
					this.SendPropertyChanged("InsuranceLocation");
					this.OnInsuranceLocationChanged();
				}
			}
		}
		
		[Association(Name="FK_InvoiceDetails_Order", Storage="_InvoiceDetails", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_Agency", Storage="_Agency", ThisKey="AgencyID", OtherKey="ID", IsForeignKey=true)]
		public Agency Agency
		{
			get
			{
				return this._Agency.Entity;
			}
			set
			{
				Agency previousValue = this._Agency.Entity;
				if (((previousValue != value) 
							|| (this._Agency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agency.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Agency.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AgencyID = value.ID;
					}
					else
					{
						this._AgencyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Agency");
				}
			}
		}
		
		[Association(Name="FK_Order_Agent", Storage="_Agent", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public Agent Agent
		{
			get
			{
				return this._Agent.Entity;
			}
			set
			{
				Agent previousValue = this._Agent.Entity;
				if (((previousValue != value) 
							|| (this._Agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agent.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Agent.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Agent");
				}
			}
		}
		
		[Association(Name="FK_Order_Applicant", Storage="_Applicant", ThisKey="ApplicantID", OtherKey="ID", IsForeignKey=true)]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ApplicantID = value.ID;
					}
					else
					{
						this._ApplicantID = default(System.Guid);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[Association(Name="FK_Order_InsuranceProductType", Storage="_InsuranceProductType", ThisKey="InsuranceProductTypeID", OtherKey="ID", IsForeignKey=true)]
		public InsuranceProductType InsuranceProductType
		{
			get
			{
				return this._InsuranceProductType.Entity;
			}
			set
			{
				InsuranceProductType previousValue = this._InsuranceProductType.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceProductType.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._InsuranceProductType.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._InsuranceProductTypeID = value.ID;
					}
					else
					{
						this._InsuranceProductTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("InsuranceProductType");
				}
			}
		}
		
		[Association(Name="FK_Order_OrderingParty", Storage="_OrderingParty", ThisKey="OrderingPartyID", OtherKey="ID", IsForeignKey=true)]
		public OrderingParty OrderingParty
		{
			get
			{
				return this._OrderingParty.Entity;
			}
			set
			{
				OrderingParty previousValue = this._OrderingParty.Entity;
				if (((previousValue != value) 
							|| (this._OrderingParty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingParty.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderingParty.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderingPartyID = value.ID;
					}
					else
					{
						this._OrderingPartyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderingParty");
				}
			}
		}
		
		[Association(Name="FK_Order_OrderStatus", Storage="_OrderStatus", ThisKey="OrderStatusID", OtherKey="ID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusID = value.ID;
					}
					else
					{
						this._OrderStatusID = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[Association(Name="FK_Order_OrderType", Storage="_OrderType", ThisKey="OrderTypeID", OtherKey="ID", IsForeignKey=true)]
		public OrderType OrderType
		{
			get
			{
				return this._OrderType.Entity;
			}
			set
			{
				OrderType previousValue = this._OrderType.Entity;
				if (((previousValue != value) 
							|| (this._OrderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderType.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderType.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderTypeID = value.ID;
					}
					else
					{
						this._OrderTypeID = default(int);
					}
					this.SendPropertyChanged("OrderType");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_Order", Storage="_OrderAssignments", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignment> OrderAssignments
		{
			get
			{
				return this._OrderAssignments;
			}
			set
			{
				this._OrderAssignments.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocument_Order", Storage="_OrderDocuments", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocument> OrderDocuments
		{
			get
			{
				return this._OrderDocuments;
			}
			set
			{
				this._OrderDocuments.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderRelative_Order", Storage="_OrderRelatives", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderRelative> OrderRelatives
		{
			get
			{
				return this._OrderRelatives;
			}
			set
			{
				this._OrderRelatives.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderRelative_Order1", Storage="_OrderRelative_Order1s", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderRelative> OrderRelative_Order1s
		{
			get
			{
				return this._OrderRelative_Order1s;
			}
			set
			{
				this._OrderRelative_Order1s.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderRelative_Order2", Storage="_OrderRelative_Order2s", ThisKey="ID", OtherKey="OrderRelativeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderRelative> OrderRelative_Order2s
		{
			get
			{
				return this._OrderRelative_Order2s;
			}
			set
			{
				this._OrderRelative_Order2s.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderRequirement_Order", Storage="_OrderRequirements", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderRequirement> OrderRequirements
		{
			get
			{
				return this._OrderRequirements;
			}
			set
			{
				this._OrderRequirements.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderSchedule_Order", Storage="_OrderSchedules", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderSchedule> OrderSchedules
		{
			get
			{
				return this._OrderSchedules;
			}
			set
			{
				this._OrderSchedules.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderStatusHistory_Order", Storage="_OrderStatusHistories", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderStatusHistory> OrderStatusHistories
		{
			get
			{
				return this._OrderStatusHistories;
			}
			set
			{
				this._OrderStatusHistories.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderSurcharges_Order", Storage="_OrderSurcharges", ThisKey="ID", OtherKey="OrderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderSurcharge> OrderSurcharges
		{
			get
			{
				return this._OrderSurcharges;
			}
			set
			{
				this._OrderSurcharges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderRelatives(OrderRelative entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderRelatives(OrderRelative entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderRelative_Order1s(OrderRelative entity)
		{
			this.SendPropertyChanging();
			entity.OrderRelative_Order1 = this;
		}
		
		private void detach_OrderRelative_Order1s(OrderRelative entity)
		{
			this.SendPropertyChanging();
			entity.OrderRelative_Order1 = null;
		}
		
		private void attach_OrderRelative_Order2s(OrderRelative entity)
		{
			this.SendPropertyChanging();
			entity.OrderRelative_Order2 = this;
		}
		
		private void detach_OrderRelative_Order2s(OrderRelative entity)
		{
			this.SendPropertyChanging();
			entity.OrderRelative_Order2 = null;
		}
		
		private void attach_OrderRequirements(OrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderRequirements(OrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderSchedules(OrderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderSchedules(OrderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderStatusHistories(OrderStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderStatusHistories(OrderStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderSurcharges(OrderSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderSurcharges(OrderSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.OrderAssignment")]
	public partial class OrderAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _OrderID;
		
		private System.Nullable<System.Guid> _ServiceProviderID;
		
		private bool _IsPayed;
		
		private int _OrderAssignmentStatusID;
		
		private System.Nullable<System.DateTime> _StatusDate;
		
		private System.Nullable<System.DateTime> _ScheduleDate;
		
		private System.Nullable<System.DateTime> _ReceivedDate;
		
		private System.Nullable<System.Guid> _ReceivedBy;
		
		private System.Nullable<System.DateTime> _MailDate;
		
		private System.Nullable<System.Guid> _MailBy;
		
		private string _BarCode;
		
		private string _AirBill;
		
		private bool _IsRescheduled;
		
		private System.Nullable<decimal> _ReqFee;
		
		private System.Nullable<decimal> _KitFee;
		
		private System.Nullable<decimal> _DiscountAmount;
		
		private System.Nullable<double> _DiscountPercent;
		
		private string _LabSlip;
		
		private string _Instruction;
		
		private EntitySet<AccountPayable> _AccountPayables;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _MailByEmployee;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<OrderAssignmentStatus> _OrderAssignmentStatus;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
		private EntitySet<OrderAssignmentFee> _OrderAssignmentFees;
		
		private EntitySet<OrderAssignmentReq> _OrderAssignmentReqs;
		
		private EntitySet<OrderAssignmentStatusHistory> _OrderAssignmentStatusHistories;
		
		private EntitySet<OrderPaperworkStatusHistory> _OrderPaperworkStatusHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnServiceProviderIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceProviderIDChanged();
    partial void OnIsPayedChanging(bool value);
    partial void OnIsPayedChanged();
    partial void OnOrderAssignmentStatusIDChanging(int value);
    partial void OnOrderAssignmentStatusIDChanged();
    partial void OnStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStatusDateChanged();
    partial void OnScheduleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduleDateChanged();
    partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedDateChanged();
    partial void OnReceivedByChanging(System.Nullable<System.Guid> value);
    partial void OnReceivedByChanged();
    partial void OnMailDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMailDateChanged();
    partial void OnMailByChanging(System.Nullable<System.Guid> value);
    partial void OnMailByChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnAirBillChanging(string value);
    partial void OnAirBillChanged();
    partial void OnIsRescheduledChanging(bool value);
    partial void OnIsRescheduledChanged();
    partial void OnReqFeeChanging(System.Nullable<decimal> value);
    partial void OnReqFeeChanged();
    partial void OnKitFeeChanging(System.Nullable<decimal> value);
    partial void OnKitFeeChanged();
    partial void OnDiscountAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountPercentChanging(System.Nullable<double> value);
    partial void OnDiscountPercentChanged();
    partial void OnLabSlipChanging(string value);
    partial void OnLabSlipChanged();
    partial void OnInstructionChanging(string value);
    partial void OnInstructionChanged();
    #endregion
		
		public OrderAssignment()
		{
			this._AccountPayables = new EntitySet<AccountPayable>(new Action<AccountPayable>(this.attach_AccountPayables), new Action<AccountPayable>(this.detach_AccountPayables));
			this._Employee = default(EntityRef<Employee>);
			this._MailByEmployee = default(EntityRef<Employee>);
			this._Order = default(EntityRef<Order>);
			this._OrderAssignmentStatus = default(EntityRef<OrderAssignmentStatus>);
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			this._OrderAssignmentFees = new EntitySet<OrderAssignmentFee>(new Action<OrderAssignmentFee>(this.attach_OrderAssignmentFees), new Action<OrderAssignmentFee>(this.detach_OrderAssignmentFees));
			this._OrderAssignmentReqs = new EntitySet<OrderAssignmentReq>(new Action<OrderAssignmentReq>(this.attach_OrderAssignmentReqs), new Action<OrderAssignmentReq>(this.detach_OrderAssignmentReqs));
			this._OrderAssignmentStatusHistories = new EntitySet<OrderAssignmentStatusHistory>(new Action<OrderAssignmentStatusHistory>(this.attach_OrderAssignmentStatusHistories), new Action<OrderAssignmentStatusHistory>(this.detach_OrderAssignmentStatusHistories));
			this._OrderPaperworkStatusHistories = new EntitySet<OrderPaperworkStatusHistory>(new Action<OrderPaperworkStatusHistory>(this.attach_OrderPaperworkStatusHistories), new Action<OrderPaperworkStatusHistory>(this.detach_OrderPaperworkStatusHistories));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPayed", DbType="Bit NOT NULL")]
		public bool IsPayed
		{
			get
			{
				return this._IsPayed;
			}
			set
			{
				if ((this._IsPayed != value))
				{
					this.OnIsPayedChanging(value);
					this.SendPropertyChanging();
					this._IsPayed = value;
					this.SendPropertyChanged("IsPayed");
					this.OnIsPayedChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentStatusID", DbType="Int NOT NULL")]
		public int OrderAssignmentStatusID
		{
			get
			{
				return this._OrderAssignmentStatusID;
			}
			set
			{
				if ((this._OrderAssignmentStatusID != value))
				{
					if (this._OrderAssignmentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentStatusID = value;
					this.SendPropertyChanged("OrderAssignmentStatusID");
					this.OnOrderAssignmentStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatusDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StatusDate
		{
			get
			{
				return this._StatusDate;
			}
			set
			{
				if ((this._StatusDate != value))
				{
					this.OnStatusDateChanging(value);
					this.SendPropertyChanging();
					this._StatusDate = value;
					this.SendPropertyChanged("StatusDate");
					this.OnStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_ScheduleDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ScheduleDate
		{
			get
			{
				return this._ScheduleDate;
			}
			set
			{
				if ((this._ScheduleDate != value))
				{
					this.OnScheduleDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduleDate = value;
					this.SendPropertyChanged("ScheduleDate");
					this.OnScheduleDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReceivedBy
		{
			get
			{
				return this._ReceivedBy;
			}
			set
			{
				if ((this._ReceivedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceivedByChanging(value);
					this.SendPropertyChanging();
					this._ReceivedBy = value;
					this.SendPropertyChanged("ReceivedBy");
					this.OnReceivedByChanged();
				}
			}
		}
		
		[Column(Storage="_MailDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MailDate
		{
			get
			{
				return this._MailDate;
			}
			set
			{
				if ((this._MailDate != value))
				{
					this.OnMailDateChanging(value);
					this.SendPropertyChanging();
					this._MailDate = value;
					this.SendPropertyChanged("MailDate");
					this.OnMailDateChanged();
				}
			}
		}
		
		[Column(Storage="_MailBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MailBy
		{
			get
			{
				return this._MailBy;
			}
			set
			{
				if ((this._MailBy != value))
				{
					if (this._MailByEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMailByChanging(value);
					this.SendPropertyChanging();
					this._MailBy = value;
					this.SendPropertyChanged("MailBy");
					this.OnMailByChanged();
				}
			}
		}
		
		[Column(Storage="_BarCode", DbType="NChar(20)")]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AirBill", DbType="NVarChar(15)")]
		public string AirBill
		{
			get
			{
				return this._AirBill;
			}
			set
			{
				if ((this._AirBill != value))
				{
					this.OnAirBillChanging(value);
					this.SendPropertyChanging();
					this._AirBill = value;
					this.SendPropertyChanged("AirBill");
					this.OnAirBillChanged();
				}
			}
		}
		
		[Column(Storage="_IsRescheduled", DbType="Bit NOT NULL")]
		public bool IsRescheduled
		{
			get
			{
				return this._IsRescheduled;
			}
			set
			{
				if ((this._IsRescheduled != value))
				{
					this.OnIsRescheduledChanging(value);
					this.SendPropertyChanging();
					this._IsRescheduled = value;
					this.SendPropertyChanged("IsRescheduled");
					this.OnIsRescheduledChanged();
				}
			}
		}
		
		[Column(Storage="_ReqFee", DbType="Money")]
		public System.Nullable<decimal> ReqFee
		{
			get
			{
				return this._ReqFee;
			}
			set
			{
				if ((this._ReqFee != value))
				{
					this.OnReqFeeChanging(value);
					this.SendPropertyChanging();
					this._ReqFee = value;
					this.SendPropertyChanged("ReqFee");
					this.OnReqFeeChanged();
				}
			}
		}
		
		[Column(Storage="_KitFee", DbType="Money")]
		public System.Nullable<decimal> KitFee
		{
			get
			{
				return this._KitFee;
			}
			set
			{
				if ((this._KitFee != value))
				{
					this.OnKitFeeChanging(value);
					this.SendPropertyChanging();
					this._KitFee = value;
					this.SendPropertyChanged("KitFee");
					this.OnKitFeeChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Money")]
		public System.Nullable<decimal> DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountPercent", DbType="Float")]
		public System.Nullable<double> DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[Column(Storage="_LabSlip", DbType="NVarChar(50)")]
		public string LabSlip
		{
			get
			{
				return this._LabSlip;
			}
			set
			{
				if ((this._LabSlip != value))
				{
					this.OnLabSlipChanging(value);
					this.SendPropertyChanging();
					this._LabSlip = value;
					this.SendPropertyChanged("LabSlip");
					this.OnLabSlipChanged();
				}
			}
		}
		
		[Column(Storage="_Instruction", DbType="NVarChar(250)")]
		public string Instruction
		{
			get
			{
				return this._Instruction;
			}
			set
			{
				if ((this._Instruction != value))
				{
					this.OnInstructionChanging(value);
					this.SendPropertyChanging();
					this._Instruction = value;
					this.SendPropertyChanged("Instruction");
					this.OnInstructionChanged();
				}
			}
		}
		
		[Association(Name="FK_AccountPayable_OrderAssignment", Storage="_AccountPayables", ThisKey="ID", OtherKey="OrderAssignmentID", DeleteRule="NO ACTION")]
		public EntitySet<AccountPayable> AccountPayables
		{
			get
			{
				return this._AccountPayables;
			}
			set
			{
				this._AccountPayables.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignment_Employee", Storage="_Employee", ThisKey="ReceivedBy", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderAssignments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderAssignments.Add(this);
						this._ReceivedBy = value.ID;
					}
					else
					{
						this._ReceivedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_MailBy", Storage="_MailByEmployee", ThisKey="MailBy", OtherKey="ID", IsForeignKey=true)]
		public Employee MailByEmployee
		{
			get
			{
				return this._MailByEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._MailByEmployee.Entity;
				if (((previousValue != value) 
							|| (this._MailByEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MailByEmployee.Entity = null;
						previousValue.OrderAssignment_MailBies.Remove(this);
					}
					this._MailByEmployee.Entity = value;
					if ((value != null))
					{
						value.OrderAssignment_MailBies.Add(this);
						this._MailBy = value.ID;
					}
					else
					{
						this._MailBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MailByEmployee");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderAssignments.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderAssignments.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_OrderAssignmentStatus", Storage="_OrderAssignmentStatus", ThisKey="OrderAssignmentStatusID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignmentStatus OrderAssignmentStatus
		{
			get
			{
				return this._OrderAssignmentStatus.Entity;
			}
			set
			{
				OrderAssignmentStatus previousValue = this._OrderAssignmentStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignmentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignmentStatus.Entity = null;
						previousValue.OrderAssignments.Remove(this);
					}
					this._OrderAssignmentStatus.Entity = value;
					if ((value != null))
					{
						value.OrderAssignments.Add(this);
						this._OrderAssignmentStatusID = value.ID;
					}
					else
					{
						this._OrderAssignmentStatusID = default(int);
					}
					this.SendPropertyChanged("OrderAssignmentStatus");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.OrderAssignments.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.OrderAssignments.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignmentFee_OrderAssignment", Storage="_OrderAssignmentFees", ThisKey="ID", OtherKey="OrderAssignmentID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignmentFee> OrderAssignmentFees
		{
			get
			{
				return this._OrderAssignmentFees;
			}
			set
			{
				this._OrderAssignmentFees.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignmentReq_OrderAssignment", Storage="_OrderAssignmentReqs", ThisKey="ID", OtherKey="OrderAssignmentID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignmentReq> OrderAssignmentReqs
		{
			get
			{
				return this._OrderAssignmentReqs;
			}
			set
			{
				this._OrderAssignmentReqs.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignmentStatusHistory_OrderAssignment", Storage="_OrderAssignmentStatusHistories", ThisKey="ID", OtherKey="OrderAssignmentID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignmentStatusHistory> OrderAssignmentStatusHistories
		{
			get
			{
				return this._OrderAssignmentStatusHistories;
			}
			set
			{
				this._OrderAssignmentStatusHistories.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderPaperworkStatusHistory_OrderAssignment", Storage="_OrderPaperworkStatusHistories", ThisKey="ID", OtherKey="OrderAssignmentID", DeleteRule="NO ACTION")]
		public EntitySet<OrderPaperworkStatusHistory> OrderPaperworkStatusHistories
		{
			get
			{
				return this._OrderPaperworkStatusHistories;
			}
			set
			{
				this._OrderPaperworkStatusHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPayables(AccountPayable entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = this;
		}
		
		private void detach_AccountPayables(AccountPayable entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = null;
		}
		
		private void attach_OrderAssignmentFees(OrderAssignmentFee entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = this;
		}
		
		private void detach_OrderAssignmentFees(OrderAssignmentFee entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = null;
		}
		
		private void attach_OrderAssignmentReqs(OrderAssignmentReq entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = this;
		}
		
		private void detach_OrderAssignmentReqs(OrderAssignmentReq entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = null;
		}
		
		private void attach_OrderAssignmentStatusHistories(OrderAssignmentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = this;
		}
		
		private void detach_OrderAssignmentStatusHistories(OrderAssignmentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = null;
		}
		
		private void attach_OrderPaperworkStatusHistories(OrderPaperworkStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = this;
		}
		
		private void detach_OrderPaperworkStatusHistories(OrderPaperworkStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignment = null;
		}
	}
	
	[Table(Name="dbo.OrderAssignmentFee")]
	public partial class OrderAssignmentFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _OrderAssignmentID;
		
		private int _OrderAssignmentFeeTypeID;
		
		private decimal _Fee;
		
		private EntitySet<AccountPayableDetail> _AccountPayableDetails;
		
		private EntityRef<OrderAssignment> _OrderAssignment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderAssignmentIDChanging(System.Guid value);
    partial void OnOrderAssignmentIDChanged();
    partial void OnOrderAssignmentFeeTypeIDChanging(int value);
    partial void OnOrderAssignmentFeeTypeIDChanged();
    partial void OnFeeChanging(decimal value);
    partial void OnFeeChanged();
    #endregion
		
		public OrderAssignmentFee()
		{
			this._AccountPayableDetails = new EntitySet<AccountPayableDetail>(new Action<AccountPayableDetail>(this.attach_AccountPayableDetails), new Action<AccountPayableDetail>(this.detach_AccountPayableDetails));
			this._OrderAssignment = default(EntityRef<OrderAssignment>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderAssignmentID
		{
			get
			{
				return this._OrderAssignmentID;
			}
			set
			{
				if ((this._OrderAssignmentID != value))
				{
					if (this._OrderAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentID = value;
					this.SendPropertyChanged("OrderAssignmentID");
					this.OnOrderAssignmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentFeeTypeID", DbType="Int NOT NULL")]
		public int OrderAssignmentFeeTypeID
		{
			get
			{
				return this._OrderAssignmentFeeTypeID;
			}
			set
			{
				if ((this._OrderAssignmentFeeTypeID != value))
				{
					this.OnOrderAssignmentFeeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentFeeTypeID = value;
					this.SendPropertyChanged("OrderAssignmentFeeTypeID");
					this.OnOrderAssignmentFeeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Fee", DbType="Money NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[Association(Name="FK_AccountPayableDetails_OrderAssignmentFee", Storage="_AccountPayableDetails", ThisKey="ID", OtherKey="OrderAssignmentFeeID", DeleteRule="NO ACTION")]
		public EntitySet<AccountPayableDetail> AccountPayableDetails
		{
			get
			{
				return this._AccountPayableDetails;
			}
			set
			{
				this._AccountPayableDetails.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignmentFee_OrderAssignment", Storage="_OrderAssignment", ThisKey="OrderAssignmentID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignment OrderAssignment
		{
			get
			{
				return this._OrderAssignment.Entity;
			}
			set
			{
				OrderAssignment previousValue = this._OrderAssignment.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignment.Entity = null;
						previousValue.OrderAssignmentFees.Remove(this);
					}
					this._OrderAssignment.Entity = value;
					if ((value != null))
					{
						value.OrderAssignmentFees.Add(this);
						this._OrderAssignmentID = value.ID;
					}
					else
					{
						this._OrderAssignmentID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderAssignment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPayableDetails(AccountPayableDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignmentFee = this;
		}
		
		private void detach_AccountPayableDetails(AccountPayableDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignmentFee = null;
		}
	}
	
	[Table(Name="dbo.OrderAssignmentReq")]
	public partial class OrderAssignmentReq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderAssignmentID;
		
		private System.Guid _RequirementID;
		
		private EntityRef<OrderAssignment> _OrderAssignment;
		
		private EntityRef<Requirement> _Requirement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderAssignmentIDChanging(System.Guid value);
    partial void OnOrderAssignmentIDChanged();
    partial void OnRequirementIDChanging(System.Guid value);
    partial void OnRequirementIDChanged();
    #endregion
		
		public OrderAssignmentReq()
		{
			this._OrderAssignment = default(EntityRef<OrderAssignment>);
			this._Requirement = default(EntityRef<Requirement>);
			OnCreated();
		}
		
		[Column(Storage="_OrderAssignmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderAssignmentID
		{
			get
			{
				return this._OrderAssignmentID;
			}
			set
			{
				if ((this._OrderAssignmentID != value))
				{
					if (this._OrderAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentID = value;
					this.SendPropertyChanged("OrderAssignmentID");
					this.OnOrderAssignmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementID
		{
			get
			{
				return this._RequirementID;
			}
			set
			{
				if ((this._RequirementID != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementID = value;
					this.SendPropertyChanged("RequirementID");
					this.OnRequirementIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderAssignmentReq_OrderAssignment", Storage="_OrderAssignment", ThisKey="OrderAssignmentID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignment OrderAssignment
		{
			get
			{
				return this._OrderAssignment.Entity;
			}
			set
			{
				OrderAssignment previousValue = this._OrderAssignment.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignment.Entity = null;
						previousValue.OrderAssignmentReqs.Remove(this);
					}
					this._OrderAssignment.Entity = value;
					if ((value != null))
					{
						value.OrderAssignmentReqs.Add(this);
						this._OrderAssignmentID = value.ID;
					}
					else
					{
						this._OrderAssignmentID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderAssignment");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignmentReq_Requirement", Storage="_Requirement", ThisKey="RequirementID", OtherKey="ID", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.OrderAssignmentReqs.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.OrderAssignmentReqs.Add(this);
						this._RequirementID = value.ID;
					}
					else
					{
						this._RequirementID = default(System.Guid);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.OrderAssignmentStatus")]
	public partial class OrderAssignmentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _NoteRequired;
		
		private EntitySet<OrderAssignment> _OrderAssignments;
		
		private EntitySet<OrderAssignmentStatusHistory> _OrderAssignmentStatusHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteRequiredChanging(bool value);
    partial void OnNoteRequiredChanged();
    #endregion
		
		public OrderAssignmentStatus()
		{
			this._OrderAssignments = new EntitySet<OrderAssignment>(new Action<OrderAssignment>(this.attach_OrderAssignments), new Action<OrderAssignment>(this.detach_OrderAssignments));
			this._OrderAssignmentStatusHistories = new EntitySet<OrderAssignmentStatusHistory>(new Action<OrderAssignmentStatusHistory>(this.attach_OrderAssignmentStatusHistories), new Action<OrderAssignmentStatusHistory>(this.detach_OrderAssignmentStatusHistories));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_NoteRequired", DbType="Bit NOT NULL")]
		public bool NoteRequired
		{
			get
			{
				return this._NoteRequired;
			}
			set
			{
				if ((this._NoteRequired != value))
				{
					this.OnNoteRequiredChanging(value);
					this.SendPropertyChanging();
					this._NoteRequired = value;
					this.SendPropertyChanged("NoteRequired");
					this.OnNoteRequiredChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderAssignment_OrderAssignmentStatus", Storage="_OrderAssignments", ThisKey="ID", OtherKey="OrderAssignmentStatusID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignment> OrderAssignments
		{
			get
			{
				return this._OrderAssignments;
			}
			set
			{
				this._OrderAssignments.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignmentStatusHistory_OrderAssignmentStatus", Storage="_OrderAssignmentStatusHistories", ThisKey="ID", OtherKey="OrderAssignmentStatusID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignmentStatusHistory> OrderAssignmentStatusHistories
		{
			get
			{
				return this._OrderAssignmentStatusHistories;
			}
			set
			{
				this._OrderAssignmentStatusHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignmentStatus = this;
		}
		
		private void detach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignmentStatus = null;
		}
		
		private void attach_OrderAssignmentStatusHistories(OrderAssignmentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignmentStatus = this;
		}
		
		private void detach_OrderAssignmentStatusHistories(OrderAssignmentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderAssignmentStatus = null;
		}
	}
	
	[Table(Name="dbo.OrderAssignmentStatusHistory")]
	public partial class OrderAssignmentStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _OrderAssignmentID;
		
		private int _OrderAssignmentStatusID;
		
		private string _Note;
		
		private bool _NotifyCSR;
		
		private bool _NotifyNoShow;
		
		private bool _IsPosted;
		
		private bool _NeedToReview;
		
		private System.Nullable<System.DateTime> _StatusDate;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _ReviewedDate;
		
		private System.Nullable<System.Guid> _PostedBy;
		
		private EntityRef<OrderAssignment> _OrderAssignment;
		
		private EntityRef<OrderAssignmentStatus> _OrderAssignmentStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderAssignmentIDChanging(System.Guid value);
    partial void OnOrderAssignmentIDChanged();
    partial void OnOrderAssignmentStatusIDChanging(int value);
    partial void OnOrderAssignmentStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnNotifyCSRChanging(bool value);
    partial void OnNotifyCSRChanged();
    partial void OnNotifyNoShowChanging(bool value);
    partial void OnNotifyNoShowChanged();
    partial void OnIsPostedChanging(bool value);
    partial void OnIsPostedChanged();
    partial void OnNeedToReviewChanging(bool value);
    partial void OnNeedToReviewChanged();
    partial void OnStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStatusDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnReviewedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviewedDateChanged();
    partial void OnPostedByChanging(System.Nullable<System.Guid> value);
    partial void OnPostedByChanged();
    #endregion
		
		public OrderAssignmentStatusHistory()
		{
			this._OrderAssignment = default(EntityRef<OrderAssignment>);
			this._OrderAssignmentStatus = default(EntityRef<OrderAssignmentStatus>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderAssignmentID
		{
			get
			{
				return this._OrderAssignmentID;
			}
			set
			{
				if ((this._OrderAssignmentID != value))
				{
					if (this._OrderAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentID = value;
					this.SendPropertyChanged("OrderAssignmentID");
					this.OnOrderAssignmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentStatusID", DbType="Int NOT NULL")]
		public int OrderAssignmentStatusID
		{
			get
			{
				return this._OrderAssignmentStatusID;
			}
			set
			{
				if ((this._OrderAssignmentStatusID != value))
				{
					if (this._OrderAssignmentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentStatusID = value;
					this.SendPropertyChanged("OrderAssignmentStatusID");
					this.OnOrderAssignmentStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(255)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyCSR", DbType="Bit NOT NULL")]
		public bool NotifyCSR
		{
			get
			{
				return this._NotifyCSR;
			}
			set
			{
				if ((this._NotifyCSR != value))
				{
					this.OnNotifyCSRChanging(value);
					this.SendPropertyChanging();
					this._NotifyCSR = value;
					this.SendPropertyChanged("NotifyCSR");
					this.OnNotifyCSRChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyNoShow", DbType="Bit NOT NULL")]
		public bool NotifyNoShow
		{
			get
			{
				return this._NotifyNoShow;
			}
			set
			{
				if ((this._NotifyNoShow != value))
				{
					this.OnNotifyNoShowChanging(value);
					this.SendPropertyChanging();
					this._NotifyNoShow = value;
					this.SendPropertyChanged("NotifyNoShow");
					this.OnNotifyNoShowChanged();
				}
			}
		}
		
		[Column(Storage="_IsPosted", DbType="Bit NOT NULL")]
		public bool IsPosted
		{
			get
			{
				return this._IsPosted;
			}
			set
			{
				if ((this._IsPosted != value))
				{
					this.OnIsPostedChanging(value);
					this.SendPropertyChanging();
					this._IsPosted = value;
					this.SendPropertyChanged("IsPosted");
					this.OnIsPostedChanged();
				}
			}
		}
		
		[Column(Storage="_NeedToReview", DbType="Bit NOT NULL")]
		public bool NeedToReview
		{
			get
			{
				return this._NeedToReview;
			}
			set
			{
				if ((this._NeedToReview != value))
				{
					this.OnNeedToReviewChanging(value);
					this.SendPropertyChanging();
					this._NeedToReview = value;
					this.SendPropertyChanged("NeedToReview");
					this.OnNeedToReviewChanged();
				}
			}
		}
		
		[Column(Storage="_StatusDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StatusDate
		{
			get
			{
				return this._StatusDate;
			}
			set
			{
				if ((this._StatusDate != value))
				{
					this.OnStatusDateChanging(value);
					this.SendPropertyChanging();
					this._StatusDate = value;
					this.SendPropertyChanged("StatusDate");
					this.OnStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReviewedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReviewedDate
		{
			get
			{
				return this._ReviewedDate;
			}
			set
			{
				if ((this._ReviewedDate != value))
				{
					this.OnReviewedDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewedDate = value;
					this.SendPropertyChanged("ReviewedDate");
					this.OnReviewedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PostedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PostedBy
		{
			get
			{
				return this._PostedBy;
			}
			set
			{
				if ((this._PostedBy != value))
				{
					this.OnPostedByChanging(value);
					this.SendPropertyChanging();
					this._PostedBy = value;
					this.SendPropertyChanged("PostedBy");
					this.OnPostedByChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderAssignmentStatusHistory_OrderAssignment", Storage="_OrderAssignment", ThisKey="OrderAssignmentID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignment OrderAssignment
		{
			get
			{
				return this._OrderAssignment.Entity;
			}
			set
			{
				OrderAssignment previousValue = this._OrderAssignment.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignment.Entity = null;
						previousValue.OrderAssignmentStatusHistories.Remove(this);
					}
					this._OrderAssignment.Entity = value;
					if ((value != null))
					{
						value.OrderAssignmentStatusHistories.Add(this);
						this._OrderAssignmentID = value.ID;
					}
					else
					{
						this._OrderAssignmentID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderAssignment");
				}
			}
		}
		
		[Association(Name="FK_OrderAssignmentStatusHistory_OrderAssignmentStatus", Storage="_OrderAssignmentStatus", ThisKey="OrderAssignmentStatusID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignmentStatus OrderAssignmentStatus
		{
			get
			{
				return this._OrderAssignmentStatus.Entity;
			}
			set
			{
				OrderAssignmentStatus previousValue = this._OrderAssignmentStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignmentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignmentStatus.Entity = null;
						previousValue.OrderAssignmentStatusHistories.Remove(this);
					}
					this._OrderAssignmentStatus.Entity = value;
					if ((value != null))
					{
						value.OrderAssignmentStatusHistories.Add(this);
						this._OrderAssignmentStatusID = value.ID;
					}
					else
					{
						this._OrderAssignmentStatusID = default(int);
					}
					this.SendPropertyChanged("OrderAssignmentStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocument")]
	public partial class OrderDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _OrderID;
		
		private int _DocumentFormatID;
		
		private int _SubmissionTypeID;
		
		private int _DocumentTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private string _FileName;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _ArchivedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<DocumentFormat> _DocumentFormat;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<SubmissionType> _SubmissionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnDocumentFormatIDChanging(int value);
    partial void OnDocumentFormatIDChanged();
    partial void OnSubmissionTypeIDChanging(int value);
    partial void OnSubmissionTypeIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnArchivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnArchivedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public OrderDocument()
		{
			this._DocumentFormat = default(EntityRef<DocumentFormat>);
			this._DocumentType = default(EntityRef<DocumentType>);
			this._Order = default(EntityRef<Order>);
			this._SubmissionType = default(EntityRef<SubmissionType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentFormatID", DbType="Int NOT NULL")]
		public int DocumentFormatID
		{
			get
			{
				return this._DocumentFormatID;
			}
			set
			{
				if ((this._DocumentFormatID != value))
				{
					if (this._DocumentFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFormatIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFormatID = value;
					this.SendPropertyChanged("DocumentFormatID");
					this.OnDocumentFormatIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubmissionTypeID", DbType="Int NOT NULL")]
		public int SubmissionTypeID
		{
			get
			{
				return this._SubmissionTypeID;
			}
			set
			{
				if ((this._SubmissionTypeID != value))
				{
					if (this._SubmissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionTypeID = value;
					this.SendPropertyChanged("SubmissionTypeID");
					this.OnSubmissionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTypeID", DbType="Int NOT NULL")]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ArchivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArchivedDate
		{
			get
			{
				return this._ArchivedDate;
			}
			set
			{
				if ((this._ArchivedDate != value))
				{
					this.OnArchivedDateChanging(value);
					this.SendPropertyChanging();
					this._ArchivedDate = value;
					this.SendPropertyChanged("ArchivedDate");
					this.OnArchivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocument_DocumentFormat", Storage="_DocumentFormat", ThisKey="DocumentFormatID", OtherKey="ID", IsForeignKey=true)]
		public DocumentFormat DocumentFormat
		{
			get
			{
				return this._DocumentFormat.Entity;
			}
			set
			{
				DocumentFormat previousValue = this._DocumentFormat.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFormat.Entity = null;
						previousValue.OrderDocuments.Remove(this);
					}
					this._DocumentFormat.Entity = value;
					if ((value != null))
					{
						value.OrderDocuments.Add(this);
						this._DocumentFormatID = value.ID;
					}
					else
					{
						this._DocumentFormatID = default(int);
					}
					this.SendPropertyChanged("DocumentFormat");
				}
			}
		}
		
		[Association(Name="FK_OrderDocument_DocumentType", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.OrderDocuments.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.OrderDocuments.Add(this);
						this._DocumentTypeID = value.ID;
					}
					else
					{
						this._DocumentTypeID = default(int);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[Association(Name="FK_OrderDocument_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDocuments.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDocuments.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_OrderDocument_SubmissionType", Storage="_SubmissionType", ThisKey="SubmissionTypeID", OtherKey="ID", IsForeignKey=true)]
		public SubmissionType SubmissionType
		{
			get
			{
				return this._SubmissionType.Entity;
			}
			set
			{
				SubmissionType previousValue = this._SubmissionType.Entity;
				if (((previousValue != value) 
							|| (this._SubmissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubmissionType.Entity = null;
						previousValue.OrderDocuments.Remove(this);
					}
					this._SubmissionType.Entity = value;
					if ((value != null))
					{
						value.OrderDocuments.Add(this);
						this._SubmissionTypeID = value.ID;
					}
					else
					{
						this._SubmissionTypeID = default(int);
					}
					this.SendPropertyChanged("SubmissionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderingParty")]
	public partial class OrderingParty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private System.Nullable<decimal> _ReferalFee;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private System.Nullable<System.Guid> _CaseManagerID;
		
		private EntitySet<IncompleteOrder> _IncompleteOrders;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Party> _Party;
		
		private EntitySet<OrderingPartyAgency> _OrderingPartyAgencies;
		
		private EntitySet<OrderingPartyAgent> _OrderingPartyAgents;
		
		private EntitySet<OrderingPartyInsurance> _OrderingPartyInsurances;
		
		private EntitySet<OrderingPartyUser> _OrderingPartyUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnReferalFeeChanging(System.Nullable<decimal> value);
    partial void OnReferalFeeChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    partial void OnCaseManagerIDChanging(System.Nullable<System.Guid> value);
    partial void OnCaseManagerIDChanged();
    #endregion
		
		public OrderingParty()
		{
			this._IncompleteOrders = new EntitySet<IncompleteOrder>(new Action<IncompleteOrder>(this.attach_IncompleteOrders), new Action<IncompleteOrder>(this.detach_IncompleteOrders));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Employee = default(EntityRef<Employee>);
			this._Party = default(EntityRef<Party>);
			this._OrderingPartyAgencies = new EntitySet<OrderingPartyAgency>(new Action<OrderingPartyAgency>(this.attach_OrderingPartyAgencies), new Action<OrderingPartyAgency>(this.detach_OrderingPartyAgencies));
			this._OrderingPartyAgents = new EntitySet<OrderingPartyAgent>(new Action<OrderingPartyAgent>(this.attach_OrderingPartyAgents), new Action<OrderingPartyAgent>(this.detach_OrderingPartyAgents));
			this._OrderingPartyInsurances = new EntitySet<OrderingPartyInsurance>(new Action<OrderingPartyInsurance>(this.attach_OrderingPartyInsurances), new Action<OrderingPartyInsurance>(this.detach_OrderingPartyInsurances));
			this._OrderingPartyUsers = new EntitySet<OrderingPartyUser>(new Action<OrderingPartyUser>(this.attach_OrderingPartyUsers), new Action<OrderingPartyUser>(this.detach_OrderingPartyUsers));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferalFee", DbType="Money")]
		public System.Nullable<decimal> ReferalFee
		{
			get
			{
				return this._ReferalFee;
			}
			set
			{
				if ((this._ReferalFee != value))
				{
					this.OnReferalFeeChanging(value);
					this.SendPropertyChanging();
					this._ReferalFee = value;
					this.SendPropertyChanged("ReferalFee");
					this.OnReferalFeeChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(150)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(150)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Column(Storage="_CaseManagerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CaseManagerID
		{
			get
			{
				return this._CaseManagerID;
			}
			set
			{
				if ((this._CaseManagerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseManagerIDChanging(value);
					this.SendPropertyChanging();
					this._CaseManagerID = value;
					this.SendPropertyChanged("CaseManagerID");
					this.OnCaseManagerIDChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrder_OrderingParty", Storage="_IncompleteOrders", ThisKey="ID", OtherKey="OrderingPartyID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrder> IncompleteOrders
		{
			get
			{
				return this._IncompleteOrders;
			}
			set
			{
				this._IncompleteOrders.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_OrderingParty", Storage="_Orders", ThisKey="ID", OtherKey="OrderingPartyID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingParty_Employee", Storage="_Employee", ThisKey="CaseManagerID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderingParties.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderingParties.Add(this);
						this._CaseManagerID = value.ID;
					}
					else
					{
						this._CaseManagerID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_OrderingParty_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.OrderingParties.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.OrderingParties.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyAgency_OrderingParty", Storage="_OrderingPartyAgencies", ThisKey="ID", OtherKey="OrderingPartyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyAgency> OrderingPartyAgencies
		{
			get
			{
				return this._OrderingPartyAgencies;
			}
			set
			{
				this._OrderingPartyAgencies.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyAgent_OrderingParty", Storage="_OrderingPartyAgents", ThisKey="ID", OtherKey="OrderingPartyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyAgent> OrderingPartyAgents
		{
			get
			{
				return this._OrderingPartyAgents;
			}
			set
			{
				this._OrderingPartyAgents.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyInsurance_OrderingParty", Storage="_OrderingPartyInsurances", ThisKey="ID", OtherKey="OrderingPartyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyInsurance> OrderingPartyInsurances
		{
			get
			{
				return this._OrderingPartyInsurances;
			}
			set
			{
				this._OrderingPartyInsurances.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyUser_OrderingParty", Storage="_OrderingPartyUsers", ThisKey="ID", OtherKey="OrderingPartyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyUser> OrderingPartyUsers
		{
			get
			{
				return this._OrderingPartyUsers;
			}
			set
			{
				this._OrderingPartyUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncompleteOrders(IncompleteOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = this;
		}
		
		private void detach_IncompleteOrders(IncompleteOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = null;
		}
		
		private void attach_OrderingPartyAgencies(OrderingPartyAgency entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = this;
		}
		
		private void detach_OrderingPartyAgencies(OrderingPartyAgency entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = null;
		}
		
		private void attach_OrderingPartyAgents(OrderingPartyAgent entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = this;
		}
		
		private void detach_OrderingPartyAgents(OrderingPartyAgent entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = null;
		}
		
		private void attach_OrderingPartyInsurances(OrderingPartyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = this;
		}
		
		private void detach_OrderingPartyInsurances(OrderingPartyInsurance entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = null;
		}
		
		private void attach_OrderingPartyUsers(OrderingPartyUser entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = this;
		}
		
		private void detach_OrderingPartyUsers(OrderingPartyUser entity)
		{
			this.SendPropertyChanging();
			entity.OrderingParty = null;
		}
	}
	
	[Table(Name="dbo.OrderingPartyAgency")]
	public partial class OrderingPartyAgency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderingPartyID;
		
		private System.Guid _AgencyID;
		
		private EntityRef<Agency> _Agency;
		
		private EntityRef<OrderingParty> _OrderingParty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderingPartyIDChanging(System.Guid value);
    partial void OnOrderingPartyIDChanged();
    partial void OnAgencyIDChanging(System.Guid value);
    partial void OnAgencyIDChanged();
    #endregion
		
		public OrderingPartyAgency()
		{
			this._Agency = default(EntityRef<Agency>);
			this._OrderingParty = default(EntityRef<OrderingParty>);
			OnCreated();
		}
		
		[Column(Storage="_OrderingPartyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderingPartyID
		{
			get
			{
				return this._OrderingPartyID;
			}
			set
			{
				if ((this._OrderingPartyID != value))
				{
					if (this._OrderingParty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyID = value;
					this.SendPropertyChanged("OrderingPartyID");
					this.OnOrderingPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					if (this._Agency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyAgency_Agency", Storage="_Agency", ThisKey="AgencyID", OtherKey="ID", IsForeignKey=true)]
		public Agency Agency
		{
			get
			{
				return this._Agency.Entity;
			}
			set
			{
				Agency previousValue = this._Agency.Entity;
				if (((previousValue != value) 
							|| (this._Agency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agency.Entity = null;
						previousValue.OrderingPartyAgencies.Remove(this);
					}
					this._Agency.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyAgencies.Add(this);
						this._AgencyID = value.ID;
					}
					else
					{
						this._AgencyID = default(System.Guid);
					}
					this.SendPropertyChanged("Agency");
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyAgency_OrderingParty", Storage="_OrderingParty", ThisKey="OrderingPartyID", OtherKey="ID", IsForeignKey=true)]
		public OrderingParty OrderingParty
		{
			get
			{
				return this._OrderingParty.Entity;
			}
			set
			{
				OrderingParty previousValue = this._OrderingParty.Entity;
				if (((previousValue != value) 
							|| (this._OrderingParty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingParty.Entity = null;
						previousValue.OrderingPartyAgencies.Remove(this);
					}
					this._OrderingParty.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyAgencies.Add(this);
						this._OrderingPartyID = value.ID;
					}
					else
					{
						this._OrderingPartyID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderingParty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderingPartyAgent")]
	public partial class OrderingPartyAgent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderingPartyID;
		
		private System.Guid _AgentID;
		
		private EntityRef<Agent> _Agent;
		
		private EntityRef<OrderingParty> _OrderingParty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderingPartyIDChanging(System.Guid value);
    partial void OnOrderingPartyIDChanged();
    partial void OnAgentIDChanging(System.Guid value);
    partial void OnAgentIDChanged();
    #endregion
		
		public OrderingPartyAgent()
		{
			this._Agent = default(EntityRef<Agent>);
			this._OrderingParty = default(EntityRef<OrderingParty>);
			OnCreated();
		}
		
		[Column(Storage="_OrderingPartyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderingPartyID
		{
			get
			{
				return this._OrderingPartyID;
			}
			set
			{
				if ((this._OrderingPartyID != value))
				{
					if (this._OrderingParty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyID = value;
					this.SendPropertyChanged("OrderingPartyID");
					this.OnOrderingPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._Agent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyAgent_Agent", Storage="_Agent", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public Agent Agent
		{
			get
			{
				return this._Agent.Entity;
			}
			set
			{
				Agent previousValue = this._Agent.Entity;
				if (((previousValue != value) 
							|| (this._Agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agent.Entity = null;
						previousValue.OrderingPartyAgents.Remove(this);
					}
					this._Agent.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyAgents.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(System.Guid);
					}
					this.SendPropertyChanged("Agent");
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyAgent_OrderingParty", Storage="_OrderingParty", ThisKey="OrderingPartyID", OtherKey="ID", IsForeignKey=true)]
		public OrderingParty OrderingParty
		{
			get
			{
				return this._OrderingParty.Entity;
			}
			set
			{
				OrderingParty previousValue = this._OrderingParty.Entity;
				if (((previousValue != value) 
							|| (this._OrderingParty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingParty.Entity = null;
						previousValue.OrderingPartyAgents.Remove(this);
					}
					this._OrderingParty.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyAgents.Add(this);
						this._OrderingPartyID = value.ID;
					}
					else
					{
						this._OrderingPartyID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderingParty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderingPartyInsurance")]
	public partial class OrderingPartyInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderingPartyID;
		
		private System.Guid _InsuranceID;
		
		private string _MailTo;
		
		private string _FaxTo;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<OrderingParty> _OrderingParty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderingPartyIDChanging(System.Guid value);
    partial void OnOrderingPartyIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnFaxToChanging(string value);
    partial void OnFaxToChanged();
    #endregion
		
		public OrderingPartyInsurance()
		{
			this._Insurance = default(EntityRef<Insurance>);
			this._OrderingParty = default(EntityRef<OrderingParty>);
			OnCreated();
		}
		
		[Column(Storage="_OrderingPartyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderingPartyID
		{
			get
			{
				return this._OrderingPartyID;
			}
			set
			{
				if ((this._OrderingPartyID != value))
				{
					if (this._OrderingParty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyID = value;
					this.SendPropertyChanged("OrderingPartyID");
					this.OnOrderingPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_MailTo", DbType="NVarChar(400)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[Column(Storage="_FaxTo", DbType="NVarChar(400)")]
		public string FaxTo
		{
			get
			{
				return this._FaxTo;
			}
			set
			{
				if ((this._FaxTo != value))
				{
					this.OnFaxToChanging(value);
					this.SendPropertyChanging();
					this._FaxTo = value;
					this.SendPropertyChanged("FaxTo");
					this.OnFaxToChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyInsurance_Insurance", Storage="_Insurance", ThisKey="InsuranceID", OtherKey="ID", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.OrderingPartyInsurances.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyInsurances.Add(this);
						this._InsuranceID = value.ID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyInsurance_OrderingParty", Storage="_OrderingParty", ThisKey="OrderingPartyID", OtherKey="ID", IsForeignKey=true)]
		public OrderingParty OrderingParty
		{
			get
			{
				return this._OrderingParty.Entity;
			}
			set
			{
				OrderingParty previousValue = this._OrderingParty.Entity;
				if (((previousValue != value) 
							|| (this._OrderingParty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingParty.Entity = null;
						previousValue.OrderingPartyInsurances.Remove(this);
					}
					this._OrderingParty.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyInsurances.Add(this);
						this._OrderingPartyID = value.ID;
					}
					else
					{
						this._OrderingPartyID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderingParty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderingPartyUser")]
	public partial class OrderingPartyUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PersonID;
		
		private System.Guid _OrderingPartyID;
		
		private bool _IsMaster;
		
		private EntitySet<AgencyFavouriteList> _AgencyFavouriteLists;
		
		private EntitySet<AgentFavouriteList> _AgentFavouriteLists;
		
		private EntityRef<OrderingParty> _OrderingParty;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(System.Guid value);
    partial void OnPersonIDChanged();
    partial void OnOrderingPartyIDChanging(System.Guid value);
    partial void OnOrderingPartyIDChanged();
    partial void OnIsMasterChanging(bool value);
    partial void OnIsMasterChanged();
    #endregion
		
		public OrderingPartyUser()
		{
			this._AgencyFavouriteLists = new EntitySet<AgencyFavouriteList>(new Action<AgencyFavouriteList>(this.attach_AgencyFavouriteLists), new Action<AgencyFavouriteList>(this.detach_AgencyFavouriteLists));
			this._AgentFavouriteLists = new EntitySet<AgentFavouriteList>(new Action<AgentFavouriteList>(this.attach_AgentFavouriteLists), new Action<AgentFavouriteList>(this.detach_AgentFavouriteLists));
			this._OrderingParty = default(EntityRef<OrderingParty>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderingPartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderingPartyID
		{
			get
			{
				return this._OrderingPartyID;
			}
			set
			{
				if ((this._OrderingPartyID != value))
				{
					if (this._OrderingParty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderingPartyIDChanging(value);
					this.SendPropertyChanging();
					this._OrderingPartyID = value;
					this.SendPropertyChanged("OrderingPartyID");
					this.OnOrderingPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsMaster", DbType="Bit NOT NULL")]
		public bool IsMaster
		{
			get
			{
				return this._IsMaster;
			}
			set
			{
				if ((this._IsMaster != value))
				{
					this.OnIsMasterChanging(value);
					this.SendPropertyChanging();
					this._IsMaster = value;
					this.SendPropertyChanged("IsMaster");
					this.OnIsMasterChanged();
				}
			}
		}
		
		[Association(Name="FK_AgencyFavouriteList_OrderingPartyUser", Storage="_AgencyFavouriteLists", ThisKey="ID", OtherKey="OrderingPartyUserID", DeleteRule="NO ACTION")]
		public EntitySet<AgencyFavouriteList> AgencyFavouriteLists
		{
			get
			{
				return this._AgencyFavouriteLists;
			}
			set
			{
				this._AgencyFavouriteLists.Assign(value);
			}
		}
		
		[Association(Name="FK_FavouriteList_OrderingPartyUser", Storage="_AgentFavouriteLists", ThisKey="ID", OtherKey="OrderingPartyUserID", DeleteRule="NO ACTION")]
		public EntitySet<AgentFavouriteList> AgentFavouriteLists
		{
			get
			{
				return this._AgentFavouriteLists;
			}
			set
			{
				this._AgentFavouriteLists.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyUser_OrderingParty", Storage="_OrderingParty", ThisKey="OrderingPartyID", OtherKey="ID", IsForeignKey=true)]
		public OrderingParty OrderingParty
		{
			get
			{
				return this._OrderingParty.Entity;
			}
			set
			{
				OrderingParty previousValue = this._OrderingParty.Entity;
				if (((previousValue != value) 
							|| (this._OrderingParty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderingParty.Entity = null;
						previousValue.OrderingPartyUsers.Remove(this);
					}
					this._OrderingParty.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyUsers.Add(this);
						this._OrderingPartyID = value.ID;
					}
					else
					{
						this._OrderingPartyID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderingParty");
				}
			}
		}
		
		[Association(Name="FK_OrderingPartyUser_Person", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.OrderingPartyUsers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.OrderingPartyUsers.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgencyFavouriteLists(AgencyFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.OrderingPartyUser = this;
		}
		
		private void detach_AgencyFavouriteLists(AgencyFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.OrderingPartyUser = null;
		}
		
		private void attach_AgentFavouriteLists(AgentFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.OrderingPartyUser = this;
		}
		
		private void detach_AgentFavouriteLists(AgentFavouriteList entity)
		{
			this.SendPropertyChanging();
			entity.OrderingPartyUser = null;
		}
	}
	
	[Table(Name="metadata.OrderPaperworkStatus")]
	public partial class OrderPaperworkStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<OrderPaperworkStatusHistory> _OrderPaperworkStatusHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OrderPaperworkStatus()
		{
			this._OrderPaperworkStatusHistories = new EntitySet<OrderPaperworkStatusHistory>(new Action<OrderPaperworkStatusHistory>(this.attach_OrderPaperworkStatusHistories), new Action<OrderPaperworkStatusHistory>(this.detach_OrderPaperworkStatusHistories));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderPaperworkStatusHistory_OrderPaperworkStatus", Storage="_OrderPaperworkStatusHistories", ThisKey="ID", OtherKey="OrderPaperworkStatusID", DeleteRule="NO ACTION")]
		public EntitySet<OrderPaperworkStatusHistory> OrderPaperworkStatusHistories
		{
			get
			{
				return this._OrderPaperworkStatusHistories;
			}
			set
			{
				this._OrderPaperworkStatusHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderPaperworkStatusHistories(OrderPaperworkStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderPaperworkStatus = this;
		}
		
		private void detach_OrderPaperworkStatusHistories(OrderPaperworkStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderPaperworkStatus = null;
		}
	}
	
	[Table(Name="dbo.OrderPaperworkStatusHistory")]
	public partial class OrderPaperworkStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _OrderAssignmentID;
		
		private int _OrderPaperworkStatusID;
		
		private string _Note;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<OrderAssignment> _OrderAssignment;
		
		private EntityRef<OrderPaperworkStatus> _OrderPaperworkStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderAssignmentIDChanging(System.Guid value);
    partial void OnOrderAssignmentIDChanged();
    partial void OnOrderPaperworkStatusIDChanging(int value);
    partial void OnOrderPaperworkStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public OrderPaperworkStatusHistory()
		{
			this._OrderAssignment = default(EntityRef<OrderAssignment>);
			this._OrderPaperworkStatus = default(EntityRef<OrderPaperworkStatus>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderAssignmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderAssignmentID
		{
			get
			{
				return this._OrderAssignmentID;
			}
			set
			{
				if ((this._OrderAssignmentID != value))
				{
					if (this._OrderAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._OrderAssignmentID = value;
					this.SendPropertyChanged("OrderAssignmentID");
					this.OnOrderAssignmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderPaperworkStatusID", DbType="Int NOT NULL")]
		public int OrderPaperworkStatusID
		{
			get
			{
				return this._OrderPaperworkStatusID;
			}
			set
			{
				if ((this._OrderPaperworkStatusID != value))
				{
					if (this._OrderPaperworkStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderPaperworkStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderPaperworkStatusID = value;
					this.SendPropertyChanged("OrderPaperworkStatusID");
					this.OnOrderPaperworkStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(1000)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderPaperworkStatusHistory_OrderAssignment", Storage="_OrderAssignment", ThisKey="OrderAssignmentID", OtherKey="ID", IsForeignKey=true)]
		public OrderAssignment OrderAssignment
		{
			get
			{
				return this._OrderAssignment.Entity;
			}
			set
			{
				OrderAssignment previousValue = this._OrderAssignment.Entity;
				if (((previousValue != value) 
							|| (this._OrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderAssignment.Entity = null;
						previousValue.OrderPaperworkStatusHistories.Remove(this);
					}
					this._OrderAssignment.Entity = value;
					if ((value != null))
					{
						value.OrderPaperworkStatusHistories.Add(this);
						this._OrderAssignmentID = value.ID;
					}
					else
					{
						this._OrderAssignmentID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderAssignment");
				}
			}
		}
		
		[Association(Name="FK_OrderPaperworkStatusHistory_OrderPaperworkStatus", Storage="_OrderPaperworkStatus", ThisKey="OrderPaperworkStatusID", OtherKey="ID", IsForeignKey=true)]
		public OrderPaperworkStatus OrderPaperworkStatus
		{
			get
			{
				return this._OrderPaperworkStatus.Entity;
			}
			set
			{
				OrderPaperworkStatus previousValue = this._OrderPaperworkStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderPaperworkStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderPaperworkStatus.Entity = null;
						previousValue.OrderPaperworkStatusHistories.Remove(this);
					}
					this._OrderPaperworkStatus.Entity = value;
					if ((value != null))
					{
						value.OrderPaperworkStatusHistories.Add(this);
						this._OrderPaperworkStatusID = value.ID;
					}
					else
					{
						this._OrderPaperworkStatusID = default(int);
					}
					this.SendPropertyChanged("OrderPaperworkStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.OrderPriority")]
	public partial class OrderPriority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OrderPriority()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderRelative")]
	public partial class OrderRelative : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _OrderRelativeID;
		
		private string _RelationType;
		
		private string _Notes;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Order> _OrderRelative_Order1;
		
		private EntityRef<Order> _OrderRelative_Order2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderRelativeIDChanging(int value);
    partial void OnOrderRelativeIDChanged();
    partial void OnRelationTypeChanging(string value);
    partial void OnRelationTypeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public OrderRelative()
		{
			this._Order = default(EntityRef<Order>);
			this._OrderRelative_Order1 = default(EntityRef<Order>);
			this._OrderRelative_Order2 = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderRelativeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderRelativeID
		{
			get
			{
				return this._OrderRelativeID;
			}
			set
			{
				if ((this._OrderRelativeID != value))
				{
					if (this._OrderRelative_Order2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderRelativeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderRelativeID = value;
					this.SendPropertyChanged("OrderRelativeID");
					this.OnOrderRelativeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RelationType", DbType="NVarChar(50)")]
		public string RelationType
		{
			get
			{
				return this._RelationType;
			}
			set
			{
				if ((this._RelationType != value))
				{
					this.OnRelationTypeChanging(value);
					this.SendPropertyChanging();
					this._RelationType = value;
					this.SendPropertyChanged("RelationType");
					this.OnRelationTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(250)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderRelative_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderRelatives.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderRelatives.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_OrderRelative_Order1", Storage="_OrderRelative_Order1", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order OrderRelative_Order1
		{
			get
			{
				return this._OrderRelative_Order1.Entity;
			}
			set
			{
				Order previousValue = this._OrderRelative_Order1.Entity;
				if (((previousValue != value) 
							|| (this._OrderRelative_Order1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderRelative_Order1.Entity = null;
						previousValue.OrderRelative_Order1s.Remove(this);
					}
					this._OrderRelative_Order1.Entity = value;
					if ((value != null))
					{
						value.OrderRelative_Order1s.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("OrderRelative_Order1");
				}
			}
		}
		
		[Association(Name="FK_OrderRelative_Order2", Storage="_OrderRelative_Order2", ThisKey="OrderRelativeID", OtherKey="ID", IsForeignKey=true)]
		public Order OrderRelative_Order2
		{
			get
			{
				return this._OrderRelative_Order2.Entity;
			}
			set
			{
				Order previousValue = this._OrderRelative_Order2.Entity;
				if (((previousValue != value) 
							|| (this._OrderRelative_Order2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderRelative_Order2.Entity = null;
						previousValue.OrderRelative_Order2s.Remove(this);
					}
					this._OrderRelative_Order2.Entity = value;
					if ((value != null))
					{
						value.OrderRelative_Order2s.Add(this);
						this._OrderRelativeID = value.ID;
					}
					else
					{
						this._OrderRelativeID = default(int);
					}
					this.SendPropertyChanged("OrderRelative_Order2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderRequirement")]
	public partial class OrderRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.Guid _RequirementID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _Modified;
		
		private System.Nullable<bool> _Deleted;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Requirement> _Requirement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnRequirementIDChanging(System.Guid value);
    partial void OnRequirementIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedChanging(System.Nullable<bool> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    #endregion
		
		public OrderRequirement()
		{
			this._Order = default(EntityRef<Order>);
			this._Requirement = default(EntityRef<Requirement>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementID
		{
			get
			{
				return this._RequirementID;
			}
			set
			{
				if ((this._RequirementID != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementID = value;
					this.SendPropertyChanged("RequirementID");
					this.OnRequirementIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="Bit")]
		public System.Nullable<bool> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderRequirement_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderRequirements.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderRequirements.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_OrderRequirement_Requirement", Storage="_Requirement", ThisKey="RequirementID", OtherKey="ID", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.OrderRequirements.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.OrderRequirements.Add(this);
						this._RequirementID = value.ID;
					}
					else
					{
						this._RequirementID = default(System.Guid);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderSchedule")]
	public partial class OrderSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _OrderID;
		
		private bool _IsAvailable;
		
		private int _Weekday;
		
		private System.Nullable<System.DateTime> _FromDate;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private System.Nullable<System.DateTime> _FromTime;
		
		private System.Nullable<System.DateTime> _ToTime;
		
		private bool _Inactive;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnWeekdayChanging(int value);
    partial void OnWeekdayChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnFromTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFromTimeChanged();
    partial void OnToTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnToTimeChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public OrderSchedule()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_Weekday", DbType="Int NOT NULL")]
		public int Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this.OnWeekdayChanging(value);
					this.SendPropertyChanging();
					this._Weekday = value;
					this.SendPropertyChanged("Weekday");
					this.OnWeekdayChanged();
				}
			}
		}
		
		[Column(Storage="_FromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[Column(Storage="_FromTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromTime
		{
			get
			{
				return this._FromTime;
			}
			set
			{
				if ((this._FromTime != value))
				{
					this.OnFromTimeChanging(value);
					this.SendPropertyChanging();
					this._FromTime = value;
					this.SendPropertyChanged("FromTime");
					this.OnFromTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ToTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToTime
		{
			get
			{
				return this._ToTime;
			}
			set
			{
				if ((this._ToTime != value))
				{
					this.OnToTimeChanging(value);
					this.SendPropertyChanging();
					this._ToTime = value;
					this.SendPropertyChanged("ToTime");
					this.OnToTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderSchedule_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderSchedules.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderSchedules.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<OrderStatusHistory> _OrderStatusHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._OrderStatusHistories = new EntitySet<OrderStatusHistory>(new Action<OrderStatusHistory>(this.attach_OrderStatusHistories), new Action<OrderStatusHistory>(this.detach_OrderStatusHistories));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Order_OrderStatus", Storage="_Orders", ThisKey="ID", OtherKey="OrderStatusID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderStatusHistory_OrderStatus", Storage="_OrderStatusHistories", ThisKey="ID", OtherKey="OrderStatusID", DeleteRule="NO ACTION")]
		public EntitySet<OrderStatusHistory> OrderStatusHistories
		{
			get
			{
				return this._OrderStatusHistories;
			}
			set
			{
				this._OrderStatusHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
		
		private void attach_OrderStatusHistories(OrderStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_OrderStatusHistories(OrderStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[Table(Name="dbo.OrderStatusHistory")]
	public partial class OrderStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _OrderID;
		
		private int _OrderStatusID;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _StatusDate;
		
		private System.DateTime _CreatedDate;
		
		private string _PostedBy;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStatusDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnPostedByChanging(string value);
    partial void OnPostedByChanged();
    #endregion
		
		public OrderStatusHistory()
		{
			this._Order = default(EntityRef<Order>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusID", DbType="Int NOT NULL")]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(255)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_StatusDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StatusDate
		{
			get
			{
				return this._StatusDate;
			}
			set
			{
				if ((this._StatusDate != value))
				{
					this.OnStatusDateChanging(value);
					this.SendPropertyChanging();
					this._StatusDate = value;
					this.SendPropertyChanged("StatusDate");
					this.OnStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PostedBy", DbType="NVarChar(50)")]
		public string PostedBy
		{
			get
			{
				return this._PostedBy;
			}
			set
			{
				if ((this._PostedBy != value))
				{
					this.OnPostedByChanging(value);
					this.SendPropertyChanging();
					this._PostedBy = value;
					this.SendPropertyChanged("PostedBy");
					this.OnPostedByChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderStatusHistory_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderStatusHistories.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderStatusHistories.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_OrderStatusHistory_OrderStatus", Storage="_OrderStatus", ThisKey="OrderStatusID", OtherKey="ID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.OrderStatusHistories.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.OrderStatusHistories.Add(this);
						this._OrderStatusID = value.ID;
					}
					else
					{
						this._OrderStatusID = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderSurcharges")]
	public partial class OrderSurcharge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _OrderID;
		
		private int _SurchargeTypeID;
		
		private decimal _Surcharge;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<SurchargeType> _SurchargeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnSurchargeTypeIDChanging(int value);
    partial void OnSurchargeTypeIDChanged();
    partial void OnSurchargeChanging(decimal value);
    partial void OnSurchargeChanged();
    #endregion
		
		public OrderSurcharge()
		{
			this._Order = default(EntityRef<Order>);
			this._SurchargeType = default(EntityRef<SurchargeType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_SurchargeTypeID", DbType="Int NOT NULL")]
		public int SurchargeTypeID
		{
			get
			{
				return this._SurchargeTypeID;
			}
			set
			{
				if ((this._SurchargeTypeID != value))
				{
					if (this._SurchargeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurchargeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SurchargeTypeID = value;
					this.SendPropertyChanged("SurchargeTypeID");
					this.OnSurchargeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Surcharge", DbType="Money NOT NULL")]
		public decimal Surcharge
		{
			get
			{
				return this._Surcharge;
			}
			set
			{
				if ((this._Surcharge != value))
				{
					this.OnSurchargeChanging(value);
					this.SendPropertyChanging();
					this._Surcharge = value;
					this.SendPropertyChanged("Surcharge");
					this.OnSurchargeChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderSurcharges_Order", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderSurcharges.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderSurcharges.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="FK_OrderSurcharges_SurchargeType", Storage="_SurchargeType", ThisKey="SurchargeTypeID", OtherKey="ID", IsForeignKey=true)]
		public SurchargeType SurchargeType
		{
			get
			{
				return this._SurchargeType.Entity;
			}
			set
			{
				SurchargeType previousValue = this._SurchargeType.Entity;
				if (((previousValue != value) 
							|| (this._SurchargeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurchargeType.Entity = null;
						previousValue.OrderSurcharges.Remove(this);
					}
					this._SurchargeType.Entity = value;
					if ((value != null))
					{
						value.OrderSurcharges.Add(this);
						this._SurchargeTypeID = value.ID;
					}
					else
					{
						this._SurchargeTypeID = default(int);
					}
					this.SendPropertyChanged("SurchargeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.OrderType")]
	public partial class OrderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<FeeLevelItem> _FeeLevelItems;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<ServiceProviderFee> _ServiceProviderFees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OrderType()
		{
			this._FeeLevelItems = new EntitySet<FeeLevelItem>(new Action<FeeLevelItem>(this.attach_FeeLevelItems), new Action<FeeLevelItem>(this.detach_FeeLevelItems));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._ServiceProviderFees = new EntitySet<ServiceProviderFee>(new Action<ServiceProviderFee>(this.attach_ServiceProviderFees), new Action<ServiceProviderFee>(this.detach_ServiceProviderFees));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItem_ServiceType", Storage="_FeeLevelItems", ThisKey="ID", OtherKey="OrderTypeID", DeleteRule="NO ACTION")]
		public EntitySet<FeeLevelItem> FeeLevelItems
		{
			get
			{
				return this._FeeLevelItems;
			}
			set
			{
				this._FeeLevelItems.Assign(value);
			}
		}
		
		[Association(Name="FK_Order_OrderType", Storage="_Orders", ThisKey="ID", OtherKey="OrderTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderFee_FeeType", Storage="_ServiceProviderFees", ThisKey="ID", OtherKey="OrderTypeID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderFee> ServiceProviderFees
		{
			get
			{
				return this._ServiceProviderFees;
			}
			set
			{
				this._ServiceProviderFees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeLevelItems(FeeLevelItem entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = this;
		}
		
		private void detach_FeeLevelItems(FeeLevelItem entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = null;
		}
		
		private void attach_ServiceProviderFees(ServiceProviderFee entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = this;
		}
		
		private void detach_ServiceProviderFees(ServiceProviderFee entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = null;
		}
	}
	
	[Table(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _AbbrName;
		
		private string _DBA;
		
		private string _VendorCode;
		
		private string _Branch;
		
		private string _BusinessDesc;
		
		private EntitySet<Partner> _Partners;
		
		private EntitySet<BillingCompany> _BillingCompanies;
		
		private EntitySet<Insurance> _Insurances;
		
		private EntityRef<Party> _Party;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAbbrNameChanging(string value);
    partial void OnAbbrNameChanged();
    partial void OnDBAChanging(string value);
    partial void OnDBAChanged();
    partial void OnVendorCodeChanging(string value);
    partial void OnVendorCodeChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    partial void OnBusinessDescChanging(string value);
    partial void OnBusinessDescChanged();
    #endregion
		
		public Organization()
		{
			this._Partners = new EntitySet<Partner>(new Action<Partner>(this.attach_Partners), new Action<Partner>(this.detach_Partners));
			this._BillingCompanies = new EntitySet<BillingCompany>(new Action<BillingCompany>(this.attach_BillingCompanies), new Action<BillingCompany>(this.detach_BillingCompanies));
			this._Insurances = new EntitySet<Insurance>(new Action<Insurance>(this.attach_Insurances), new Action<Insurance>(this.detach_Insurances));
			this._Party = default(EntityRef<Party>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AbbrName", DbType="NVarChar(15)")]
		public string AbbrName
		{
			get
			{
				return this._AbbrName;
			}
			set
			{
				if ((this._AbbrName != value))
				{
					this.OnAbbrNameChanging(value);
					this.SendPropertyChanging();
					this._AbbrName = value;
					this.SendPropertyChanged("AbbrName");
					this.OnAbbrNameChanged();
				}
			}
		}
		
		[Column(Storage="_DBA", DbType="NVarChar(75)")]
		public string DBA
		{
			get
			{
				return this._DBA;
			}
			set
			{
				if ((this._DBA != value))
				{
					this.OnDBAChanging(value);
					this.SendPropertyChanging();
					this._DBA = value;
					this.SendPropertyChanged("DBA");
					this.OnDBAChanged();
				}
			}
		}
		
		[Column(Storage="_VendorCode", DbType="NVarChar(15)")]
		public string VendorCode
		{
			get
			{
				return this._VendorCode;
			}
			set
			{
				if ((this._VendorCode != value))
				{
					this.OnVendorCodeChanging(value);
					this.SendPropertyChanging();
					this._VendorCode = value;
					this.SendPropertyChanged("VendorCode");
					this.OnVendorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Branch", DbType="NVarChar(50)")]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessDesc", DbType="NVarChar(500)")]
		public string BusinessDesc
		{
			get
			{
				return this._BusinessDesc;
			}
			set
			{
				if ((this._BusinessDesc != value))
				{
					this.OnBusinessDescChanging(value);
					this.SendPropertyChanging();
					this._BusinessDesc = value;
					this.SendPropertyChanged("BusinessDesc");
					this.OnBusinessDescChanged();
				}
			}
		}
		
		[Association(Name="FK_BillingCompany_Organization", Storage="_Partners", ThisKey="ID", OtherKey="OrgID", DeleteRule="NO ACTION")]
		public EntitySet<Partner> Partners
		{
			get
			{
				return this._Partners;
			}
			set
			{
				this._Partners.Assign(value);
			}
		}
		
		[Association(Name="FK_BillingCompany_Organization1", Storage="_BillingCompanies", ThisKey="ID", OtherKey="OrgID", DeleteRule="NO ACTION")]
		public EntitySet<BillingCompany> BillingCompanies
		{
			get
			{
				return this._BillingCompanies;
			}
			set
			{
				this._BillingCompanies.Assign(value);
			}
		}
		
		[Association(Name="FK_Insurance_Organization", Storage="_Insurances", ThisKey="ID", OtherKey="OrgID", DeleteRule="NO ACTION")]
		public EntitySet<Insurance> Insurances
		{
			get
			{
				return this._Insurances;
			}
			set
			{
				this._Insurances.Assign(value);
			}
		}
		
		[Association(Name="FK_Organization_Party", Storage="_Party", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.Organization = null;
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partners(Partner entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Partners(Partner entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_BillingCompanies(BillingCompany entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_BillingCompanies(BillingCompany entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Insurances(Insurance entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Insurances(Insurance entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[Table(Name="dbo.Partner")]
	public partial class Partner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _OrgID;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrgIDChanging(System.Guid value);
    partial void OnOrgIDChanged();
    #endregion
		
		public Partner()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrgID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[Association(Name="FK_BillingCompany_Organization", Storage="_Organization", ThisKey="OrgID", OtherKey="ID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Partners.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Partners.Add(this);
						this._OrgID = value.ID;
					}
					else
					{
						this._OrgID = default(System.Guid);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Party")]
	public partial class Party : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _FullName;
		
		private int _PartyTypeID;
		
		private string _GovID;
		
		private System.Nullable<int> _GovIDTypeID;
		
		private string _PartnerAdminSystem;
		
		private System.Nullable<System.DateTime> _ServiceSinceDate;
		
		private bool _Inactive;
		
		private string _ResidenceZip;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntitySet<PartyEmailAddress> _PartyEmailAddresses;
		
		private EntitySet<ErrorLog> _ErrorLogs;
		
		private EntitySet<OrderingParty> _OrderingParties;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<GovIDType> _GovIDType;
		
		private EntityRef<PartyType> _PartyType;
		
		private EntitySet<PartyAddress> _PartyAddresses;
		
		private EntitySet<PartyContact> _PartyContacts;
		
		private EntitySet<PartyPhone> _PartyPhones;
		
		private EntitySet<PartyRating> _PartyRatings;
		
		private EntityRef<Person> _Person;
		
		private EntitySet<ServiceProvider> _ServiceProviders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPartyTypeIDChanging(int value);
    partial void OnPartyTypeIDChanged();
    partial void OnGovIDChanging(string value);
    partial void OnGovIDChanged();
    partial void OnGovIDTypeIDChanging(System.Nullable<int> value);
    partial void OnGovIDTypeIDChanged();
    partial void OnPartnerAdminSystemChanging(string value);
    partial void OnPartnerAdminSystemChanged();
    partial void OnServiceSinceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnServiceSinceDateChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnResidenceZipChanging(string value);
    partial void OnResidenceZipChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public Party()
		{
			this._PartyEmailAddresses = new EntitySet<PartyEmailAddress>(new Action<PartyEmailAddress>(this.attach_PartyEmailAddresses), new Action<PartyEmailAddress>(this.detach_PartyEmailAddresses));
			this._ErrorLogs = new EntitySet<ErrorLog>(new Action<ErrorLog>(this.attach_ErrorLogs), new Action<ErrorLog>(this.detach_ErrorLogs));
			this._OrderingParties = new EntitySet<OrderingParty>(new Action<OrderingParty>(this.attach_OrderingParties), new Action<OrderingParty>(this.detach_OrderingParties));
			this._Organization = default(EntityRef<Organization>);
			this._GovIDType = default(EntityRef<GovIDType>);
			this._PartyType = default(EntityRef<PartyType>);
			this._PartyAddresses = new EntitySet<PartyAddress>(new Action<PartyAddress>(this.attach_PartyAddresses), new Action<PartyAddress>(this.detach_PartyAddresses));
			this._PartyContacts = new EntitySet<PartyContact>(new Action<PartyContact>(this.attach_PartyContacts), new Action<PartyContact>(this.detach_PartyContacts));
			this._PartyPhones = new EntitySet<PartyPhone>(new Action<PartyPhone>(this.attach_PartyPhones), new Action<PartyPhone>(this.detach_PartyPhones));
			this._PartyRatings = new EntitySet<PartyRating>(new Action<PartyRating>(this.attach_PartyRatings), new Action<PartyRating>(this.detach_PartyRatings));
			this._Person = default(EntityRef<Person>);
			this._ServiceProviders = new EntitySet<ServiceProvider>(new Action<ServiceProvider>(this.attach_ServiceProviders), new Action<ServiceProvider>(this.detach_ServiceProviders));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(75)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_PartyTypeID", DbType="Int NOT NULL")]
		public int PartyTypeID
		{
			get
			{
				return this._PartyTypeID;
			}
			set
			{
				if ((this._PartyTypeID != value))
				{
					if (this._PartyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PartyTypeID = value;
					this.SendPropertyChanged("PartyTypeID");
					this.OnPartyTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_GovID", DbType="NVarChar(15)")]
		public string GovID
		{
			get
			{
				return this._GovID;
			}
			set
			{
				if ((this._GovID != value))
				{
					this.OnGovIDChanging(value);
					this.SendPropertyChanging();
					this._GovID = value;
					this.SendPropertyChanged("GovID");
					this.OnGovIDChanged();
				}
			}
		}
		
		[Column(Storage="_GovIDTypeID", DbType="Int")]
		public System.Nullable<int> GovIDTypeID
		{
			get
			{
				return this._GovIDTypeID;
			}
			set
			{
				if ((this._GovIDTypeID != value))
				{
					if (this._GovIDType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGovIDTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GovIDTypeID = value;
					this.SendPropertyChanged("GovIDTypeID");
					this.OnGovIDTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerAdminSystem", DbType="NVarChar(36)")]
		public string PartnerAdminSystem
		{
			get
			{
				return this._PartnerAdminSystem;
			}
			set
			{
				if ((this._PartnerAdminSystem != value))
				{
					this.OnPartnerAdminSystemChanging(value);
					this.SendPropertyChanging();
					this._PartnerAdminSystem = value;
					this.SendPropertyChanged("PartnerAdminSystem");
					this.OnPartnerAdminSystemChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceSinceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ServiceSinceDate
		{
			get
			{
				return this._ServiceSinceDate;
			}
			set
			{
				if ((this._ServiceSinceDate != value))
				{
					this.OnServiceSinceDateChanging(value);
					this.SendPropertyChanging();
					this._ServiceSinceDate = value;
					this.SendPropertyChanged("ServiceSinceDate");
					this.OnServiceSinceDateChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_ResidenceZip", DbType="NVarChar(5)")]
		public string ResidenceZip
		{
			get
			{
				return this._ResidenceZip;
			}
			set
			{
				if ((this._ResidenceZip != value))
				{
					this.OnResidenceZipChanging(value);
					this.SendPropertyChanging();
					this._ResidenceZip = value;
					this.SendPropertyChanged("ResidenceZip");
					this.OnResidenceZipChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_EmailAddress_Party", Storage="_PartyEmailAddresses", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<PartyEmailAddress> PartyEmailAddresses
		{
			get
			{
				return this._PartyEmailAddresses;
			}
			set
			{
				this._PartyEmailAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_ErrorLog_Party", Storage="_ErrorLogs", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<ErrorLog> ErrorLogs
		{
			get
			{
				return this._ErrorLogs;
			}
			set
			{
				this._ErrorLogs.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingParty_Party", Storage="_OrderingParties", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingParty> OrderingParties
		{
			get
			{
				return this._OrderingParties;
			}
			set
			{
				this._OrderingParties.Assign(value);
			}
		}
		
		[Association(Name="FK_Organization_Party", Storage="_Organization", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Party = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Party = this;
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[Association(Name="FK_Party_GovIDType", Storage="_GovIDType", ThisKey="GovIDTypeID", OtherKey="ID", IsForeignKey=true)]
		public GovIDType GovIDType
		{
			get
			{
				return this._GovIDType.Entity;
			}
			set
			{
				GovIDType previousValue = this._GovIDType.Entity;
				if (((previousValue != value) 
							|| (this._GovIDType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GovIDType.Entity = null;
						previousValue.Parties.Remove(this);
					}
					this._GovIDType.Entity = value;
					if ((value != null))
					{
						value.Parties.Add(this);
						this._GovIDTypeID = value.ID;
					}
					else
					{
						this._GovIDTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GovIDType");
				}
			}
		}
		
		[Association(Name="FK_Party_PartyType", Storage="_PartyType", ThisKey="PartyTypeID", OtherKey="ID", IsForeignKey=true)]
		public PartyType PartyType
		{
			get
			{
				return this._PartyType.Entity;
			}
			set
			{
				PartyType previousValue = this._PartyType.Entity;
				if (((previousValue != value) 
							|| (this._PartyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartyType.Entity = null;
						previousValue.Parties.Remove(this);
					}
					this._PartyType.Entity = value;
					if ((value != null))
					{
						value.Parties.Add(this);
						this._PartyTypeID = value.ID;
					}
					else
					{
						this._PartyTypeID = default(int);
					}
					this.SendPropertyChanged("PartyType");
				}
			}
		}
		
		[Association(Name="FK_PartyAddress_Party", Storage="_PartyAddresses", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<PartyAddress> PartyAddresses
		{
			get
			{
				return this._PartyAddresses;
			}
			set
			{
				this._PartyAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyContact_Party", Storage="_PartyContacts", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<PartyContact> PartyContacts
		{
			get
			{
				return this._PartyContacts;
			}
			set
			{
				this._PartyContacts.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyPhone_Party", Storage="_PartyPhones", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<PartyPhone> PartyPhones
		{
			get
			{
				return this._PartyPhones;
			}
			set
			{
				this._PartyPhones.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyRating_Party", Storage="_PartyRatings", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<PartyRating> PartyRatings
		{
			get
			{
				return this._PartyRatings;
			}
			set
			{
				this._PartyRatings.Assign(value);
			}
		}
		
		[Association(Name="FK_Person_Party", Storage="_Person", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Party = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Party = this;
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_ServiceProvider_Party", Storage="_ServiceProviders", ThisKey="ID", OtherKey="PartyID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProvider> ServiceProviders
		{
			get
			{
				return this._ServiceProviders;
			}
			set
			{
				this._ServiceProviders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartyEmailAddresses(PartyEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_PartyEmailAddresses(PartyEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_ErrorLogs(ErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_ErrorLogs(ErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_OrderingParties(OrderingParty entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_OrderingParties(OrderingParty entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_PartyContacts(PartyContact entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_PartyContacts(PartyContact entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_PartyPhones(PartyPhone entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_PartyPhones(PartyPhone entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_PartyRatings(PartyRating entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_PartyRatings(PartyRating entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_ServiceProviders(ServiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_ServiceProviders(ServiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
	}
	
	[Table(Name="dbo.PartyAddress")]
	public partial class PartyAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private int _AddressTypeID;
		
		private string _RefByName;
		
		private string _AttentionLine;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _City;
		
		private string _StateOther;
		
		private System.Nullable<int> _StateID;
		
		private string _Zip;
		
		private string _PostalDropCode;
		
		private System.Nullable<int> _CountryID;
		
		private bool _IsPreferred;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _IsValidated;
		
		private bool _PreventOverride;
		
		private bool _Inactive;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Party> _Party;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnAddressTypeIDChanging(int value);
    partial void OnAddressTypeIDChanged();
    partial void OnRefByNameChanging(string value);
    partial void OnRefByNameChanged();
    partial void OnAttentionLineChanging(string value);
    partial void OnAttentionLineChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateOtherChanging(string value);
    partial void OnStateOtherChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPostalDropCodeChanging(string value);
    partial void OnPostalDropCodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnIsValidatedChanging(bool value);
    partial void OnIsValidatedChanged();
    partial void OnPreventOverrideChanging(bool value);
    partial void OnPreventOverrideChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public PartyAddress()
		{
			this._AddressType = default(EntityRef<AddressType>);
			this._Country = default(EntityRef<Country>);
			this._Party = default(EntityRef<Party>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeID", DbType="Int NOT NULL")]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RefByName", DbType="NVarChar(50)")]
		public string RefByName
		{
			get
			{
				return this._RefByName;
			}
			set
			{
				if ((this._RefByName != value))
				{
					this.OnRefByNameChanging(value);
					this.SendPropertyChanging();
					this._RefByName = value;
					this.SendPropertyChanged("RefByName");
					this.OnRefByNameChanged();
				}
			}
		}
		
		[Column(Storage="_AttentionLine", DbType="NVarChar(50)")]
		public string AttentionLine
		{
			get
			{
				return this._AttentionLine;
			}
			set
			{
				if ((this._AttentionLine != value))
				{
					this.OnAttentionLineChanging(value);
					this.SendPropertyChanging();
					this._AttentionLine = value;
					this.SendPropertyChanged("AttentionLine");
					this.OnAttentionLineChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="NVarChar(50)")]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="NVarChar(50)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(35)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_StateOther", DbType="NVarChar(15)")]
		public string StateOther
		{
			get
			{
				return this._StateOther;
			}
			set
			{
				if ((this._StateOther != value))
				{
					this.OnStateOtherChanging(value);
					this.SendPropertyChanging();
					this._StateOther = value;
					this.SendPropertyChanged("StateOther");
					this.OnStateOtherChanged();
				}
			}
		}
		
		[Column(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(5)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_PostalDropCode", DbType="NVarChar(25)")]
		public string PostalDropCode
		{
			get
			{
				return this._PostalDropCode;
			}
			set
			{
				if ((this._PostalDropCode != value))
				{
					this.OnPostalDropCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalDropCode = value;
					this.SendPropertyChanged("PostalDropCode");
					this.OnPostalDropCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsValidated", DbType="Bit NOT NULL")]
		public bool IsValidated
		{
			get
			{
				return this._IsValidated;
			}
			set
			{
				if ((this._IsValidated != value))
				{
					this.OnIsValidatedChanging(value);
					this.SendPropertyChanging();
					this._IsValidated = value;
					this.SendPropertyChanged("IsValidated");
					this.OnIsValidatedChanged();
				}
			}
		}
		
		[Column(Storage="_PreventOverride", DbType="Bit NOT NULL")]
		public bool PreventOverride
		{
			get
			{
				return this._PreventOverride;
			}
			set
			{
				if ((this._PreventOverride != value))
				{
					this.OnPreventOverrideChanging(value);
					this.SendPropertyChanging();
					this._PreventOverride = value;
					this.SendPropertyChanged("PreventOverride");
					this.OnPreventOverrideChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", Name="CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_PartyAddress_AddressType", Storage="_AddressType", ThisKey="AddressTypeID", OtherKey="ID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.PartyAddresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.PartyAddresses.Add(this);
						this._AddressTypeID = value.ID;
					}
					else
					{
						this._AddressTypeID = default(int);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[Association(Name="FK_PartyAddress_Country", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.PartyAddresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.PartyAddresses.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_PartyAddress_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.PartyAddresses.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.PartyAddresses.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_PartyAddress_State", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.PartyAddresses.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.PartyAddresses.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PartyContact")]
	public partial class PartyContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PartyID;
		
		private System.Guid _PersonID;
		
		private string _RefByName;
		
		private EntityRef<Party> _Party;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnPersonIDChanging(System.Guid value);
    partial void OnPersonIDChanged();
    partial void OnRefByNameChanging(string value);
    partial void OnRefByNameChanged();
    #endregion
		
		public PartyContact()
		{
			this._Party = default(EntityRef<Party>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_RefByName", DbType="NVarChar(50)")]
		public string RefByName
		{
			get
			{
				return this._RefByName;
			}
			set
			{
				if ((this._RefByName != value))
				{
					this.OnRefByNameChanging(value);
					this.SendPropertyChanging();
					this._RefByName = value;
					this.SendPropertyChanged("RefByName");
					this.OnRefByNameChanged();
				}
			}
		}
		
		[Association(Name="FK_PartyContact_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.PartyContacts.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.PartyContacts.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_PartyContact_Person", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PartyContacts.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PartyContacts.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PartyEmailAddress")]
	public partial class PartyEmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private int _EmailTypeID;
		
		private string _AddrLine;
		
		private string _CCAddrLine;
		
		private bool _IsPreferred;
		
		private bool _CatchAll;
		
		private bool _NoAttachment;
		
		private bool _NoJunkMail;
		
		private int _EmailFormatID;
		
		private bool _Inactive;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<EmailFormat> _EmailFormat;
		
		private EntityRef<EmailType> _EmailType;
		
		private EntityRef<Party> _Party;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnEmailTypeIDChanging(int value);
    partial void OnEmailTypeIDChanged();
    partial void OnAddrLineChanging(string value);
    partial void OnAddrLineChanged();
    partial void OnCCAddrLineChanging(string value);
    partial void OnCCAddrLineChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnCatchAllChanging(bool value);
    partial void OnCatchAllChanged();
    partial void OnNoAttachmentChanging(bool value);
    partial void OnNoAttachmentChanged();
    partial void OnNoJunkMailChanging(bool value);
    partial void OnNoJunkMailChanged();
    partial void OnEmailFormatIDChanging(int value);
    partial void OnEmailFormatIDChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public PartyEmailAddress()
		{
			this._EmailFormat = default(EntityRef<EmailFormat>);
			this._EmailType = default(EntityRef<EmailType>);
			this._Party = default(EntityRef<Party>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailTypeID", DbType="Int NOT NULL")]
		public int EmailTypeID
		{
			get
			{
				return this._EmailTypeID;
			}
			set
			{
				if ((this._EmailTypeID != value))
				{
					if (this._EmailType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmailTypeID = value;
					this.SendPropertyChanged("EmailTypeID");
					this.OnEmailTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddrLine", DbType="NVarChar(75)")]
		public string AddrLine
		{
			get
			{
				return this._AddrLine;
			}
			set
			{
				if ((this._AddrLine != value))
				{
					this.OnAddrLineChanging(value);
					this.SendPropertyChanging();
					this._AddrLine = value;
					this.SendPropertyChanged("AddrLine");
					this.OnAddrLineChanged();
				}
			}
		}
		
		[Column(Storage="_CCAddrLine", DbType="NVarChar(75)")]
		public string CCAddrLine
		{
			get
			{
				return this._CCAddrLine;
			}
			set
			{
				if ((this._CCAddrLine != value))
				{
					this.OnCCAddrLineChanging(value);
					this.SendPropertyChanging();
					this._CCAddrLine = value;
					this.SendPropertyChanged("CCAddrLine");
					this.OnCCAddrLineChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_CatchAll", DbType="Bit NOT NULL")]
		public bool CatchAll
		{
			get
			{
				return this._CatchAll;
			}
			set
			{
				if ((this._CatchAll != value))
				{
					this.OnCatchAllChanging(value);
					this.SendPropertyChanging();
					this._CatchAll = value;
					this.SendPropertyChanged("CatchAll");
					this.OnCatchAllChanged();
				}
			}
		}
		
		[Column(Storage="_NoAttachment", DbType="Bit NOT NULL")]
		public bool NoAttachment
		{
			get
			{
				return this._NoAttachment;
			}
			set
			{
				if ((this._NoAttachment != value))
				{
					this.OnNoAttachmentChanging(value);
					this.SendPropertyChanging();
					this._NoAttachment = value;
					this.SendPropertyChanged("NoAttachment");
					this.OnNoAttachmentChanged();
				}
			}
		}
		
		[Column(Storage="_NoJunkMail", DbType="Bit NOT NULL")]
		public bool NoJunkMail
		{
			get
			{
				return this._NoJunkMail;
			}
			set
			{
				if ((this._NoJunkMail != value))
				{
					this.OnNoJunkMailChanging(value);
					this.SendPropertyChanging();
					this._NoJunkMail = value;
					this.SendPropertyChanged("NoJunkMail");
					this.OnNoJunkMailChanged();
				}
			}
		}
		
		[Column(Storage="_EmailFormatID", DbType="Int NOT NULL")]
		public int EmailFormatID
		{
			get
			{
				return this._EmailFormatID;
			}
			set
			{
				if ((this._EmailFormatID != value))
				{
					if (this._EmailFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailFormatIDChanging(value);
					this.SendPropertyChanging();
					this._EmailFormatID = value;
					this.SendPropertyChanged("EmailFormatID");
					this.OnEmailFormatIDChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_EmailAddress_EmailFormat", Storage="_EmailFormat", ThisKey="EmailFormatID", OtherKey="ID", IsForeignKey=true)]
		public EmailFormat EmailFormat
		{
			get
			{
				return this._EmailFormat.Entity;
			}
			set
			{
				EmailFormat previousValue = this._EmailFormat.Entity;
				if (((previousValue != value) 
							|| (this._EmailFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailFormat.Entity = null;
						previousValue.PartyEmailAddresses.Remove(this);
					}
					this._EmailFormat.Entity = value;
					if ((value != null))
					{
						value.PartyEmailAddresses.Add(this);
						this._EmailFormatID = value.ID;
					}
					else
					{
						this._EmailFormatID = default(int);
					}
					this.SendPropertyChanged("EmailFormat");
				}
			}
		}
		
		[Association(Name="FK_EmailAddress_EmailType", Storage="_EmailType", ThisKey="EmailTypeID", OtherKey="ID", IsForeignKey=true)]
		public EmailType EmailType
		{
			get
			{
				return this._EmailType.Entity;
			}
			set
			{
				EmailType previousValue = this._EmailType.Entity;
				if (((previousValue != value) 
							|| (this._EmailType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailType.Entity = null;
						previousValue.PartyEmailAddresses.Remove(this);
					}
					this._EmailType.Entity = value;
					if ((value != null))
					{
						value.PartyEmailAddresses.Add(this);
						this._EmailTypeID = value.ID;
					}
					else
					{
						this._EmailTypeID = default(int);
					}
					this.SendPropertyChanged("EmailType");
				}
			}
		}
		
		[Association(Name="FK_EmailAddress_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.PartyEmailAddresses.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.PartyEmailAddresses.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PartyPhone")]
	public partial class PartyPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private int _PhoneTypeID;
		
		private string _ContactName;
		
		private System.Nullable<int> _CountryID;
		
		private string _AreaCode;
		
		private string _DialNumber;
		
		private string _Ext;
		
		private bool _IsPreferred;
		
		private System.Nullable<System.DateTime> _BestTimeToCallFrom;
		
		private System.Nullable<System.DateTime> _BestTimeToCallTo;
		
		private bool _IsValidated;
		
		private bool _PreventOverride;
		
		private bool _Inactive;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<Party> _Party;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<PhoneType> _PhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnPhoneTypeIDChanging(int value);
    partial void OnPhoneTypeIDChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnDialNumberChanging(string value);
    partial void OnDialNumberChanged();
    partial void OnExtChanging(string value);
    partial void OnExtChanged();
    partial void OnIsPreferredChanging(bool value);
    partial void OnIsPreferredChanged();
    partial void OnBestTimeToCallFromChanging(System.Nullable<System.DateTime> value);
    partial void OnBestTimeToCallFromChanged();
    partial void OnBestTimeToCallToChanging(System.Nullable<System.DateTime> value);
    partial void OnBestTimeToCallToChanged();
    partial void OnIsValidatedChanging(bool value);
    partial void OnIsValidatedChanged();
    partial void OnPreventOverrideChanging(bool value);
    partial void OnPreventOverrideChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public PartyPhone()
		{
			this._Party = default(EntityRef<Party>);
			this._Country = default(EntityRef<Country>);
			this._PhoneType = default(EntityRef<PhoneType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneTypeID", DbType="Int NOT NULL")]
		public int PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="NVarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="VarChar(50)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DialNumber", DbType="VarChar(7)")]
		public string DialNumber
		{
			get
			{
				return this._DialNumber;
			}
			set
			{
				if ((this._DialNumber != value))
				{
					this.OnDialNumberChanging(value);
					this.SendPropertyChanging();
					this._DialNumber = value;
					this.SendPropertyChanged("DialNumber");
					this.OnDialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Ext", DbType="VarChar(5)")]
		public string Ext
		{
			get
			{
				return this._Ext;
			}
			set
			{
				if ((this._Ext != value))
				{
					this.OnExtChanging(value);
					this.SendPropertyChanging();
					this._Ext = value;
					this.SendPropertyChanged("Ext");
					this.OnExtChanged();
				}
			}
		}
		
		[Column(Storage="_IsPreferred", DbType="Bit NOT NULL")]
		public bool IsPreferred
		{
			get
			{
				return this._IsPreferred;
			}
			set
			{
				if ((this._IsPreferred != value))
				{
					this.OnIsPreferredChanging(value);
					this.SendPropertyChanging();
					this._IsPreferred = value;
					this.SendPropertyChanged("IsPreferred");
					this.OnIsPreferredChanged();
				}
			}
		}
		
		[Column(Storage="_BestTimeToCallFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> BestTimeToCallFrom
		{
			get
			{
				return this._BestTimeToCallFrom;
			}
			set
			{
				if ((this._BestTimeToCallFrom != value))
				{
					this.OnBestTimeToCallFromChanging(value);
					this.SendPropertyChanging();
					this._BestTimeToCallFrom = value;
					this.SendPropertyChanged("BestTimeToCallFrom");
					this.OnBestTimeToCallFromChanged();
				}
			}
		}
		
		[Column(Storage="_BestTimeToCallTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> BestTimeToCallTo
		{
			get
			{
				return this._BestTimeToCallTo;
			}
			set
			{
				if ((this._BestTimeToCallTo != value))
				{
					this.OnBestTimeToCallToChanging(value);
					this.SendPropertyChanging();
					this._BestTimeToCallTo = value;
					this.SendPropertyChanged("BestTimeToCallTo");
					this.OnBestTimeToCallToChanged();
				}
			}
		}
		
		[Column(Storage="_IsValidated", DbType="Bit NOT NULL")]
		public bool IsValidated
		{
			get
			{
				return this._IsValidated;
			}
			set
			{
				if ((this._IsValidated != value))
				{
					this.OnIsValidatedChanging(value);
					this.SendPropertyChanging();
					this._IsValidated = value;
					this.SendPropertyChanged("IsValidated");
					this.OnIsValidatedChanged();
				}
			}
		}
		
		[Column(Storage="_PreventOverride", DbType="Bit NOT NULL")]
		public bool PreventOverride
		{
			get
			{
				return this._PreventOverride;
			}
			set
			{
				if ((this._PreventOverride != value))
				{
					this.OnPreventOverrideChanging(value);
					this.SendPropertyChanging();
					this._PreventOverride = value;
					this.SendPropertyChanged("PreventOverride");
					this.OnPreventOverrideChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_PartyPhone_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.PartyPhones.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.PartyPhones.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_Phone_Country", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.PartyPhones.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.PartyPhones.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_Phone_PhoneType", Storage="_PhoneType", ThisKey="PhoneTypeID", OtherKey="ID", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.PartyPhones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.PartyPhones.Add(this);
						this._PhoneTypeID = value.ID;
					}
					else
					{
						this._PhoneTypeID = default(int);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PartyRating")]
	public partial class PartyRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private int _Rating;
		
		private System.DateTime _CreatedDate;
		
		private System.Guid _CreatedBy;
		
		private EntityRef<Party> _Party;
		
		private EntitySet<PartyRatingThread> _PartyRatingThreads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    #endregion
		
		public PartyRating()
		{
			this._Party = default(EntityRef<Party>);
			this._PartyRatingThreads = new EntitySet<PartyRatingThread>(new Action<PartyRatingThread>(this.attach_PartyRatingThreads), new Action<PartyRatingThread>(this.detach_PartyRatingThreads));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Association(Name="FK_PartyRating_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.PartyRatings.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.PartyRatings.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderRatingThread_ServiceProviderRating", Storage="_PartyRatingThreads", ThisKey="ID", OtherKey="PartyRatingID", DeleteRule="NO ACTION")]
		public EntitySet<PartyRatingThread> PartyRatingThreads
		{
			get
			{
				return this._PartyRatingThreads;
			}
			set
			{
				this._PartyRatingThreads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartyRatingThreads(PartyRatingThread entity)
		{
			this.SendPropertyChanging();
			entity.PartyRating = this;
		}
		
		private void detach_PartyRatingThreads(PartyRatingThread entity)
		{
			this.SendPropertyChanging();
			entity.PartyRating = null;
		}
	}
	
	[Table(Name="dbo.PartyRatingThread")]
	public partial class PartyRatingThread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyRatingID;
		
		private string _MainContent;
		
		private System.DateTime _CreatedDate;
		
		private System.Guid _CreatedBy;
		
		private EntityRef<PartyRating> _PartyRating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyRatingIDChanging(System.Guid value);
    partial void OnPartyRatingIDChanged();
    partial void OnMainContentChanging(string value);
    partial void OnMainContentChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    #endregion
		
		public PartyRatingThread()
		{
			this._PartyRating = default(EntityRef<PartyRating>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyRatingID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyRatingID
		{
			get
			{
				return this._PartyRatingID;
			}
			set
			{
				if ((this._PartyRatingID != value))
				{
					if (this._PartyRating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyRatingIDChanging(value);
					this.SendPropertyChanging();
					this._PartyRatingID = value;
					this.SendPropertyChanged("PartyRatingID");
					this.OnPartyRatingIDChanged();
				}
			}
		}
		
		[Column(Storage="_MainContent", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string MainContent
		{
			get
			{
				return this._MainContent;
			}
			set
			{
				if ((this._MainContent != value))
				{
					this.OnMainContentChanging(value);
					this.SendPropertyChanging();
					this._MainContent = value;
					this.SendPropertyChanged("MainContent");
					this.OnMainContentChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderRatingThread_ServiceProviderRating", Storage="_PartyRating", ThisKey="PartyRatingID", OtherKey="ID", IsForeignKey=true)]
		public PartyRating PartyRating
		{
			get
			{
				return this._PartyRating.Entity;
			}
			set
			{
				PartyRating previousValue = this._PartyRating.Entity;
				if (((previousValue != value) 
							|| (this._PartyRating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartyRating.Entity = null;
						previousValue.PartyRatingThreads.Remove(this);
					}
					this._PartyRating.Entity = value;
					if ((value != null))
					{
						value.PartyRatingThreads.Add(this);
						this._PartyRatingID = value.ID;
					}
					else
					{
						this._PartyRatingID = default(System.Guid);
					}
					this.SendPropertyChanged("PartyRating");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.PartyType")]
	public partial class PartyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Party> _Parties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PartyType()
		{
			this._Parties = new EntitySet<Party>(new Action<Party>(this.attach_Parties), new Action<Party>(this.detach_Parties));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Party_PartyType", Storage="_Parties", ThisKey="ID", OtherKey="PartyTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Party> Parties
		{
			get
			{
				return this._Parties;
			}
			set
			{
				this._Parties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.PartyType = this;
		}
		
		private void detach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.PartyType = null;
		}
	}
	
	[Table(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _PaidBy;
		
		private decimal _AmountPaid;
		
		private int _PaymentTypeID;
		
		private System.DateTime _ReceivedDate;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntitySet<InvoicePayment> _InvoicePayments;
		
		private EntityRef<BillingCompany> _BillingCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPaidByChanging(System.Guid value);
    partial void OnPaidByChanged();
    partial void OnAmountPaidChanging(decimal value);
    partial void OnAmountPaidChanged();
    partial void OnPaymentTypeIDChanging(int value);
    partial void OnPaymentTypeIDChanged();
    partial void OnReceivedDateChanging(System.DateTime value);
    partial void OnReceivedDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public Payment()
		{
			this._InvoicePayments = new EntitySet<InvoicePayment>(new Action<InvoicePayment>(this.attach_InvoicePayments), new Action<InvoicePayment>(this.detach_InvoicePayments));
			this._BillingCompany = default(EntityRef<BillingCompany>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PaidBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PaidBy
		{
			get
			{
				return this._PaidBy;
			}
			set
			{
				if ((this._PaidBy != value))
				{
					if (this._BillingCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaidByChanging(value);
					this.SendPropertyChanging();
					this._PaidBy = value;
					this.SendPropertyChanged("PaidBy");
					this.OnPaidByChanged();
				}
			}
		}
		
		[Column(Storage="_AmountPaid", DbType="Money NOT NULL")]
		public decimal AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentTypeID", DbType="Int NOT NULL")]
		public int PaymentTypeID
		{
			get
			{
				return this._PaymentTypeID;
			}
			set
			{
				if ((this._PaymentTypeID != value))
				{
					this.OnPaymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeID = value;
					this.SendPropertyChanged("PaymentTypeID");
					this.OnPaymentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_InvoicePayment_Payment", Storage="_InvoicePayments", ThisKey="ID", OtherKey="PaymentID", DeleteRule="NO ACTION")]
		public EntitySet<InvoicePayment> InvoicePayments
		{
			get
			{
				return this._InvoicePayments;
			}
			set
			{
				this._InvoicePayments.Assign(value);
			}
		}
		
		[Association(Name="FK_Payment_BillingCompany", Storage="_BillingCompany", ThisKey="PaidBy", OtherKey="ID", IsForeignKey=true)]
		public BillingCompany BillingCompany
		{
			get
			{
				return this._BillingCompany.Entity;
			}
			set
			{
				BillingCompany previousValue = this._BillingCompany.Entity;
				if (((previousValue != value) 
							|| (this._BillingCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingCompany.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._BillingCompany.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PaidBy = value.ID;
					}
					else
					{
						this._PaidBy = default(System.Guid);
					}
					this.SendPropertyChanged("BillingCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoicePayments(InvoicePayment entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_InvoicePayments(InvoicePayment entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[Table(Name="metadata.PermissionType")]
	public partial class PermissionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PermissionType()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_UserPermission_PermissionType", Storage="_UserPermissions", ThisKey="ID", OtherKey="PemissionTypeID", DeleteRule="NO ACTION")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionType = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionType = null;
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Prefix;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Suffix;
		
		private string _NickName;
		
		private string _Title;
		
		private System.Nullable<int> _GenderID;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<bool> _DOBEstimated;
		
		private EntitySet<Agent> _Agents;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<OrderingPartyUser> _OrderingPartyUsers;
		
		private EntitySet<PartyContact> _PartyContacts;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Party> _Party;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGenderIDChanging(System.Nullable<int> value);
    partial void OnGenderIDChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnDOBEstimatedChanging(System.Nullable<bool> value);
    partial void OnDOBEstimatedChanged();
    #endregion
		
		public Person()
		{
			this._Agents = new EntitySet<Agent>(new Action<Agent>(this.attach_Agents), new Action<Agent>(this.detach_Agents));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._OrderingPartyUsers = new EntitySet<OrderingPartyUser>(new Action<OrderingPartyUser>(this.attach_OrderingPartyUsers), new Action<OrderingPartyUser>(this.detach_OrderingPartyUsers));
			this._PartyContacts = new EntitySet<PartyContact>(new Action<PartyContact>(this.attach_PartyContacts), new Action<PartyContact>(this.detach_PartyContacts));
			this._Gender = default(EntityRef<Gender>);
			this._Party = default(EntityRef<Party>);
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Prefix", DbType="NVarChar(5)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(25)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NVarChar(25)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(25)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Suffix", DbType="NVarChar(15)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="NVarChar(50)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GenderID", DbType="Int")]
		public System.Nullable<int> GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_DOBEstimated", DbType="Bit")]
		public System.Nullable<bool> DOBEstimated
		{
			get
			{
				return this._DOBEstimated;
			}
			set
			{
				if ((this._DOBEstimated != value))
				{
					this.OnDOBEstimatedChanging(value);
					this.SendPropertyChanging();
					this._DOBEstimated = value;
					this.SendPropertyChanged("DOBEstimated");
					this.OnDOBEstimatedChanged();
				}
			}
		}
		
		[Association(Name="FK_Agent_Person", Storage="_Agents", ThisKey="ID", OtherKey="CreatedBy", DeleteRule="NO ACTION")]
		public EntitySet<Agent> Agents
		{
			get
			{
				return this._Agents;
			}
			set
			{
				this._Agents.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_Person", Storage="_Employees", ThisKey="ID", OtherKey="PersonID", DeleteRule="NO ACTION")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderingPartyUser_Person", Storage="_OrderingPartyUsers", ThisKey="ID", OtherKey="PersonID", DeleteRule="NO ACTION")]
		public EntitySet<OrderingPartyUser> OrderingPartyUsers
		{
			get
			{
				return this._OrderingPartyUsers;
			}
			set
			{
				this._OrderingPartyUsers.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyContact_Person", Storage="_PartyContacts", ThisKey="ID", OtherKey="PersonID", DeleteRule="NO ACTION")]
		public EntitySet<PartyContact> PartyContacts
		{
			get
			{
				return this._PartyContacts;
			}
			set
			{
				this._PartyContacts.Assign(value);
			}
		}
		
		[Association(Name="FK_Person_Gender", Storage="_Gender", ThisKey="GenderID", OtherKey="ID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._GenderID = value.ID;
					}
					else
					{
						this._GenderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[Association(Name="FK_Person_Party", Storage="_Party", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.Person = null;
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.Person = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_User_Person", Storage="_Users", ThisKey="ID", OtherKey="PersonID", DeleteRule="NO ACTION")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agents(Agent entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Agents(Agent entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_OrderingPartyUsers(OrderingPartyUser entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_OrderingPartyUsers(OrderingPartyUser entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PartyContacts(PartyContact entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PartyContacts(PartyContact entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="metadata.PhoneType")]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Inactive;
		
		private EntitySet<ApplicantPhone> _ApplicantPhones;
		
		private EntitySet<PartyPhone> _PartyPhones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public PhoneType()
		{
			this._ApplicantPhones = new EntitySet<ApplicantPhone>(new Action<ApplicantPhone>(this.attach_ApplicantPhones), new Action<ApplicantPhone>(this.detach_ApplicantPhones));
			this._PartyPhones = new EntitySet<PartyPhone>(new Action<PartyPhone>(this.attach_PartyPhones), new Action<PartyPhone>(this.detach_PartyPhones));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantPhone_PhoneType", Storage="_ApplicantPhones", ThisKey="ID", OtherKey="PhoneTypeID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantPhone> ApplicantPhones
		{
			get
			{
				return this._ApplicantPhones;
			}
			set
			{
				this._ApplicantPhones.Assign(value);
			}
		}
		
		[Association(Name="FK_Phone_PhoneType", Storage="_PartyPhones", ThisKey="ID", OtherKey="PhoneTypeID", DeleteRule="NO ACTION")]
		public EntitySet<PartyPhone> PartyPhones
		{
			get
			{
				return this._PartyPhones;
			}
			set
			{
				this._PartyPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantPhones(ApplicantPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_ApplicantPhones(ApplicantPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
		
		private void attach_PartyPhones(PartyPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_PartyPhones(PartyPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
	}
	
	[Table(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _BillingInformationID;
		
		private decimal _Price1;
		
		private decimal _KitPrice;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<BillingInformation> _BillingInformation;
		
		private EntitySet<PriceReq> _PriceReqs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnBillingInformationIDChanging(System.Guid value);
    partial void OnBillingInformationIDChanged();
    partial void OnPrice1Changing(decimal value);
    partial void OnPrice1Changed();
    partial void OnKitPriceChanging(decimal value);
    partial void OnKitPriceChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public Price()
		{
			this._BillingInformation = default(EntityRef<BillingInformation>);
			this._PriceReqs = new EntitySet<PriceReq>(new Action<PriceReq>(this.attach_PriceReqs), new Action<PriceReq>(this.detach_PriceReqs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillingInformationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BillingInformationID
		{
			get
			{
				return this._BillingInformationID;
			}
			set
			{
				if ((this._BillingInformationID != value))
				{
					if (this._BillingInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingInformationIDChanging(value);
					this.SendPropertyChanging();
					this._BillingInformationID = value;
					this.SendPropertyChanged("BillingInformationID");
					this.OnBillingInformationIDChanged();
				}
			}
		}
		
		[Column(Name="Price", Storage="_Price1", DbType="Money NOT NULL")]
		public decimal Price1
		{
			get
			{
				return this._Price1;
			}
			set
			{
				if ((this._Price1 != value))
				{
					this.OnPrice1Changing(value);
					this.SendPropertyChanging();
					this._Price1 = value;
					this.SendPropertyChanged("Price1");
					this.OnPrice1Changed();
				}
			}
		}
		
		[Column(Storage="_KitPrice", DbType="Money NOT NULL")]
		public decimal KitPrice
		{
			get
			{
				return this._KitPrice;
			}
			set
			{
				if ((this._KitPrice != value))
				{
					this.OnKitPriceChanging(value);
					this.SendPropertyChanging();
					this._KitPrice = value;
					this.SendPropertyChanged("KitPrice");
					this.OnKitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_Price_BillingInformation", Storage="_BillingInformation", ThisKey="BillingInformationID", OtherKey="ID", IsForeignKey=true)]
		public BillingInformation BillingInformation
		{
			get
			{
				return this._BillingInformation.Entity;
			}
			set
			{
				BillingInformation previousValue = this._BillingInformation.Entity;
				if (((previousValue != value) 
							|| (this._BillingInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingInformation.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._BillingInformation.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._BillingInformationID = value.ID;
					}
					else
					{
						this._BillingInformationID = default(System.Guid);
					}
					this.SendPropertyChanged("BillingInformation");
				}
			}
		}
		
		[Association(Name="FK_PriceReq_Price", Storage="_PriceReqs", ThisKey="ID", OtherKey="PriceID", DeleteRule="NO ACTION")]
		public EntitySet<PriceReq> PriceReqs
		{
			get
			{
				return this._PriceReqs;
			}
			set
			{
				this._PriceReqs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PriceReqs(PriceReq entity)
		{
			this.SendPropertyChanging();
			entity.Price = this;
		}
		
		private void detach_PriceReqs(PriceReq entity)
		{
			this.SendPropertyChanging();
			entity.Price = null;
		}
	}
	
	[Table(Name="dbo.PriceChart")]
	public partial class PriceChart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _ChartName;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntitySet<BillingInformation> _BillingInformations;
		
		private EntitySet<PriceChartItem> _PriceChartItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnChartNameChanging(string value);
    partial void OnChartNameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public PriceChart()
		{
			this._BillingInformations = new EntitySet<BillingInformation>(new Action<BillingInformation>(this.attach_BillingInformations), new Action<BillingInformation>(this.detach_BillingInformations));
			this._PriceChartItems = new EntitySet<PriceChartItem>(new Action<PriceChartItem>(this.attach_PriceChartItems), new Action<PriceChartItem>(this.detach_PriceChartItems));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChartName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChartName
		{
			get
			{
				return this._ChartName;
			}
			set
			{
				if ((this._ChartName != value))
				{
					this.OnChartNameChanging(value);
					this.SendPropertyChanging();
					this._ChartName = value;
					this.SendPropertyChanged("ChartName");
					this.OnChartNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_BillingInformation_PriceChart", Storage="_BillingInformations", ThisKey="ID", OtherKey="PriceChartID", DeleteRule="NO ACTION")]
		public EntitySet<BillingInformation> BillingInformations
		{
			get
			{
				return this._BillingInformations;
			}
			set
			{
				this._BillingInformations.Assign(value);
			}
		}
		
		[Association(Name="FK_PriceChartItem_PriceChart", Storage="_PriceChartItems", ThisKey="ID", OtherKey="PriceChartID", DeleteRule="NO ACTION")]
		public EntitySet<PriceChartItem> PriceChartItems
		{
			get
			{
				return this._PriceChartItems;
			}
			set
			{
				this._PriceChartItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillingInformations(BillingInformation entity)
		{
			this.SendPropertyChanging();
			entity.PriceChart = this;
		}
		
		private void detach_BillingInformations(BillingInformation entity)
		{
			this.SendPropertyChanging();
			entity.PriceChart = null;
		}
		
		private void attach_PriceChartItems(PriceChartItem entity)
		{
			this.SendPropertyChanging();
			entity.PriceChart = this;
		}
		
		private void detach_PriceChartItems(PriceChartItem entity)
		{
			this.SendPropertyChanging();
			entity.PriceChart = null;
		}
	}
	
	[Table(Name="dbo.PriceChartItem")]
	public partial class PriceChartItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PriceChartID;
		
		private decimal _Price;
		
		private decimal _KitPrice;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<PriceChart> _PriceChart;
		
		private EntitySet<PriceChartItemReq> _PriceChartItemReqs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPriceChartIDChanging(System.Guid value);
    partial void OnPriceChartIDChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnKitPriceChanging(decimal value);
    partial void OnKitPriceChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public PriceChartItem()
		{
			this._PriceChart = default(EntityRef<PriceChart>);
			this._PriceChartItemReqs = new EntitySet<PriceChartItemReq>(new Action<PriceChartItemReq>(this.attach_PriceChartItemReqs), new Action<PriceChartItemReq>(this.detach_PriceChartItemReqs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PriceChartID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PriceChartID
		{
			get
			{
				return this._PriceChartID;
			}
			set
			{
				if ((this._PriceChartID != value))
				{
					if (this._PriceChart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceChartIDChanging(value);
					this.SendPropertyChanging();
					this._PriceChartID = value;
					this.SendPropertyChanged("PriceChartID");
					this.OnPriceChartIDChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_KitPrice", DbType="Money NOT NULL")]
		public decimal KitPrice
		{
			get
			{
				return this._KitPrice;
			}
			set
			{
				if ((this._KitPrice != value))
				{
					this.OnKitPriceChanging(value);
					this.SendPropertyChanging();
					this._KitPrice = value;
					this.SendPropertyChanged("KitPrice");
					this.OnKitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_PriceChartItem_PriceChart", Storage="_PriceChart", ThisKey="PriceChartID", OtherKey="ID", IsForeignKey=true)]
		public PriceChart PriceChart
		{
			get
			{
				return this._PriceChart.Entity;
			}
			set
			{
				PriceChart previousValue = this._PriceChart.Entity;
				if (((previousValue != value) 
							|| (this._PriceChart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceChart.Entity = null;
						previousValue.PriceChartItems.Remove(this);
					}
					this._PriceChart.Entity = value;
					if ((value != null))
					{
						value.PriceChartItems.Add(this);
						this._PriceChartID = value.ID;
					}
					else
					{
						this._PriceChartID = default(System.Guid);
					}
					this.SendPropertyChanged("PriceChart");
				}
			}
		}
		
		[Association(Name="FK_PriceChartItemReq_PriceChartItem", Storage="_PriceChartItemReqs", ThisKey="ID", OtherKey="PriceChartItemID", DeleteRule="NO ACTION")]
		public EntitySet<PriceChartItemReq> PriceChartItemReqs
		{
			get
			{
				return this._PriceChartItemReqs;
			}
			set
			{
				this._PriceChartItemReqs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PriceChartItemReqs(PriceChartItemReq entity)
		{
			this.SendPropertyChanging();
			entity.PriceChartItem = this;
		}
		
		private void detach_PriceChartItemReqs(PriceChartItemReq entity)
		{
			this.SendPropertyChanging();
			entity.PriceChartItem = null;
		}
	}
	
	[Table(Name="dbo.PriceChartItemReq")]
	public partial class PriceChartItemReq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PriceChartItemID;
		
		private System.Guid _RequirementTypeID;
		
		private EntityRef<PriceChartItem> _PriceChartItem;
		
		private EntityRef<RequirementType> _RequirementType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceChartItemIDChanging(System.Guid value);
    partial void OnPriceChartItemIDChanged();
    partial void OnRequirementTypeIDChanging(System.Guid value);
    partial void OnRequirementTypeIDChanged();
    #endregion
		
		public PriceChartItemReq()
		{
			this._PriceChartItem = default(EntityRef<PriceChartItem>);
			this._RequirementType = default(EntityRef<RequirementType>);
			OnCreated();
		}
		
		[Column(Storage="_PriceChartItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PriceChartItemID
		{
			get
			{
				return this._PriceChartItemID;
			}
			set
			{
				if ((this._PriceChartItemID != value))
				{
					if (this._PriceChartItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceChartItemIDChanging(value);
					this.SendPropertyChanging();
					this._PriceChartItemID = value;
					this.SendPropertyChanged("PriceChartItemID");
					this.OnPriceChartItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementTypeID
		{
			get
			{
				return this._RequirementTypeID;
			}
			set
			{
				if ((this._RequirementTypeID != value))
				{
					if (this._RequirementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementTypeID = value;
					this.SendPropertyChanged("RequirementTypeID");
					this.OnRequirementTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_PriceChartItemReq_PriceChartItem", Storage="_PriceChartItem", ThisKey="PriceChartItemID", OtherKey="ID", IsForeignKey=true)]
		public PriceChartItem PriceChartItem
		{
			get
			{
				return this._PriceChartItem.Entity;
			}
			set
			{
				PriceChartItem previousValue = this._PriceChartItem.Entity;
				if (((previousValue != value) 
							|| (this._PriceChartItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceChartItem.Entity = null;
						previousValue.PriceChartItemReqs.Remove(this);
					}
					this._PriceChartItem.Entity = value;
					if ((value != null))
					{
						value.PriceChartItemReqs.Add(this);
						this._PriceChartItemID = value.ID;
					}
					else
					{
						this._PriceChartItemID = default(System.Guid);
					}
					this.SendPropertyChanged("PriceChartItem");
				}
			}
		}
		
		[Association(Name="FK_PriceChartItemReq_SmmRequirement", Storage="_RequirementType", ThisKey="RequirementTypeID", OtherKey="ID", IsForeignKey=true)]
		public RequirementType RequirementType
		{
			get
			{
				return this._RequirementType.Entity;
			}
			set
			{
				RequirementType previousValue = this._RequirementType.Entity;
				if (((previousValue != value) 
							|| (this._RequirementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequirementType.Entity = null;
						previousValue.PriceChartItemReqs.Remove(this);
					}
					this._RequirementType.Entity = value;
					if ((value != null))
					{
						value.PriceChartItemReqs.Add(this);
						this._RequirementTypeID = value.ID;
					}
					else
					{
						this._RequirementTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("RequirementType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PriceReq")]
	public partial class PriceReq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PriceID;
		
		private System.Guid _RequirementTypeID;
		
		private EntityRef<Price> _Price;
		
		private EntityRef<RequirementType> _RequirementType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIDChanging(System.Guid value);
    partial void OnPriceIDChanged();
    partial void OnRequirementTypeIDChanging(System.Guid value);
    partial void OnRequirementTypeIDChanged();
    #endregion
		
		public PriceReq()
		{
			this._Price = default(EntityRef<Price>);
			this._RequirementType = default(EntityRef<RequirementType>);
			OnCreated();
		}
		
		[Column(Storage="_PriceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PriceID
		{
			get
			{
				return this._PriceID;
			}
			set
			{
				if ((this._PriceID != value))
				{
					if (this._Price.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceIDChanging(value);
					this.SendPropertyChanging();
					this._PriceID = value;
					this.SendPropertyChanged("PriceID");
					this.OnPriceIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementTypeID
		{
			get
			{
				return this._RequirementTypeID;
			}
			set
			{
				if ((this._RequirementTypeID != value))
				{
					if (this._RequirementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementTypeID = value;
					this.SendPropertyChanged("RequirementTypeID");
					this.OnRequirementTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_PriceReq_Price", Storage="_Price", ThisKey="PriceID", OtherKey="ID", IsForeignKey=true)]
		public Price Price
		{
			get
			{
				return this._Price.Entity;
			}
			set
			{
				Price previousValue = this._Price.Entity;
				if (((previousValue != value) 
							|| (this._Price.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Price.Entity = null;
						previousValue.PriceReqs.Remove(this);
					}
					this._Price.Entity = value;
					if ((value != null))
					{
						value.PriceReqs.Add(this);
						this._PriceID = value.ID;
					}
					else
					{
						this._PriceID = default(System.Guid);
					}
					this.SendPropertyChanged("Price");
				}
			}
		}
		
		[Association(Name="FK_PriceReq_SmmRequirement", Storage="_RequirementType", ThisKey="RequirementTypeID", OtherKey="ID", IsForeignKey=true)]
		public RequirementType RequirementType
		{
			get
			{
				return this._RequirementType.Entity;
			}
			set
			{
				RequirementType previousValue = this._RequirementType.Entity;
				if (((previousValue != value) 
							|| (this._RequirementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequirementType.Entity = null;
						previousValue.PriceReqs.Remove(this);
					}
					this._RequirementType.Entity = value;
					if ((value != null))
					{
						value.PriceReqs.Add(this);
						this._RequirementTypeID = value.ID;
					}
					else
					{
						this._RequirementTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("RequirementType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.PricingUnit")]
	public partial class PricingUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ServiceProviderFee> _ServiceProviderFees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PricingUnit()
		{
			this._ServiceProviderFees = new EntitySet<ServiceProviderFee>(new Action<ServiceProviderFee>(this.attach_ServiceProviderFees), new Action<ServiceProviderFee>(this.detach_ServiceProviderFees));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFee_PricingUnit", Storage="_ServiceProviderFees", ThisKey="ID", OtherKey="PricingUnitID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderFee> ServiceProviderFees
		{
			get
			{
				return this._ServiceProviderFees;
			}
			set
			{
				this._ServiceProviderFees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceProviderFees(ServiceProviderFee entity)
		{
			this.SendPropertyChanging();
			entity.PricingUnit = this;
		}
		
		private void detach_ServiceProviderFees(ServiceProviderFee entity)
		{
			this.SendPropertyChanging();
			entity.PricingUnit = null;
		}
	}
	
	[Table(Name="dbo.Requirement")]
	public partial class Requirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _InsuranceID;
		
		private string _Name;
		
		private System.Guid _RequirementTypeID;
		
		private System.Nullable<int> _AcordCode;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntitySet<IncompleteOrderRequirement> _IncompleteOrderRequirements;
		
		private EntitySet<OrderAssignmentReq> _OrderAssignmentReqs;
		
		private EntitySet<OrderRequirement> _OrderRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRequirementTypeIDChanging(System.Guid value);
    partial void OnRequirementTypeIDChanged();
    partial void OnAcordCodeChanging(System.Nullable<int> value);
    partial void OnAcordCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public Requirement()
		{
			this._IncompleteOrderRequirements = new EntitySet<IncompleteOrderRequirement>(new Action<IncompleteOrderRequirement>(this.attach_IncompleteOrderRequirements), new Action<IncompleteOrderRequirement>(this.detach_IncompleteOrderRequirements));
			this._OrderAssignmentReqs = new EntitySet<OrderAssignmentReq>(new Action<OrderAssignmentReq>(this.attach_OrderAssignmentReqs), new Action<OrderAssignmentReq>(this.detach_OrderAssignmentReqs));
			this._OrderRequirements = new EntitySet<OrderRequirement>(new Action<OrderRequirement>(this.attach_OrderRequirements), new Action<OrderRequirement>(this.detach_OrderRequirements));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RequirementTypeID
		{
			get
			{
				return this._RequirementTypeID;
			}
			set
			{
				if ((this._RequirementTypeID != value))
				{
					this.OnRequirementTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementTypeID = value;
					this.SendPropertyChanged("RequirementTypeID");
					this.OnRequirementTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AcordCode", DbType="Int")]
		public System.Nullable<int> AcordCode
		{
			get
			{
				return this._AcordCode;
			}
			set
			{
				if ((this._AcordCode != value))
				{
					this.OnAcordCodeChanging(value);
					this.SendPropertyChanging();
					this._AcordCode = value;
					this.SendPropertyChanged("AcordCode");
					this.OnAcordCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_IncompleteOrderRequirement_Requirement", Storage="_IncompleteOrderRequirements", ThisKey="ID", OtherKey="RequirementID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderRequirement> IncompleteOrderRequirements
		{
			get
			{
				return this._IncompleteOrderRequirements;
			}
			set
			{
				this._IncompleteOrderRequirements.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignmentReq_Requirement", Storage="_OrderAssignmentReqs", ThisKey="ID", OtherKey="RequirementID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignmentReq> OrderAssignmentReqs
		{
			get
			{
				return this._OrderAssignmentReqs;
			}
			set
			{
				this._OrderAssignmentReqs.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderRequirement_Requirement", Storage="_OrderRequirements", ThisKey="ID", OtherKey="RequirementID", DeleteRule="NO ACTION")]
		public EntitySet<OrderRequirement> OrderRequirements
		{
			get
			{
				return this._OrderRequirements;
			}
			set
			{
				this._OrderRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncompleteOrderRequirements(IncompleteOrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_IncompleteOrderRequirements(IncompleteOrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
		
		private void attach_OrderAssignmentReqs(OrderAssignmentReq entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_OrderAssignmentReqs(OrderAssignmentReq entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
		
		private void attach_OrderRequirements(OrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_OrderRequirements(OrderRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
	}
	
	[Table(Name="dbo.RequirementType")]
	public partial class RequirementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private int _SortOrder;
		
		private EntitySet<FeeLevelItemReq> _FeeLevelItemReqs;
		
		private EntitySet<PriceChartItemReq> _PriceChartItemReqs;
		
		private EntitySet<PriceReq> _PriceReqs;
		
		private EntitySet<ServiceProviderFeeReq> _ServiceProviderFeeReqs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public RequirementType()
		{
			this._FeeLevelItemReqs = new EntitySet<FeeLevelItemReq>(new Action<FeeLevelItemReq>(this.attach_FeeLevelItemReqs), new Action<FeeLevelItemReq>(this.detach_FeeLevelItemReqs));
			this._PriceChartItemReqs = new EntitySet<PriceChartItemReq>(new Action<PriceChartItemReq>(this.attach_PriceChartItemReqs), new Action<PriceChartItemReq>(this.detach_PriceChartItemReqs));
			this._PriceReqs = new EntitySet<PriceReq>(new Action<PriceReq>(this.attach_PriceReqs), new Action<PriceReq>(this.detach_PriceReqs));
			this._ServiceProviderFeeReqs = new EntitySet<ServiceProviderFeeReq>(new Action<ServiceProviderFeeReq>(this.attach_ServiceProviderFeeReqs), new Action<ServiceProviderFeeReq>(this.detach_ServiceProviderFeeReqs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Association(Name="FK_FeeLevelItemReq_RequirementType", Storage="_FeeLevelItemReqs", ThisKey="ID", OtherKey="RequirementTypeID", DeleteRule="NO ACTION")]
		public EntitySet<FeeLevelItemReq> FeeLevelItemReqs
		{
			get
			{
				return this._FeeLevelItemReqs;
			}
			set
			{
				this._FeeLevelItemReqs.Assign(value);
			}
		}
		
		[Association(Name="FK_PriceChartItemReq_SmmRequirement", Storage="_PriceChartItemReqs", ThisKey="ID", OtherKey="RequirementTypeID", DeleteRule="NO ACTION")]
		public EntitySet<PriceChartItemReq> PriceChartItemReqs
		{
			get
			{
				return this._PriceChartItemReqs;
			}
			set
			{
				this._PriceChartItemReqs.Assign(value);
			}
		}
		
		[Association(Name="FK_PriceReq_SmmRequirement", Storage="_PriceReqs", ThisKey="ID", OtherKey="RequirementTypeID", DeleteRule="NO ACTION")]
		public EntitySet<PriceReq> PriceReqs
		{
			get
			{
				return this._PriceReqs;
			}
			set
			{
				this._PriceReqs.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderFeeReq_SmmRequirement", Storage="_ServiceProviderFeeReqs", ThisKey="ID", OtherKey="RequirementTypeID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderFeeReq> ServiceProviderFeeReqs
		{
			get
			{
				return this._ServiceProviderFeeReqs;
			}
			set
			{
				this._ServiceProviderFeeReqs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeLevelItemReqs(FeeLevelItemReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = this;
		}
		
		private void detach_FeeLevelItemReqs(FeeLevelItemReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = null;
		}
		
		private void attach_PriceChartItemReqs(PriceChartItemReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = this;
		}
		
		private void detach_PriceChartItemReqs(PriceChartItemReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = null;
		}
		
		private void attach_PriceReqs(PriceReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = this;
		}
		
		private void detach_PriceReqs(PriceReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = null;
		}
		
		private void attach_ServiceProviderFeeReqs(ServiceProviderFeeReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = this;
		}
		
		private void detach_ServiceProviderFeeReqs(ServiceProviderFeeReq entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = null;
		}
	}
	
	[Table(Name="dbo.ServiceProvider")]
	public partial class ServiceProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PartyID;
		
		private int _LanguageID;
		
		private bool _PrivacyAffiliate;
		
		private bool _AutoPay;
		
		private string _QuickBookID;
		
		private bool _IsApproved;
		
		private string _CoverZipCode;
		
		private System.Nullable<double> _CoverRadius;
		
		private System.Nullable<System.Guid> _FeeLevelID;
		
		private EntitySet<Credentialing> _Credentialings;
		
		private EntitySet<OrderAssignment> _OrderAssignments;
		
		private EntityRef<FeeLevel> _FeeLevel;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Party> _Party;
		
		private EntitySet<ServiceProviderApproval> _ServiceProviderApprovals;
		
		private EntitySet<ServiceProviderBlacklist> _ServiceProviderBlacklists;
		
		private EntitySet<ServiceProviderCoverArea> _ServiceProviderCoverAreas;
		
		private EntitySet<ServiceProviderFee> _ServiceProviderFees;
		
		private EntitySet<ServiceProviderSchedule> _ServiceProviderSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPartyIDChanging(System.Guid value);
    partial void OnPartyIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnPrivacyAffiliateChanging(bool value);
    partial void OnPrivacyAffiliateChanged();
    partial void OnAutoPayChanging(bool value);
    partial void OnAutoPayChanged();
    partial void OnQuickBookIDChanging(string value);
    partial void OnQuickBookIDChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnCoverZipCodeChanging(string value);
    partial void OnCoverZipCodeChanged();
    partial void OnCoverRadiusChanging(System.Nullable<double> value);
    partial void OnCoverRadiusChanged();
    partial void OnFeeLevelIDChanging(System.Nullable<System.Guid> value);
    partial void OnFeeLevelIDChanged();
    #endregion
		
		public ServiceProvider()
		{
			this._Credentialings = new EntitySet<Credentialing>(new Action<Credentialing>(this.attach_Credentialings), new Action<Credentialing>(this.detach_Credentialings));
			this._OrderAssignments = new EntitySet<OrderAssignment>(new Action<OrderAssignment>(this.attach_OrderAssignments), new Action<OrderAssignment>(this.detach_OrderAssignments));
			this._FeeLevel = default(EntityRef<FeeLevel>);
			this._Language = default(EntityRef<Language>);
			this._Party = default(EntityRef<Party>);
			this._ServiceProviderApprovals = new EntitySet<ServiceProviderApproval>(new Action<ServiceProviderApproval>(this.attach_ServiceProviderApprovals), new Action<ServiceProviderApproval>(this.detach_ServiceProviderApprovals));
			this._ServiceProviderBlacklists = new EntitySet<ServiceProviderBlacklist>(new Action<ServiceProviderBlacklist>(this.attach_ServiceProviderBlacklists), new Action<ServiceProviderBlacklist>(this.detach_ServiceProviderBlacklists));
			this._ServiceProviderCoverAreas = new EntitySet<ServiceProviderCoverArea>(new Action<ServiceProviderCoverArea>(this.attach_ServiceProviderCoverAreas), new Action<ServiceProviderCoverArea>(this.detach_ServiceProviderCoverAreas));
			this._ServiceProviderFees = new EntitySet<ServiceProviderFee>(new Action<ServiceProviderFee>(this.attach_ServiceProviderFees), new Action<ServiceProviderFee>(this.detach_ServiceProviderFees));
			this._ServiceProviderSchedules = new EntitySet<ServiceProviderSchedule>(new Action<ServiceProviderSchedule>(this.attach_ServiceProviderSchedules), new Action<ServiceProviderSchedule>(this.detach_ServiceProviderSchedules));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartyID
		{
			get
			{
				return this._PartyID;
			}
			set
			{
				if ((this._PartyID != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIDChanging(value);
					this.SendPropertyChanging();
					this._PartyID = value;
					this.SendPropertyChanged("PartyID");
					this.OnPartyIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PrivacyAffiliate", DbType="Bit NOT NULL")]
		public bool PrivacyAffiliate
		{
			get
			{
				return this._PrivacyAffiliate;
			}
			set
			{
				if ((this._PrivacyAffiliate != value))
				{
					this.OnPrivacyAffiliateChanging(value);
					this.SendPropertyChanging();
					this._PrivacyAffiliate = value;
					this.SendPropertyChanged("PrivacyAffiliate");
					this.OnPrivacyAffiliateChanged();
				}
			}
		}
		
		[Column(Storage="_AutoPay", DbType="Bit NOT NULL")]
		public bool AutoPay
		{
			get
			{
				return this._AutoPay;
			}
			set
			{
				if ((this._AutoPay != value))
				{
					this.OnAutoPayChanging(value);
					this.SendPropertyChanging();
					this._AutoPay = value;
					this.SendPropertyChanged("AutoPay");
					this.OnAutoPayChanged();
				}
			}
		}
		
		[Column(Storage="_QuickBookID", DbType="NChar(10)")]
		public string QuickBookID
		{
			get
			{
				return this._QuickBookID;
			}
			set
			{
				if ((this._QuickBookID != value))
				{
					this.OnQuickBookIDChanging(value);
					this.SendPropertyChanging();
					this._QuickBookID = value;
					this.SendPropertyChanged("QuickBookID");
					this.OnQuickBookIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_CoverZipCode", DbType="NVarChar(50)")]
		public string CoverZipCode
		{
			get
			{
				return this._CoverZipCode;
			}
			set
			{
				if ((this._CoverZipCode != value))
				{
					this.OnCoverZipCodeChanging(value);
					this.SendPropertyChanging();
					this._CoverZipCode = value;
					this.SendPropertyChanged("CoverZipCode");
					this.OnCoverZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CoverRadius", DbType="Float")]
		public System.Nullable<double> CoverRadius
		{
			get
			{
				return this._CoverRadius;
			}
			set
			{
				if ((this._CoverRadius != value))
				{
					this.OnCoverRadiusChanging(value);
					this.SendPropertyChanging();
					this._CoverRadius = value;
					this.SendPropertyChanged("CoverRadius");
					this.OnCoverRadiusChanged();
				}
			}
		}
		
		[Column(Storage="_FeeLevelID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FeeLevelID
		{
			get
			{
				return this._FeeLevelID;
			}
			set
			{
				if ((this._FeeLevelID != value))
				{
					if (this._FeeLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeeLevelIDChanging(value);
					this.SendPropertyChanging();
					this._FeeLevelID = value;
					this.SendPropertyChanged("FeeLevelID");
					this.OnFeeLevelIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Credentialing_ServiceProvider", Storage="_Credentialings", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<Credentialing> Credentialings
		{
			get
			{
				return this._Credentialings;
			}
			set
			{
				this._Credentialings.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderAssignment_ServiceProvider", Storage="_OrderAssignments", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<OrderAssignment> OrderAssignments
		{
			get
			{
				return this._OrderAssignments;
			}
			set
			{
				this._OrderAssignments.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProvider_FeeLevel", Storage="_FeeLevel", ThisKey="FeeLevelID", OtherKey="ID", IsForeignKey=true)]
		public FeeLevel FeeLevel
		{
			get
			{
				return this._FeeLevel.Entity;
			}
			set
			{
				FeeLevel previousValue = this._FeeLevel.Entity;
				if (((previousValue != value) 
							|| (this._FeeLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeeLevel.Entity = null;
						previousValue.ServiceProviders.Remove(this);
					}
					this._FeeLevel.Entity = value;
					if ((value != null))
					{
						value.ServiceProviders.Add(this);
						this._FeeLevelID = value.ID;
					}
					else
					{
						this._FeeLevelID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("FeeLevel");
				}
			}
		}
		
		[Association(Name="FK_ServiceProvider_Language", Storage="_Language", ThisKey="LanguageID", OtherKey="ID", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.ServiceProviders.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.ServiceProviders.Add(this);
						this._LanguageID = value.ID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="FK_ServiceProvider_Party", Storage="_Party", ThisKey="PartyID", OtherKey="ID", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.ServiceProviders.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.ServiceProviders.Add(this);
						this._PartyID = value.ID;
					}
					else
					{
						this._PartyID = default(System.Guid);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderApproval_ServiceProvider", Storage="_ServiceProviderApprovals", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderApproval> ServiceProviderApprovals
		{
			get
			{
				return this._ServiceProviderApprovals;
			}
			set
			{
				this._ServiceProviderApprovals.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderBlacklist_ServiceProvider", Storage="_ServiceProviderBlacklists", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderBlacklist> ServiceProviderBlacklists
		{
			get
			{
				return this._ServiceProviderBlacklists;
			}
			set
			{
				this._ServiceProviderBlacklists.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderCoverArea_ServiceProvider", Storage="_ServiceProviderCoverAreas", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderCoverArea> ServiceProviderCoverAreas
		{
			get
			{
				return this._ServiceProviderCoverAreas;
			}
			set
			{
				this._ServiceProviderCoverAreas.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderFee_ServiceProvider", Storage="_ServiceProviderFees", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderFee> ServiceProviderFees
		{
			get
			{
				return this._ServiceProviderFees;
			}
			set
			{
				this._ServiceProviderFees.Assign(value);
			}
		}
		
		[Association(Name="FK_ServiceProviderSchedule_ServiceProvider", Storage="_ServiceProviderSchedules", ThisKey="ID", OtherKey="ServiceProviderID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderSchedule> ServiceProviderSchedules
		{
			get
			{
				return this._ServiceProviderSchedules;
			}
			set
			{
				this._ServiceProviderSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credentialings(Credentialing entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_Credentialings(Credentialing entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
		
		private void attach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_OrderAssignments(OrderAssignment entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
		
		private void attach_ServiceProviderApprovals(ServiceProviderApproval entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_ServiceProviderApprovals(ServiceProviderApproval entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
		
		private void attach_ServiceProviderBlacklists(ServiceProviderBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_ServiceProviderBlacklists(ServiceProviderBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
		
		private void attach_ServiceProviderCoverAreas(ServiceProviderCoverArea entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_ServiceProviderCoverAreas(ServiceProviderCoverArea entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
		
		private void attach_ServiceProviderFees(ServiceProviderFee entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_ServiceProviderFees(ServiceProviderFee entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
		
		private void attach_ServiceProviderSchedules(ServiceProviderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = this;
		}
		
		private void detach_ServiceProviderSchedules(ServiceProviderSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvider = null;
		}
	}
	
	[Table(Name="dbo.ServiceProviderApproval")]
	public partial class ServiceProviderApproval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ServiceProviderID;
		
		private System.Guid _BillingCompanyID;
		
		private string _ReferenceCode;
		
		private int _ApprovalStatusID;
		
		private EntityRef<ApprovalStatus> _ApprovalStatus;
		
		private EntityRef<BillingCompany> _BillingCompany;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceProviderIDChanging(System.Guid value);
    partial void OnServiceProviderIDChanged();
    partial void OnBillingCompanyIDChanging(System.Guid value);
    partial void OnBillingCompanyIDChanged();
    partial void OnReferenceCodeChanging(string value);
    partial void OnReferenceCodeChanged();
    partial void OnApprovalStatusIDChanging(int value);
    partial void OnApprovalStatusIDChanged();
    #endregion
		
		public ServiceProviderApproval()
		{
			this._ApprovalStatus = default(EntityRef<ApprovalStatus>);
			this._BillingCompany = default(EntityRef<BillingCompany>);
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillingCompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BillingCompanyID
		{
			get
			{
				return this._BillingCompanyID;
			}
			set
			{
				if ((this._BillingCompanyID != value))
				{
					if (this._BillingCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._BillingCompanyID = value;
					this.SendPropertyChanged("BillingCompanyID");
					this.OnBillingCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceCode", DbType="NVarChar(15)")]
		public string ReferenceCode
		{
			get
			{
				return this._ReferenceCode;
			}
			set
			{
				if ((this._ReferenceCode != value))
				{
					this.OnReferenceCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferenceCode = value;
					this.SendPropertyChanged("ReferenceCode");
					this.OnReferenceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovalStatusID", DbType="Int NOT NULL")]
		public int ApprovalStatusID
		{
			get
			{
				return this._ApprovalStatusID;
			}
			set
			{
				if ((this._ApprovalStatusID != value))
				{
					if (this._ApprovalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatusID = value;
					this.SendPropertyChanged("ApprovalStatusID");
					this.OnApprovalStatusIDChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderApproval_ApprovalStatus", Storage="_ApprovalStatus", ThisKey="ApprovalStatusID", OtherKey="ID", IsForeignKey=true)]
		public ApprovalStatus ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus.Entity;
			}
			set
			{
				ApprovalStatus previousValue = this._ApprovalStatus.Entity;
				if (((previousValue != value) 
							|| (this._ApprovalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovalStatus.Entity = null;
						previousValue.ServiceProviderApprovals.Remove(this);
					}
					this._ApprovalStatus.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderApprovals.Add(this);
						this._ApprovalStatusID = value.ID;
					}
					else
					{
						this._ApprovalStatusID = default(int);
					}
					this.SendPropertyChanged("ApprovalStatus");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderApproval_BillingCompany", Storage="_BillingCompany", ThisKey="BillingCompanyID", OtherKey="ID", IsForeignKey=true)]
		public BillingCompany BillingCompany
		{
			get
			{
				return this._BillingCompany.Entity;
			}
			set
			{
				BillingCompany previousValue = this._BillingCompany.Entity;
				if (((previousValue != value) 
							|| (this._BillingCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingCompany.Entity = null;
						previousValue.ServiceProviderApprovals.Remove(this);
					}
					this._BillingCompany.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderApprovals.Add(this);
						this._BillingCompanyID = value.ID;
					}
					else
					{
						this._BillingCompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("BillingCompany");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderApproval_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.ServiceProviderApprovals.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderApprovals.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceProviderBlacklist")]
	public partial class ServiceProviderBlacklist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ServiceProviderID;
		
		private string _Notes;
		
		private System.Guid _AppraiserID;
		
		private System.Nullable<int> _AppraiserType;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceProviderIDChanging(System.Guid value);
    partial void OnServiceProviderIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnAppraiserIDChanging(System.Guid value);
    partial void OnAppraiserIDChanged();
    partial void OnAppraiserTypeChanging(System.Nullable<int> value);
    partial void OnAppraiserTypeChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public ServiceProviderBlacklist()
		{
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(150)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_AppraiserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AppraiserID
		{
			get
			{
				return this._AppraiserID;
			}
			set
			{
				if ((this._AppraiserID != value))
				{
					this.OnAppraiserIDChanging(value);
					this.SendPropertyChanging();
					this._AppraiserID = value;
					this.SendPropertyChanged("AppraiserID");
					this.OnAppraiserIDChanged();
				}
			}
		}
		
		[Column(Storage="_AppraiserType", DbType="Int")]
		public System.Nullable<int> AppraiserType
		{
			get
			{
				return this._AppraiserType;
			}
			set
			{
				if ((this._AppraiserType != value))
				{
					this.OnAppraiserTypeChanging(value);
					this.SendPropertyChanging();
					this._AppraiserType = value;
					this.SendPropertyChanged("AppraiserType");
					this.OnAppraiserTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderBlacklist_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.ServiceProviderBlacklists.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderBlacklists.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceProviderCoverArea")]
	public partial class ServiceProviderCoverArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ServiceProviderID;
		
		private string _ZipCode;
		
		private double _Distance;
		
		private decimal _ExtraFee;
		
		private string _Note;
		
		private bool _Inactive;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnServiceProviderIDChanging(System.Guid value);
    partial void OnServiceProviderIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnDistanceChanging(double value);
    partial void OnDistanceChanged();
    partial void OnExtraFeeChanging(decimal value);
    partial void OnExtraFeeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public ServiceProviderCoverArea()
		{
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Distance", DbType="Float NOT NULL")]
		public double Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_ExtraFee", DbType="Money NOT NULL")]
		public decimal ExtraFee
		{
			get
			{
				return this._ExtraFee;
			}
			set
			{
				if ((this._ExtraFee != value))
				{
					this.OnExtraFeeChanging(value);
					this.SendPropertyChanging();
					this._ExtraFee = value;
					this.SendPropertyChanged("ExtraFee");
					this.OnExtraFeeChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(150)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderCoverArea_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.ServiceProviderCoverAreas.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderCoverAreas.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceProviderFee")]
	public partial class ServiceProviderFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ServiceProviderID;
		
		private int _OrderTypeID;
		
		private decimal _Fee;
		
		private System.Nullable<decimal> _KitFee;
		
		private int _PricingUnitID;
		
		private bool _BillTo3rdParty;
		
		private EntityRef<OrderType> _OrderType;
		
		private EntityRef<PricingUnit> _PricingUnit;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
		private EntitySet<ServiceProviderFeeReq> _ServiceProviderFeeReqs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnServiceProviderIDChanging(System.Guid value);
    partial void OnServiceProviderIDChanged();
    partial void OnOrderTypeIDChanging(int value);
    partial void OnOrderTypeIDChanged();
    partial void OnFeeChanging(decimal value);
    partial void OnFeeChanged();
    partial void OnKitFeeChanging(System.Nullable<decimal> value);
    partial void OnKitFeeChanged();
    partial void OnPricingUnitIDChanging(int value);
    partial void OnPricingUnitIDChanged();
    partial void OnBillTo3rdPartyChanging(bool value);
    partial void OnBillTo3rdPartyChanged();
    #endregion
		
		public ServiceProviderFee()
		{
			this._OrderType = default(EntityRef<OrderType>);
			this._PricingUnit = default(EntityRef<PricingUnit>);
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			this._ServiceProviderFeeReqs = new EntitySet<ServiceProviderFeeReq>(new Action<ServiceProviderFeeReq>(this.attach_ServiceProviderFeeReqs), new Action<ServiceProviderFeeReq>(this.detach_ServiceProviderFeeReqs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderTypeID", DbType="Int NOT NULL")]
		public int OrderTypeID
		{
			get
			{
				return this._OrderTypeID;
			}
			set
			{
				if ((this._OrderTypeID != value))
				{
					if (this._OrderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTypeID = value;
					this.SendPropertyChanged("OrderTypeID");
					this.OnOrderTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Fee", DbType="Money NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[Column(Storage="_KitFee", DbType="Money")]
		public System.Nullable<decimal> KitFee
		{
			get
			{
				return this._KitFee;
			}
			set
			{
				if ((this._KitFee != value))
				{
					this.OnKitFeeChanging(value);
					this.SendPropertyChanging();
					this._KitFee = value;
					this.SendPropertyChanged("KitFee");
					this.OnKitFeeChanged();
				}
			}
		}
		
		[Column(Storage="_PricingUnitID", DbType="Int NOT NULL")]
		public int PricingUnitID
		{
			get
			{
				return this._PricingUnitID;
			}
			set
			{
				if ((this._PricingUnitID != value))
				{
					if (this._PricingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPricingUnitIDChanging(value);
					this.SendPropertyChanging();
					this._PricingUnitID = value;
					this.SendPropertyChanged("PricingUnitID");
					this.OnPricingUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillTo3rdParty", DbType="Bit NOT NULL")]
		public bool BillTo3rdParty
		{
			get
			{
				return this._BillTo3rdParty;
			}
			set
			{
				if ((this._BillTo3rdParty != value))
				{
					this.OnBillTo3rdPartyChanging(value);
					this.SendPropertyChanging();
					this._BillTo3rdParty = value;
					this.SendPropertyChanged("BillTo3rdParty");
					this.OnBillTo3rdPartyChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFee_FeeType", Storage="_OrderType", ThisKey="OrderTypeID", OtherKey="ID", IsForeignKey=true)]
		public OrderType OrderType
		{
			get
			{
				return this._OrderType.Entity;
			}
			set
			{
				OrderType previousValue = this._OrderType.Entity;
				if (((previousValue != value) 
							|| (this._OrderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderType.Entity = null;
						previousValue.ServiceProviderFees.Remove(this);
					}
					this._OrderType.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderFees.Add(this);
						this._OrderTypeID = value.ID;
					}
					else
					{
						this._OrderTypeID = default(int);
					}
					this.SendPropertyChanged("OrderType");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFee_PricingUnit", Storage="_PricingUnit", ThisKey="PricingUnitID", OtherKey="ID", IsForeignKey=true)]
		public PricingUnit PricingUnit
		{
			get
			{
				return this._PricingUnit.Entity;
			}
			set
			{
				PricingUnit previousValue = this._PricingUnit.Entity;
				if (((previousValue != value) 
							|| (this._PricingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PricingUnit.Entity = null;
						previousValue.ServiceProviderFees.Remove(this);
					}
					this._PricingUnit.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderFees.Add(this);
						this._PricingUnitID = value.ID;
					}
					else
					{
						this._PricingUnitID = default(int);
					}
					this.SendPropertyChanged("PricingUnit");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFee_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.ServiceProviderFees.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderFees.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFeeReq_ServiceProviderFee", Storage="_ServiceProviderFeeReqs", ThisKey="ID", OtherKey="ServiceProviderFeeID", DeleteRule="NO ACTION")]
		public EntitySet<ServiceProviderFeeReq> ServiceProviderFeeReqs
		{
			get
			{
				return this._ServiceProviderFeeReqs;
			}
			set
			{
				this._ServiceProviderFeeReqs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceProviderFeeReqs(ServiceProviderFeeReq entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProviderFee = this;
		}
		
		private void detach_ServiceProviderFeeReqs(ServiceProviderFeeReq entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProviderFee = null;
		}
	}
	
	[Table(Name="dbo.ServiceProviderFeeReq")]
	public partial class ServiceProviderFeeReq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ServiceProviderFeeID;
		
		private System.Guid _RequirementTypeID;
		
		private EntityRef<ServiceProviderFee> _ServiceProviderFee;
		
		private EntityRef<RequirementType> _RequirementType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceProviderFeeIDChanging(System.Guid value);
    partial void OnServiceProviderFeeIDChanged();
    partial void OnRequirementTypeIDChanging(System.Guid value);
    partial void OnRequirementTypeIDChanged();
    #endregion
		
		public ServiceProviderFeeReq()
		{
			this._ServiceProviderFee = default(EntityRef<ServiceProviderFee>);
			this._RequirementType = default(EntityRef<RequirementType>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceProviderFeeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ServiceProviderFeeID
		{
			get
			{
				return this._ServiceProviderFeeID;
			}
			set
			{
				if ((this._ServiceProviderFeeID != value))
				{
					if (this._ServiceProviderFee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderFeeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderFeeID = value;
					this.SendPropertyChanged("ServiceProviderFeeID");
					this.OnServiceProviderFeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequirementTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequirementTypeID
		{
			get
			{
				return this._RequirementTypeID;
			}
			set
			{
				if ((this._RequirementTypeID != value))
				{
					if (this._RequirementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementTypeID = value;
					this.SendPropertyChanged("RequirementTypeID");
					this.OnRequirementTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFeeReq_ServiceProviderFee", Storage="_ServiceProviderFee", ThisKey="ServiceProviderFeeID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProviderFee ServiceProviderFee
		{
			get
			{
				return this._ServiceProviderFee.Entity;
			}
			set
			{
				ServiceProviderFee previousValue = this._ServiceProviderFee.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProviderFee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProviderFee.Entity = null;
						previousValue.ServiceProviderFeeReqs.Remove(this);
					}
					this._ServiceProviderFee.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderFeeReqs.Add(this);
						this._ServiceProviderFeeID = value.ID;
					}
					else
					{
						this._ServiceProviderFeeID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProviderFee");
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderFeeReq_SmmRequirement", Storage="_RequirementType", ThisKey="RequirementTypeID", OtherKey="ID", IsForeignKey=true)]
		public RequirementType RequirementType
		{
			get
			{
				return this._RequirementType.Entity;
			}
			set
			{
				RequirementType previousValue = this._RequirementType.Entity;
				if (((previousValue != value) 
							|| (this._RequirementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequirementType.Entity = null;
						previousValue.ServiceProviderFeeReqs.Remove(this);
					}
					this._RequirementType.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderFeeReqs.Add(this);
						this._RequirementTypeID = value.ID;
					}
					else
					{
						this._RequirementTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("RequirementType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceProviderSchedule")]
	public partial class ServiceProviderSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ServiceProviderID;
		
		private bool _IsAvailable;
		
		private int _Weekday;
		
		private System.Nullable<System.DateTime> _FromDate;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private System.Nullable<System.DateTime> _FromTime;
		
		private System.Nullable<System.DateTime> _ToTime;
		
		private bool _Inactive;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private EntityRef<ServiceProvider> _ServiceProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnServiceProviderIDChanging(System.Guid value);
    partial void OnServiceProviderIDChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnWeekdayChanging(int value);
    partial void OnWeekdayChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnFromTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFromTimeChanged();
    partial void OnToTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnToTimeChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    #endregion
		
		public ServiceProviderSchedule()
		{
			this._ServiceProvider = default(EntityRef<ServiceProvider>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceProviderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ServiceProviderID
		{
			get
			{
				return this._ServiceProviderID;
			}
			set
			{
				if ((this._ServiceProviderID != value))
				{
					if (this._ServiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceProviderID = value;
					this.SendPropertyChanged("ServiceProviderID");
					this.OnServiceProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_Weekday", DbType="Int NOT NULL")]
		public int Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this.OnWeekdayChanging(value);
					this.SendPropertyChanging();
					this._Weekday = value;
					this.SendPropertyChanged("Weekday");
					this.OnWeekdayChanged();
				}
			}
		}
		
		[Column(Storage="_FromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[Column(Storage="_FromTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromTime
		{
			get
			{
				return this._FromTime;
			}
			set
			{
				if ((this._FromTime != value))
				{
					this.OnFromTimeChanging(value);
					this.SendPropertyChanging();
					this._FromTime = value;
					this.SendPropertyChanged("FromTime");
					this.OnFromTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ToTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToTime
		{
			get
			{
				return this._ToTime;
			}
			set
			{
				if ((this._ToTime != value))
				{
					this.OnToTimeChanging(value);
					this.SendPropertyChanging();
					this._ToTime = value;
					this.SendPropertyChanged("ToTime");
					this.OnToTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_ServiceProviderSchedule_ServiceProvider", Storage="_ServiceProvider", ThisKey="ServiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public ServiceProvider ServiceProvider
		{
			get
			{
				return this._ServiceProvider.Entity;
			}
			set
			{
				ServiceProvider previousValue = this._ServiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvider.Entity = null;
						previousValue.ServiceProviderSchedules.Remove(this);
					}
					this._ServiceProvider.Entity = value;
					if ((value != null))
					{
						value.ServiceProviderSchedules.Add(this);
						this._ServiceProviderID = value.ID;
					}
					else
					{
						this._ServiceProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.SmokeStatus")]
	public partial class SmokeStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Inactive;
		
		private EntitySet<Applicant> _Applicants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public SmokeStatus()
		{
			this._Applicants = new EntitySet<Applicant>(new Action<Applicant>(this.attach_Applicants), new Action<Applicant>(this.detach_Applicants));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_Applicant_SmokeStatus", Storage="_Applicants", ThisKey="ID", OtherKey="SmokeStatusID", DeleteRule="NO ACTION")]
		public EntitySet<Applicant> Applicants
		{
			get
			{
				return this._Applicants;
			}
			set
			{
				this._Applicants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applicants(Applicant entity)
		{
			this.SendPropertyChanging();
			entity.SmokeStatus = this;
		}
		
		private void detach_Applicants(Applicant entity)
		{
			this.SendPropertyChanging();
			entity.SmokeStatus = null;
		}
	}
	
	[Table(Name="metadata.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Abbr;
		
		private int _CountryID;
		
		private bool _Inactive;
		
		private EntitySet<ApplicantAddress> _ApplicantAddresses;
		
		private EntitySet<GeoSurcharge> _GeoSurcharges;
		
		private EntitySet<InsuranceForm> _InsuranceForms;
		
		private EntitySet<InsuranceLab> _InsuranceLabs;
		
		private EntitySet<PartyAddress> _PartyAddresses;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbrChanging(string value);
    partial void OnAbbrChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public State()
		{
			this._ApplicantAddresses = new EntitySet<ApplicantAddress>(new Action<ApplicantAddress>(this.attach_ApplicantAddresses), new Action<ApplicantAddress>(this.detach_ApplicantAddresses));
			this._GeoSurcharges = new EntitySet<GeoSurcharge>(new Action<GeoSurcharge>(this.attach_GeoSurcharges), new Action<GeoSurcharge>(this.detach_GeoSurcharges));
			this._InsuranceForms = new EntitySet<InsuranceForm>(new Action<InsuranceForm>(this.attach_InsuranceForms), new Action<InsuranceForm>(this.detach_InsuranceForms));
			this._InsuranceLabs = new EntitySet<InsuranceLab>(new Action<InsuranceLab>(this.attach_InsuranceLabs), new Action<InsuranceLab>(this.detach_InsuranceLabs));
			this._PartyAddresses = new EntitySet<PartyAddress>(new Action<PartyAddress>(this.attach_PartyAddresses), new Action<PartyAddress>(this.detach_PartyAddresses));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Abbr", DbType="NVarChar(5)")]
		public string Abbr
		{
			get
			{
				return this._Abbr;
			}
			set
			{
				if ((this._Abbr != value))
				{
					this.OnAbbrChanging(value);
					this.SendPropertyChanging();
					this._Abbr = value;
					this.SendPropertyChanged("Abbr");
					this.OnAbbrChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Association(Name="FK_ApplicantAddress_State", Storage="_ApplicantAddresses", ThisKey="ID", OtherKey="StateID", DeleteRule="NO ACTION")]
		public EntitySet<ApplicantAddress> ApplicantAddresses
		{
			get
			{
				return this._ApplicantAddresses;
			}
			set
			{
				this._ApplicantAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_GeoSurcharge_State", Storage="_GeoSurcharges", ThisKey="ID", OtherKey="StateID", DeleteRule="NO ACTION")]
		public EntitySet<GeoSurcharge> GeoSurcharges
		{
			get
			{
				return this._GeoSurcharges;
			}
			set
			{
				this._GeoSurcharges.Assign(value);
			}
		}
		
		[Association(Name="FK_InsuranceForm_State", Storage="_InsuranceForms", ThisKey="ID", OtherKey="StateID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceForm> InsuranceForms
		{
			get
			{
				return this._InsuranceForms;
			}
			set
			{
				this._InsuranceForms.Assign(value);
			}
		}
		
		[Association(Name="FK_InsuranceLab_State", Storage="_InsuranceLabs", ThisKey="ID", OtherKey="StateID", DeleteRule="NO ACTION")]
		public EntitySet<InsuranceLab> InsuranceLabs
		{
			get
			{
				return this._InsuranceLabs;
			}
			set
			{
				this._InsuranceLabs.Assign(value);
			}
		}
		
		[Association(Name="FK_PartyAddress_State", Storage="_PartyAddresses", ThisKey="ID", OtherKey="StateID", DeleteRule="NO ACTION")]
		public EntitySet<PartyAddress> PartyAddresses
		{
			get
			{
				return this._PartyAddresses;
			}
			set
			{
				this._PartyAddresses.Assign(value);
			}
		}
		
		[Association(Name="FK_State_Country", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_ApplicantAddresses(ApplicantAddress entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_GeoSurcharges(GeoSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_GeoSurcharges(GeoSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InsuranceForms(InsuranceForm entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InsuranceForms(InsuranceForm entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InsuranceLabs(InsuranceLab entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InsuranceLabs(InsuranceLab entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_PartyAddresses(PartyAddress entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[Table(Name="metadata.SubmissionType")]
	public partial class SubmissionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<IncompleteOrderDocumentItem> _IncompleteOrderDocumentItems;
		
		private EntitySet<OrderDocument> _OrderDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SubmissionType()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._IncompleteOrderDocumentItems = new EntitySet<IncompleteOrderDocumentItem>(new Action<IncompleteOrderDocumentItem>(this.attach_IncompleteOrderDocumentItems), new Action<IncompleteOrderDocumentItem>(this.detach_IncompleteOrderDocumentItems));
			this._OrderDocuments = new EntitySet<OrderDocument>(new Action<OrderDocument>(this.attach_OrderDocuments), new Action<OrderDocument>(this.detach_OrderDocuments));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Document_SubmissionType", Storage="_Documents", ThisKey="ID", OtherKey="SubmissionTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[Association(Name="FK_IncompleteOrderDocumentItem_SubmissionType", Storage="_IncompleteOrderDocumentItems", ThisKey="ID", OtherKey="SubmissionTypeID", DeleteRule="NO ACTION")]
		public EntitySet<IncompleteOrderDocumentItem> IncompleteOrderDocumentItems
		{
			get
			{
				return this._IncompleteOrderDocumentItems;
			}
			set
			{
				this._IncompleteOrderDocumentItems.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocument_SubmissionType", Storage="_OrderDocuments", ThisKey="ID", OtherKey="SubmissionTypeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocument> OrderDocuments
		{
			get
			{
				return this._OrderDocuments;
			}
			set
			{
				this._OrderDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = null;
		}
		
		private void attach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = this;
		}
		
		private void detach_IncompleteOrderDocumentItems(IncompleteOrderDocumentItem entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = null;
		}
		
		private void attach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = this;
		}
		
		private void detach_OrderDocuments(OrderDocument entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = null;
		}
	}
	
	[Table(Name="metadata.SurchargeType")]
	public partial class SurchargeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<OrderSurcharge> _OrderSurcharges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SurchargeType()
		{
			this._OrderSurcharges = new EntitySet<OrderSurcharge>(new Action<OrderSurcharge>(this.attach_OrderSurcharges), new Action<OrderSurcharge>(this.detach_OrderSurcharges));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderSurcharges_SurchargeType", Storage="_OrderSurcharges", ThisKey="ID", OtherKey="SurchargeTypeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderSurcharge> OrderSurcharges
		{
			get
			{
				return this._OrderSurcharges;
			}
			set
			{
				this._OrderSurcharges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderSurcharges(OrderSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.SurchargeType = this;
		}
		
		private void detach_OrderSurcharges(OrderSurcharge entity)
		{
			this.SendPropertyChanging();
			entity.SurchargeType = null;
		}
	}
	
	[Table(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PersonID;
		
		private string _UserName;
		
		private string _Password;
		
		private bool _Inactive;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.Guid> _ResetPasswordToken;
		
		private EntityRef<Person> _Person;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(System.Guid value);
    partial void OnPersonIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnResetPasswordTokenChanging(System.Nullable<System.Guid> value);
    partial void OnResetPasswordTokenChanged();
    #endregion
		
		public User()
		{
			this._Person = default(EntityRef<Person>);
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="Char(40) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ResetPasswordToken", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ResetPasswordToken
		{
			get
			{
				return this._ResetPasswordToken;
			}
			set
			{
				if ((this._ResetPasswordToken != value))
				{
					this.OnResetPasswordTokenChanging(value);
					this.SendPropertyChanging();
					this._ResetPasswordToken = value;
					this.SendPropertyChanged("ResetPasswordToken");
					this.OnResetPasswordTokenChanged();
				}
			}
		}
		
		[Association(Name="FK_User_Person", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_UserPermission_User", Storage="_UserPermissions", ThisKey="ID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UserPermission")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private int _PemissionTypeID;
		
		private EntityRef<PermissionType> _PermissionType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnPemissionTypeIDChanging(int value);
    partial void OnPemissionTypeIDChanged();
    #endregion
		
		public UserPermission()
		{
			this._PermissionType = default(EntityRef<PermissionType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_PemissionTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PemissionTypeID
		{
			get
			{
				return this._PemissionTypeID;
			}
			set
			{
				if ((this._PemissionTypeID != value))
				{
					if (this._PermissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPemissionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PemissionTypeID = value;
					this.SendPropertyChanged("PemissionTypeID");
					this.OnPemissionTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_UserPermission_PermissionType", Storage="_PermissionType", ThisKey="PemissionTypeID", OtherKey="ID", IsForeignKey=true)]
		public PermissionType PermissionType
		{
			get
			{
				return this._PermissionType.Entity;
			}
			set
			{
				PermissionType previousValue = this._PermissionType.Entity;
				if (((previousValue != value) 
							|| (this._PermissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionType.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._PermissionType.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._PemissionTypeID = value.ID;
					}
					else
					{
						this._PemissionTypeID = default(int);
					}
					this.SendPropertyChanged("PermissionType");
				}
			}
		}
		
		[Association(Name="FK_UserPermission_User", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.Version")]
	public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _Release;
		
		private int _Build;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReleaseChanging(decimal value);
    partial void OnReleaseChanged();
    partial void OnBuildChanging(int value);
    partial void OnBuildChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Version()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Release", DbType="Decimal(5,2) NOT NULL")]
		public decimal Release
		{
			get
			{
				return this._Release;
			}
			set
			{
				if ((this._Release != value))
				{
					this.OnReleaseChanging(value);
					this.SendPropertyChanging();
					this._Release = value;
					this.SendPropertyChanged("Release");
					this.OnReleaseChanged();
				}
			}
		}
		
		[Column(Storage="_Build", DbType="Int NOT NULL")]
		public int Build
		{
			get
			{
				return this._Build;
			}
			set
			{
				if ((this._Build != value))
				{
					this.OnBuildChanging(value);
					this.SendPropertyChanging();
					this._Build = value;
					this.SendPropertyChanged("Build");
					this.OnBuildChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.ZipCode")]
	public partial class ZipCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ZIPCode;
		
		private string _ZIPCodeType;
		
		private string _City;
		
		private string _CityType;
		
		private string _County;
		
		private string _CountyFIPS;
		
		private string _State;
		
		private string _StateCode;
		
		private string _StateFIPS;
		
		private string _MSA;
		
		private string _AreaCode;
		
		private string _TimeZone;
		
		private int _GMTOffset;
		
		private string _DST;
		
		private double _Latitude;
		
		private double _Longitude;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnZIPCodeChanging(string value);
    partial void OnZIPCodeChanged();
    partial void OnZIPCodeTypeChanging(string value);
    partial void OnZIPCodeTypeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCityTypeChanging(string value);
    partial void OnCityTypeChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCountyFIPSChanging(string value);
    partial void OnCountyFIPSChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnStateFIPSChanging(string value);
    partial void OnStateFIPSChanged();
    partial void OnMSAChanging(string value);
    partial void OnMSAChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnGMTOffsetChanging(int value);
    partial void OnGMTOffsetChanged();
    partial void OnDSTChanging(string value);
    partial void OnDSTChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    #endregion
		
		public ZipCode()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ZIPCode", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string ZIPCode
		{
			get
			{
				return this._ZIPCode;
			}
			set
			{
				if ((this._ZIPCode != value))
				{
					this.OnZIPCodeChanging(value);
					this.SendPropertyChanging();
					this._ZIPCode = value;
					this.SendPropertyChanged("ZIPCode");
					this.OnZIPCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ZIPCodeType", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string ZIPCodeType
		{
			get
			{
				return this._ZIPCodeType;
			}
			set
			{
				if ((this._ZIPCodeType != value))
				{
					this.OnZIPCodeTypeChanging(value);
					this.SendPropertyChanging();
					this._ZIPCodeType = value;
					this.SendPropertyChanged("ZIPCodeType");
					this.OnZIPCodeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(28) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_CityType", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string CityType
		{
			get
			{
				return this._CityType;
			}
			set
			{
				if ((this._CityType != value))
				{
					this.OnCityTypeChanging(value);
					this.SendPropertyChanging();
					this._CityType = value;
					this.SendPropertyChanged("CityType");
					this.OnCityTypeChanged();
				}
			}
		}
		
		[Column(Storage="_County", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[Column(Storage="_CountyFIPS", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string CountyFIPS
		{
			get
			{
				return this._CountyFIPS;
			}
			set
			{
				if ((this._CountyFIPS != value))
				{
					this.OnCountyFIPSChanging(value);
					this.SendPropertyChanging();
					this._CountyFIPS = value;
					this.SendPropertyChanged("CountyFIPS");
					this.OnCountyFIPSChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_StateCode", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StateFIPS", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string StateFIPS
		{
			get
			{
				return this._StateFIPS;
			}
			set
			{
				if ((this._StateFIPS != value))
				{
					this.OnStateFIPSChanging(value);
					this.SendPropertyChanging();
					this._StateFIPS = value;
					this.SendPropertyChanged("StateFIPS");
					this.OnStateFIPSChanged();
				}
			}
		}
		
		[Column(Storage="_MSA", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string MSA
		{
			get
			{
				return this._MSA;
			}
			set
			{
				if ((this._MSA != value))
				{
					this.OnMSAChanging(value);
					this.SendPropertyChanging();
					this._MSA = value;
					this.SendPropertyChanged("MSA");
					this.OnMSAChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZone", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[Column(Storage="_GMTOffset", DbType="Int NOT NULL")]
		public int GMTOffset
		{
			get
			{
				return this._GMTOffset;
			}
			set
			{
				if ((this._GMTOffset != value))
				{
					this.OnGMTOffsetChanging(value);
					this.SendPropertyChanging();
					this._GMTOffset = value;
					this.SendPropertyChanged("GMTOffset");
					this.OnGMTOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_DST", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string DST
		{
			get
			{
				return this._DST;
			}
			set
			{
				if ((this._DST != value))
				{
					this.OnDSTChanging(value);
					this.SendPropertyChanging();
					this._DST = value;
					this.SendPropertyChanged("DST");
					this.OnDSTChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private System.Nullable<int> _Version;
		
		private System.Data.Linq.Binary _Definition;
		
		public Sp_helpdiagramdefinitionResult()
		{
		}
		
		[Column(Name="version", Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Name="definition", Storage="_Definition", DbType="VarBinary(MAX)", CanBeNull=true)]
		public System.Data.Linq.Binary Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		
		private string _Name;
		
		private System.Nullable<int> _ID;
		
		private string _Owner;
		
		private System.Nullable<int> _OwnerID;
		
		public Sp_helpdiagramsResult()
		{
		}
		
		[Column(Storage="_Database", DbType="NVarChar(128)")]
		public string Database
		{
			get
			{
				return this._Database;
			}
			set
			{
				if ((this._Database != value))
				{
					this._Database = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(128)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
